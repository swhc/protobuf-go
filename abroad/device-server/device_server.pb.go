// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: device_server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_device_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_device_server_proto_rawDescGZIP(), []int{0}
}

type CollectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"` //数据列表
}

func (x *CollectList) Reset() {
	*x = CollectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectList) ProtoMessage() {}

func (x *CollectList) ProtoReflect() protoreflect.Message {
	mi := &file_device_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectList.ProtoReflect.Descriptor instead.
func (*CollectList) Descriptor() ([]byte, []int) {
	return file_device_server_proto_rawDescGZIP(), []int{1}
}

func (x *CollectList) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_device_server_proto protoreflect.FileDescriptor

var file_device_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x32, 0x92, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x19, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x06, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x06,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x5a, 0x05, 0x2e,
	0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_server_proto_rawDescOnce sync.Once
	file_device_server_proto_rawDescData = file_device_server_proto_rawDesc
)

func file_device_server_proto_rawDescGZIP() []byte {
	file_device_server_proto_rawDescOnce.Do(func() {
		file_device_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_server_proto_rawDescData)
	})
	return file_device_server_proto_rawDescData
}

var file_device_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_device_server_proto_goTypes = []interface{}{
	(*Empty)(nil),                    // 0: Empty
	(*CollectList)(nil),              // 1: CollectList
	(*CollectMatchRequestParam)(nil), // 2: CollectMatchRequestParam
	(*PushMsgMatchRequestParam)(nil), // 3: PushMsgMatchRequestParam
	(*CollectRequestParam)(nil),      // 4: CollectRequestParam
	(*CollectListRequestParam)(nil),  // 5: CollectListRequestParam
	(*PushSettingRequestParam)(nil),  // 6: PushSettingRequestParam
	(*CollectListResp)(nil),          // 7: CollectListResp
}
var file_device_server_proto_depIdxs = []int32{
	2, // 0: Device.CollectMatch:input_type -> CollectMatchRequestParam
	3, // 1: Device.PushMsgMatch:input_type -> PushMsgMatchRequestParam
	4, // 2: Device.CollectHandle:input_type -> CollectRequestParam
	5, // 3: Device.GetCollectList:input_type -> CollectListRequestParam
	6, // 4: Device.UpdatePushSetting:input_type -> PushSettingRequestParam
	0, // 5: Device.CollectMatch:output_type -> Empty
	0, // 6: Device.PushMsgMatch:output_type -> Empty
	0, // 7: Device.CollectHandle:output_type -> Empty
	7, // 8: Device.GetCollectList:output_type -> CollectListResp
	0, // 9: Device.UpdatePushSetting:output_type -> Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_device_server_proto_init() }
func file_device_server_proto_init() {
	if File_device_server_proto != nil {
		return
	}
	file_collect_match_proto_init()
	file_collect_v2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_device_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_server_proto_goTypes,
		DependencyIndexes: file_device_server_proto_depIdxs,
		MessageInfos:      file_device_server_proto_msgTypes,
	}.Build()
	File_device_server_proto = out.File
	file_device_server_proto_rawDesc = nil
	file_device_server_proto_goTypes = nil
	file_device_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	// 收藏比赛 (取消也在)
	CollectMatch(ctx context.Context, in *CollectMatchRequestParam, opts ...grpc.CallOption) (*Empty, error)
	// 收藏比赛事件推送
	PushMsgMatch(ctx context.Context, in *PushMsgMatchRequestParam, opts ...grpc.CallOption) (*Empty, error)
	// 收藏、取消收藏操作
	CollectHandle(ctx context.Context, in *CollectRequestParam, opts ...grpc.CallOption) (*Empty, error)
	GetCollectList(ctx context.Context, in *CollectListRequestParam, opts ...grpc.CallOption) (*CollectListResp, error)
	UpdatePushSetting(ctx context.Context, in *PushSettingRequestParam, opts ...grpc.CallOption) (*Empty, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) CollectMatch(ctx context.Context, in *CollectMatchRequestParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Device/CollectMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) PushMsgMatch(ctx context.Context, in *PushMsgMatchRequestParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Device/PushMsgMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) CollectHandle(ctx context.Context, in *CollectRequestParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Device/CollectHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetCollectList(ctx context.Context, in *CollectListRequestParam, opts ...grpc.CallOption) (*CollectListResp, error) {
	out := new(CollectListResp)
	err := c.cc.Invoke(ctx, "/Device/GetCollectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) UpdatePushSetting(ctx context.Context, in *PushSettingRequestParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Device/UpdatePushSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	// 收藏比赛 (取消也在)
	CollectMatch(context.Context, *CollectMatchRequestParam) (*Empty, error)
	// 收藏比赛事件推送
	PushMsgMatch(context.Context, *PushMsgMatchRequestParam) (*Empty, error)
	// 收藏、取消收藏操作
	CollectHandle(context.Context, *CollectRequestParam) (*Empty, error)
	GetCollectList(context.Context, *CollectListRequestParam) (*CollectListResp, error)
	UpdatePushSetting(context.Context, *PushSettingRequestParam) (*Empty, error)
}

// UnimplementedDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (*UnimplementedDeviceServer) CollectMatch(context.Context, *CollectMatchRequestParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMatch not implemented")
}
func (*UnimplementedDeviceServer) PushMsgMatch(context.Context, *PushMsgMatchRequestParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsgMatch not implemented")
}
func (*UnimplementedDeviceServer) CollectHandle(context.Context, *CollectRequestParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectHandle not implemented")
}
func (*UnimplementedDeviceServer) GetCollectList(context.Context, *CollectListRequestParam) (*CollectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectList not implemented")
}
func (*UnimplementedDeviceServer) UpdatePushSetting(context.Context, *PushSettingRequestParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushSetting not implemented")
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_CollectMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMatchRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).CollectMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Device/CollectMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).CollectMatch(ctx, req.(*CollectMatchRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_PushMsgMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMsgMatchRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).PushMsgMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Device/PushMsgMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).PushMsgMatch(ctx, req.(*PushMsgMatchRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_CollectHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).CollectHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Device/CollectHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).CollectHandle(ctx, req.(*CollectRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetCollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectListRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetCollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Device/GetCollectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetCollectList(ctx, req.(*CollectListRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_UpdatePushSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSettingRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).UpdatePushSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Device/UpdatePushSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).UpdatePushSetting(ctx, req.(*PushSettingRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectMatch",
			Handler:    _Device_CollectMatch_Handler,
		},
		{
			MethodName: "PushMsgMatch",
			Handler:    _Device_PushMsgMatch_Handler,
		},
		{
			MethodName: "CollectHandle",
			Handler:    _Device_CollectHandle_Handler,
		},
		{
			MethodName: "GetCollectList",
			Handler:    _Device_GetCollectList_Handler,
		},
		{
			MethodName: "UpdatePushSetting",
			Handler:    _Device_UpdatePushSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device_server.proto",
}
