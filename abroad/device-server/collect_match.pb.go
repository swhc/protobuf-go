// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: collect_match.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectMatchRequestParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     int64  `protobuf:"varint,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	DeviceToken string `protobuf:"bytes,2,opt,name=DeviceToken,proto3" json:"DeviceToken,omitempty"`
}

func (x *CollectMatchRequestParam) Reset() {
	*x = CollectMatchRequestParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectMatchRequestParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectMatchRequestParam) ProtoMessage() {}

func (x *CollectMatchRequestParam) ProtoReflect() protoreflect.Message {
	mi := &file_collect_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectMatchRequestParam.ProtoReflect.Descriptor instead.
func (*CollectMatchRequestParam) Descriptor() ([]byte, []int) {
	return file_collect_match_proto_rawDescGZIP(), []int{0}
}

func (x *CollectMatchRequestParam) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *CollectMatchRequestParam) GetDeviceToken() string {
	if x != nil {
		return x.DeviceToken
	}
	return ""
}

type CollectMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int64             `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg     string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Success map[string]string `protobuf:"bytes,3,rep,name=success,proto3" json:"success,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Err     map[string]string `protobuf:"bytes,4,rep,name=err,proto3" json:"err,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectMatchResponse) Reset() {
	*x = CollectMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectMatchResponse) ProtoMessage() {}

func (x *CollectMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collect_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectMatchResponse.ProtoReflect.Descriptor instead.
func (*CollectMatchResponse) Descriptor() ([]byte, []int) {
	return file_collect_match_proto_rawDescGZIP(), []int{1}
}

func (x *CollectMatchResponse) GetRet() int64 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CollectMatchResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectMatchResponse) GetSuccess() map[string]string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *CollectMatchResponse) GetErr() map[string]string {
	if x != nil {
		return x.Err
	}
	return nil
}

var File_collect_match_proto protoreflect.FileDescriptor

var file_collect_match_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x02,
	0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x50,
	0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_collect_match_proto_rawDescOnce sync.Once
	file_collect_match_proto_rawDescData = file_collect_match_proto_rawDesc
)

func file_collect_match_proto_rawDescGZIP() []byte {
	file_collect_match_proto_rawDescOnce.Do(func() {
		file_collect_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_collect_match_proto_rawDescData)
	})
	return file_collect_match_proto_rawDescData
}

var file_collect_match_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_collect_match_proto_goTypes = []interface{}{
	(*CollectMatchRequestParam)(nil), // 0: CollectMatchRequestParam
	(*CollectMatchResponse)(nil),     // 1: CollectMatchResponse
	nil,                              // 2: CollectMatchResponse.SuccessEntry
	nil,                              // 3: CollectMatchResponse.ErrEntry
}
var file_collect_match_proto_depIdxs = []int32{
	2, // 0: CollectMatchResponse.success:type_name -> CollectMatchResponse.SuccessEntry
	3, // 1: CollectMatchResponse.err:type_name -> CollectMatchResponse.ErrEntry
	0, // 2: DeviceServer.CollectMatch:input_type -> CollectMatchRequestParam
	1, // 3: DeviceServer.CollectMatch:output_type -> CollectMatchResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_collect_match_proto_init() }
func file_collect_match_proto_init() {
	if File_collect_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collect_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectMatchRequestParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collect_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_collect_match_proto_goTypes,
		DependencyIndexes: file_collect_match_proto_depIdxs,
		MessageInfos:      file_collect_match_proto_msgTypes,
	}.Build()
	File_collect_match_proto = out.File
	file_collect_match_proto_rawDesc = nil
	file_collect_match_proto_goTypes = nil
	file_collect_match_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServerClient is the client API for DeviceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServerClient interface {
	// 收藏比赛
	CollectMatch(ctx context.Context, in *CollectMatchRequestParam, opts ...grpc.CallOption) (*CollectMatchResponse, error)
}

type deviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServerClient(cc grpc.ClientConnInterface) DeviceServerClient {
	return &deviceServerClient{cc}
}

func (c *deviceServerClient) CollectMatch(ctx context.Context, in *CollectMatchRequestParam, opts ...grpc.CallOption) (*CollectMatchResponse, error) {
	out := new(CollectMatchResponse)
	err := c.cc.Invoke(ctx, "/DeviceServer/CollectMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServerServer is the server API for DeviceServer service.
type DeviceServerServer interface {
	// 收藏比赛
	CollectMatch(context.Context, *CollectMatchRequestParam) (*CollectMatchResponse, error)
}

// UnimplementedDeviceServerServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServerServer struct {
}

func (*UnimplementedDeviceServerServer) CollectMatch(context.Context, *CollectMatchRequestParam) (*CollectMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMatch not implemented")
}

func RegisterDeviceServerServer(s *grpc.Server, srv DeviceServerServer) {
	s.RegisterService(&_DeviceServer_serviceDesc, srv)
}

func _DeviceServer_CollectMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMatchRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).CollectMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceServer/CollectMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).CollectMatch(ctx, req.(*CollectMatchRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceServer",
	HandlerType: (*DeviceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectMatch",
			Handler:    _DeviceServer_CollectMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect_match.proto",
}
