// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: match.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//比赛阵容
type LineupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  string `protobuf:"bytes,1,opt,name=sportId,proto3" json:"sportId,omitempty"`   //1足球 2篮球
	EventId  string `protobuf:"bytes,2,opt,name=eventId,proto3" json:"eventId,omitempty"`   //比赛id
	Language string `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"` //请求语言  1:zh  2:en
}

func (x *LineupRequest) Reset() {
	*x = LineupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupRequest) ProtoMessage() {}

func (x *LineupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupRequest.ProtoReflect.Descriptor instead.
func (*LineupRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *LineupRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *LineupRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *LineupRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type LineupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingMain      *Starting     `protobuf:"bytes,1,opt,name=StartingMain,proto3" json:"StartingMain,omitempty"`            //阵容首发（主队）“若没数据返回nil”
	StartingCust      *Starting     `protobuf:"bytes,2,opt,name=StartingCust,proto3" json:"StartingCust,omitempty"`            //首发阵容（客队）“若没数据返回nil”
	ForecastMain      *Starting     `protobuf:"bytes,3,opt,name=ForecastMain,proto3" json:"ForecastMain,omitempty"`            //预测阵容（主队）“若没数据返回nil”
	ForecastCust      *Starting     `protobuf:"bytes,4,opt,name=ForecastCust,proto3" json:"ForecastCust,omitempty"`            //预测阵容（客队）“若没数据返回nil”
	ScaleList         []*Scale      `protobuf:"bytes,5,rep,name=ScaleList,proto3" json:"ScaleList,omitempty"`                  //预测阵容占比
	ReserveLineupMain *Starting     `protobuf:"bytes,12,opt,name=ReserveLineupMain,proto3" json:"ReserveLineupMain,omitempty"` //替补阵容（主队）
	ReserveLineupCust *Starting     `protobuf:"bytes,11,opt,name=ReserveLineupCust,proto3" json:"ReserveLineupCust,omitempty"` //替补阵容（客队）
	InjuryArrestMain  *InjuryArrest `protobuf:"bytes,8,opt,name=InjuryArrestMain,proto3" json:"InjuryArrestMain,omitempty"`    //伤停情况（主队）
	InjuryArrestCust  *InjuryArrest `protobuf:"bytes,9,opt,name=InjuryArrestCust,proto3" json:"InjuryArrestCust,omitempty"`    //伤停情况（客队）
}

func (x *LineupResponse) Reset() {
	*x = LineupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupResponse) ProtoMessage() {}

func (x *LineupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupResponse.ProtoReflect.Descriptor instead.
func (*LineupResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *LineupResponse) GetStartingMain() *Starting {
	if x != nil {
		return x.StartingMain
	}
	return nil
}

func (x *LineupResponse) GetStartingCust() *Starting {
	if x != nil {
		return x.StartingCust
	}
	return nil
}

func (x *LineupResponse) GetForecastMain() *Starting {
	if x != nil {
		return x.ForecastMain
	}
	return nil
}

func (x *LineupResponse) GetForecastCust() *Starting {
	if x != nil {
		return x.ForecastCust
	}
	return nil
}

func (x *LineupResponse) GetScaleList() []*Scale {
	if x != nil {
		return x.ScaleList
	}
	return nil
}

func (x *LineupResponse) GetReserveLineupMain() *Starting {
	if x != nil {
		return x.ReserveLineupMain
	}
	return nil
}

func (x *LineupResponse) GetReserveLineupCust() *Starting {
	if x != nil {
		return x.ReserveLineupCust
	}
	return nil
}

func (x *LineupResponse) GetInjuryArrestMain() *InjuryArrest {
	if x != nil {
		return x.InjuryArrestMain
	}
	return nil
}

func (x *LineupResponse) GetInjuryArrestCust() *InjuryArrest {
	if x != nil {
		return x.InjuryArrestCust
	}
	return nil
}

type Starting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64  `protobuf:"varint,3,opt,name=TeamId,proto3" json:"TeamId,omitempty"`       //球队id
	TeamImage string `protobuf:"bytes,4,opt,name=TeamImage,proto3" json:"TeamImage,omitempty"`  //球队队徽
	TeamName  string `protobuf:"bytes,5,opt,name=TeamName,proto3" json:"TeamName,omitempty"`    //球队名称
	CoachName string `protobuf:"bytes,10,opt,name=CoachName,proto3" json:"CoachName,omitempty"` //教练名称
	//  string Formation = 6; //阵容
	//  int64 WinRate = 7; //胜率
	//  int64 BigBallRate = 8; //大球率
	//  int64 CornerKickRate = 9; //大角球率
	//  string Score = 1; //例：score 8.5
	Member []*Member `protobuf:"bytes,2,rep,name=member,proto3" json:"member,omitempty"` //球队成员
}

func (x *Starting) Reset() {
	*x = Starting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Starting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Starting) ProtoMessage() {}

func (x *Starting) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Starting.ProtoReflect.Descriptor instead.
func (*Starting) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *Starting) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Starting) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *Starting) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Starting) GetCoachName() string {
	if x != nil {
		return x.CoachName
	}
	return ""
}

func (x *Starting) GetMember() []*Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64  `protobuf:"varint,3,opt,name=PersonId,proto3" json:"PersonId,omitempty"`    //球员id
	Image      string `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`           //球员图片
	PersonName string `protobuf:"bytes,5,opt,name=PersonName,proto3" json:"PersonName,omitempty"` //球员名称
	//  int64    ElevateType = 6;   //提升类型（1：在场时胜率提升，2：在场时总进球提升，3：在场时角球数提升）
	//  int64    ElevateRate = 7;   //提升百分比
	ClothesNum int64  `protobuf:"varint,8,opt,name=ClothesNum,proto3" json:"ClothesNum,omitempty"` //球衣号码
	Position   string `protobuf:"bytes,9,opt,name=Position,proto3" json:"Position,omitempty"`      //位置
	PositionId string `protobuf:"bytes,10,opt,name=PositionId,proto3" json:"PositionId,omitempty"` //位置id
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *Member) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *Member) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Member) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *Member) GetClothesNum() int64 {
	if x != nil {
		return x.ClothesNum
	}
	return 0
}

func (x *Member) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Member) GetPositionId() string {
	if x != nil {
		return x.PositionId
	}
	return ""
}

type Scale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`           //占比标题
	MainTotal  string `protobuf:"bytes,5,opt,name=MainTotal,proto3" json:"MainTotal,omitempty"`   //主队总计，例如：3.1/1.2|u，通过 |u 或者 |d 辨别是升是降
	MainSingle string `protobuf:"bytes,6,opt,name=MainSingle,proto3" json:"MainSingle,omitempty"` //主队单计，例如：（2.8/1.2），包含括号
	CustTotal  string `protobuf:"bytes,2,opt,name=CustTotal,proto3" json:"CustTotal,omitempty"`   //客队总计，例如：1.5/2，通过 |u 或者 |d 辨别是升是降
	CustSingle string `protobuf:"bytes,1,opt,name=CustSingle,proto3" json:"CustSingle,omitempty"` //客队单计，例如：(3.5/1.0)，包含括号
}

func (x *Scale) Reset() {
	*x = Scale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scale) ProtoMessage() {}

func (x *Scale) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scale.ProtoReflect.Descriptor instead.
func (*Scale) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *Scale) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Scale) GetMainTotal() string {
	if x != nil {
		return x.MainTotal
	}
	return ""
}

func (x *Scale) GetMainSingle() string {
	if x != nil {
		return x.MainSingle
	}
	return ""
}

func (x *Scale) GetCustTotal() string {
	if x != nil {
		return x.CustTotal
	}
	return ""
}

func (x *Scale) GetCustSingle() string {
	if x != nil {
		return x.CustSingle
	}
	return ""
}

type InjuryArrest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64      `protobuf:"varint,3,opt,name=TeamId,proto3" json:"TeamId,omitempty"`      //球队id
	TeamName  string     `protobuf:"bytes,5,opt,name=TeamName,proto3" json:"TeamName,omitempty"`   //球队名字
	TeamImage string     `protobuf:"bytes,4,opt,name=TeamImage,proto3" json:"TeamImage,omitempty"` //球队图片
	Member    []*Member3 `protobuf:"bytes,1,rep,name=Member,proto3" json:"Member,omitempty"`       //球队成员
}

func (x *InjuryArrest) Reset() {
	*x = InjuryArrest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjuryArrest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjuryArrest) ProtoMessage() {}

func (x *InjuryArrest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjuryArrest.ProtoReflect.Descriptor instead.
func (*InjuryArrest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *InjuryArrest) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *InjuryArrest) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *InjuryArrest) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *InjuryArrest) GetMember() []*Member3 {
	if x != nil {
		return x.Member
	}
	return nil
}

type Member3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64  `protobuf:"varint,3,opt,name=PersonId,proto3" json:"PersonId,omitempty"`     //球员id
	PersonName string `protobuf:"bytes,4,opt,name=PersonName,proto3" json:"PersonName,omitempty"`  //球队名字
	Image      string `protobuf:"bytes,5,opt,name=Image,proto3" json:"Image,omitempty"`            //球员图片
	Position   string `protobuf:"bytes,6,opt,name=Position,proto3" json:"Position,omitempty"`      //球员位置
	PositionId string `protobuf:"bytes,2,opt,name=PositionId,proto3" json:"PositionId,omitempty"`  //球员位置id
	ClothesNum int64  `protobuf:"varint,7,opt,name=ClothesNum,proto3" json:"ClothesNum,omitempty"` //球衣号码
	Reason     string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`          //受伤等原因
}

func (x *Member3) Reset() {
	*x = Member3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member3) ProtoMessage() {}

func (x *Member3) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member3.ProtoReflect.Descriptor instead.
func (*Member3) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *Member3) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *Member3) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *Member3) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Member3) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Member3) GetPositionId() string {
	if x != nil {
		return x.PositionId
	}
	return ""
}

func (x *Member3) GetClothesNum() int64 {
	if x != nil {
		return x.ClothesNum
	}
	return 0
}

func (x *Member3) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//比赛直播
type LiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  string `protobuf:"bytes,1,opt,name=SportId,proto3" json:"SportId,omitempty"`   //1足球 2篮球
	EventId  string `protobuf:"bytes,2,opt,name=EventId,proto3" json:"EventId,omitempty"`   //比赛id
	Period   int64  `protobuf:"varint,4,opt,name=Period,proto3" json:"Period,omitempty"`    //第几节；示例：1
	Language string `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"` //请求语言  1:zh  2:en
}

func (x *LiveRequest) Reset() {
	*x = LiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRequest) ProtoMessage() {}

func (x *LiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRequest.ProtoReflect.Descriptor instead.
func (*LiveRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *LiveRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *LiveRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *LiveRequest) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *LiveRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type LiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LiveDetail `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LiveResponse) Reset() {
	*x = LiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveResponse) ProtoMessage() {}

func (x *LiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveResponse.ProtoReflect.Descriptor instead.
func (*LiveResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *LiveResponse) GetData() []*LiveDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type LiveDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId   int64  `protobuf:"varint,2,opt,name=CommentId,proto3" json:"CommentId,omitempty"`    //评论id
	Period      int64  `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`          //第几节；示例：1
	Image       string `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`             //头像
	CommentTime string `protobuf:"bytes,5,opt,name=CommentTime,proto3" json:"CommentTime,omitempty"` //当前评论的时间；示例：05:38
	Comment     string `protobuf:"bytes,7,opt,name=Comment,proto3" json:"Comment,omitempty"`         //直播评论的内容
	Score       string `protobuf:"bytes,8,opt,name=score,proto3" json:"score,omitempty"`             //当前比分
}

func (x *LiveDetail) Reset() {
	*x = LiveDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDetail) ProtoMessage() {}

func (x *LiveDetail) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDetail.ProtoReflect.Descriptor instead.
func (*LiveDetail) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

func (x *LiveDetail) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *LiveDetail) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *LiveDetail) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *LiveDetail) GetCommentTime() string {
	if x != nil {
		return x.CommentTime
	}
	return ""
}

func (x *LiveDetail) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *LiveDetail) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type LiveTabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  string `protobuf:"bytes,1,opt,name=SportId,proto3" json:"SportId,omitempty"`   //1足球 2篮球
	EventId  string `protobuf:"bytes,2,opt,name=EventId,proto3" json:"EventId,omitempty"`   //比赛id
	Language string `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"` //请求语言  1:zh  2:en
}

func (x *LiveTabRequest) Reset() {
	*x = LiveTabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveTabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveTabRequest) ProtoMessage() {}

func (x *LiveTabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveTabRequest.ProtoReflect.Descriptor instead.
func (*LiveTabRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{10}
}

func (x *LiveTabRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *LiveTabRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *LiveTabRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type LiveTabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*LiveTab `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *LiveTabResponse) Reset() {
	*x = LiveTabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveTabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveTabResponse) ProtoMessage() {}

func (x *LiveTabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveTabResponse.ProtoReflect.Descriptor instead.
func (*LiveTabResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{11}
}

func (x *LiveTabResponse) GetList() []*LiveTab {
	if x != nil {
		return x.List
	}
	return nil
}

type LiveTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period         int64  `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`                //第几节；示例：1
	IsCurrentStage string `protobuf:"bytes,2,opt,name=IsCurrentStage,proto3" json:"IsCurrentStage,omitempty"` //是否当前阶段：1是，0否
}

func (x *LiveTab) Reset() {
	*x = LiveTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveTab) ProtoMessage() {}

func (x *LiveTab) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveTab.ProtoReflect.Descriptor instead.
func (*LiveTab) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{12}
}

func (x *LiveTab) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *LiveTab) GetIsCurrentStage() string {
	if x != nil {
		return x.IsCurrentStage
	}
	return ""
}

//赛事详情-数据
type StatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  string `protobuf:"bytes,1,opt,name=SportId,proto3" json:"SportId,omitempty"`   //1足球 2篮球
	EventId  string `protobuf:"bytes,2,opt,name=EventId,proto3" json:"EventId,omitempty"`   //比赛id
	Language string `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"` //请求语言  1:zh  2:en
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{13}
}

func (x *StatisticsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *StatisticsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StatisticsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type StatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Historical  *StatisticsDetail `protobuf:"bytes,4,opt,name=Historical,proto3" json:"Historical,omitempty"`    //历史交锋
	Lately      *Lately           `protobuf:"bytes,3,opt,name=Lately,proto3" json:"Lately,omitempty"`            //近期战绩
	Future      *Future           `protobuf:"bytes,5,opt,name=Future,proto3" json:"Future,omitempty"`            //未来赛程 - 5条
	StartTime   int64             `protobuf:"varint,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`     //比赛开始时间
	MatchStatus int64             `protobuf:"varint,2,opt,name=MatchStatus,proto3" json:"MatchStatus,omitempty"` //数据中心的比赛状态
	HomeTeamId  int64             `protobuf:"varint,6,opt,name=HomeTeamId,proto3" json:"HomeTeamId,omitempty"`   //主队ID
	AwayTeamId  int64             `protobuf:"varint,7,opt,name=AwayTeamId,proto3" json:"AwayTeamId,omitempty"`   //客队ID
}

func (x *StatisticsResponse) Reset() {
	*x = StatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsResponse) ProtoMessage() {}

func (x *StatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsResponse.ProtoReflect.Descriptor instead.
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{14}
}

func (x *StatisticsResponse) GetHistorical() *StatisticsDetail {
	if x != nil {
		return x.Historical
	}
	return nil
}

func (x *StatisticsResponse) GetLately() *Lately {
	if x != nil {
		return x.Lately
	}
	return nil
}

func (x *StatisticsResponse) GetFuture() *Future {
	if x != nil {
		return x.Future
	}
	return nil
}

func (x *StatisticsResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StatisticsResponse) GetMatchStatus() int64 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *StatisticsResponse) GetHomeTeamId() int64 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *StatisticsResponse) GetAwayTeamId() int64 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

type StatisticsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int64                   `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`          //总场次
	Win            int64                   `protobuf:"varint,2,opt,name=Win,proto3" json:"Win,omitempty"`              //胜数
	Lose           int64                   `protobuf:"varint,3,opt,name=Lose,proto3" json:"Lose,omitempty"`            //负数
	TeamName       string                  `protobuf:"bytes,4,opt,name=TeamName,proto3" json:"TeamName,omitempty"`     //球队名称
	TeamImages     string                  `protobuf:"bytes,5,opt,name=TeamImages,proto3" json:"TeamImages,omitempty"` //球队队徽
	StatisticsList []*StatisticsListDetail `protobuf:"bytes,6,rep,name=StatisticsList,proto3" json:"StatisticsList,omitempty"`
}

func (x *StatisticsDetail) Reset() {
	*x = StatisticsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsDetail) ProtoMessage() {}

func (x *StatisticsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsDetail.ProtoReflect.Descriptor instead.
func (*StatisticsDetail) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{15}
}

func (x *StatisticsDetail) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatisticsDetail) GetWin() int64 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *StatisticsDetail) GetLose() int64 {
	if x != nil {
		return x.Lose
	}
	return 0
}

func (x *StatisticsDetail) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *StatisticsDetail) GetTeamImages() string {
	if x != nil {
		return x.TeamImages
	}
	return ""
}

func (x *StatisticsDetail) GetStatisticsList() []*StatisticsListDetail {
	if x != nil {
		return x.StatisticsList
	}
	return nil
}

type StatisticsListDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         int64   `protobuf:"varint,1,opt,name=EventId,proto3" json:"EventId,omitempty"`                 //比赛id
	HomeTeamId      int64   `protobuf:"varint,31,opt,name=HomeTeamId,proto3" json:"HomeTeamId,omitempty"`          //主队id
	AwayTeamId      int64   `protobuf:"varint,33,opt,name=AwayTeamId,proto3" json:"AwayTeamId,omitempty"`          //客队id
	HistoricalDate  int64   `protobuf:"varint,2,opt,name=HistoricalDate,proto3" json:"HistoricalDate,omitempty"`   //日期/赛事
	MatchName       string  `protobuf:"bytes,3,opt,name=MatchName,proto3" json:"MatchName,omitempty"`              //赛事
	Round           string  `protobuf:"bytes,20,opt,name=Round,proto3" json:"Round,omitempty"`                     //赛事轮次
	MainTeamName    string  `protobuf:"bytes,4,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`        //主队名称
	CustTeamName    string  `protobuf:"bytes,7,opt,name=CustTeamName,proto3" json:"CustTeamName,omitempty"`        //客队名称
	ResultScore     string  `protobuf:"bytes,21,opt,name=ResultScore,proto3" json:"ResultScore,omitempty"`         //结果比分
	HalfCourtScore  string  `protobuf:"bytes,6,opt,name=HalfCourtScore,proto3" json:"HalfCourtScore,omitempty"`    //半场分数（始终灰色）
	PointSpread     float32 `protobuf:"fixed32,8,opt,name=PointSpread,proto3" json:"PointSpread,omitempty"`        //让分
	PointSpreadType int64   `protobuf:"varint,9,opt,name=PointSpreadType,proto3" json:"PointSpreadType,omitempty"` //让分类型（1：大|胜|赢，2：平|走，3：小|输）
	TotalScore      float32 `protobuf:"fixed32,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`         //总分
	TotalScoreType  int64   `protobuf:"varint,11,opt,name=TotalScoreType,proto3" json:"TotalScoreType,omitempty"`  //总分类型（1：大|胜|赢，2：平|走，3：小|输）
	SameEvent       bool    `protobuf:"varint,12,opt,name=SameEvent,proto3" json:"SameEvent,omitempty"`            //同比赛
	SameHomeCourt   bool    `protobuf:"varint,13,opt,name=SameHomeCourt,proto3" json:"SameHomeCourt,omitempty"`    //同主客
	MarkType        int64   `protobuf:"varint,14,opt,name=MarkType,proto3" json:"MarkType,omitempty"`              //标记类型（1胜  2负）
	IsMainTeam      bool    `protobuf:"varint,15,opt,name=IsMainTeam,proto3" json:"IsMainTeam,omitempty"`          //是否主队
	MainScore       int64   `protobuf:"varint,16,opt,name=MainScore,proto3" json:"MainScore,omitempty"`            //主队比分
	AwayScore       int64   `protobuf:"varint,17,opt,name=AwayScore,proto3" json:"AwayScore,omitempty"`            //客队比分
	MainTeamLogo    string  `protobuf:"bytes,18,opt,name=MainTeamLogo,proto3" json:"MainTeamLogo,omitempty"`       //主队图标
	AwayTeamLogo    string  `protobuf:"bytes,19,opt,name=AwayTeamLogo,proto3" json:"AwayTeamLogo,omitempty"`       //客队图标
	TournamentId    int64   `protobuf:"varint,22,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`      //赛事id
}

func (x *StatisticsListDetail) Reset() {
	*x = StatisticsListDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsListDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsListDetail) ProtoMessage() {}

func (x *StatisticsListDetail) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsListDetail.ProtoReflect.Descriptor instead.
func (*StatisticsListDetail) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{16}
}

func (x *StatisticsListDetail) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *StatisticsListDetail) GetHomeTeamId() int64 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *StatisticsListDetail) GetAwayTeamId() int64 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

func (x *StatisticsListDetail) GetHistoricalDate() int64 {
	if x != nil {
		return x.HistoricalDate
	}
	return 0
}

func (x *StatisticsListDetail) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *StatisticsListDetail) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

func (x *StatisticsListDetail) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *StatisticsListDetail) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *StatisticsListDetail) GetResultScore() string {
	if x != nil {
		return x.ResultScore
	}
	return ""
}

func (x *StatisticsListDetail) GetHalfCourtScore() string {
	if x != nil {
		return x.HalfCourtScore
	}
	return ""
}

func (x *StatisticsListDetail) GetPointSpread() float32 {
	if x != nil {
		return x.PointSpread
	}
	return 0
}

func (x *StatisticsListDetail) GetPointSpreadType() int64 {
	if x != nil {
		return x.PointSpreadType
	}
	return 0
}

func (x *StatisticsListDetail) GetTotalScore() float32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *StatisticsListDetail) GetTotalScoreType() int64 {
	if x != nil {
		return x.TotalScoreType
	}
	return 0
}

func (x *StatisticsListDetail) GetSameEvent() bool {
	if x != nil {
		return x.SameEvent
	}
	return false
}

func (x *StatisticsListDetail) GetSameHomeCourt() bool {
	if x != nil {
		return x.SameHomeCourt
	}
	return false
}

func (x *StatisticsListDetail) GetMarkType() int64 {
	if x != nil {
		return x.MarkType
	}
	return 0
}

func (x *StatisticsListDetail) GetIsMainTeam() bool {
	if x != nil {
		return x.IsMainTeam
	}
	return false
}

func (x *StatisticsListDetail) GetMainScore() int64 {
	if x != nil {
		return x.MainScore
	}
	return 0
}

func (x *StatisticsListDetail) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *StatisticsListDetail) GetMainTeamLogo() string {
	if x != nil {
		return x.MainTeamLogo
	}
	return ""
}

func (x *StatisticsListDetail) GetAwayTeamLogo() string {
	if x != nil {
		return x.AwayTeamLogo
	}
	return ""
}

func (x *StatisticsListDetail) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

type Lately struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTeamName   string                  `protobuf:"bytes,5,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`     //主队名称
	CustTeamName   string                  `protobuf:"bytes,6,opt,name=CustTeamName,proto3" json:"CustTeamName,omitempty"`     //客队名称
	MainTeamImages string                  `protobuf:"bytes,7,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"` //主队队徽
	CustTeamImages string                  `protobuf:"bytes,8,opt,name=CustTeamImages,proto3" json:"CustTeamImages,omitempty"` //客队队徽
	MainList       []*StatisticsListDetail `protobuf:"bytes,9,rep,name=MainList,proto3" json:"MainList,omitempty"`             //主队近期战绩列表
	CustList       []*StatisticsListDetail `protobuf:"bytes,10,rep,name=CustList,proto3" json:"CustList,omitempty"`            //客队近期战绩列表
}

func (x *Lately) Reset() {
	*x = Lately{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lately) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lately) ProtoMessage() {}

func (x *Lately) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lately.ProtoReflect.Descriptor instead.
func (*Lately) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{17}
}

func (x *Lately) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *Lately) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *Lately) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *Lately) GetCustTeamImages() string {
	if x != nil {
		return x.CustTeamImages
	}
	return ""
}

func (x *Lately) GetMainList() []*StatisticsListDetail {
	if x != nil {
		return x.MainList
	}
	return nil
}

func (x *Lately) GetCustList() []*StatisticsListDetail {
	if x != nil {
		return x.CustList
	}
	return nil
}

type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTeamName   string        `protobuf:"bytes,1,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`
	CustTeamName   string        `protobuf:"bytes,2,opt,name=CustTeamName,proto3" json:"CustTeamName,omitempty"`
	MainTeamImages string        `protobuf:"bytes,3,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"`
	CustTeamImages string        `protobuf:"bytes,4,opt,name=CustTeamImages,proto3" json:"CustTeamImages,omitempty"`
	MainList       []*FutureList `protobuf:"bytes,5,rep,name=MainList,proto3" json:"MainList,omitempty"`
	CustList       []*FutureList `protobuf:"bytes,6,rep,name=CustList,proto3" json:"CustList,omitempty"`
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{18}
}

func (x *Future) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *Future) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *Future) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *Future) GetCustTeamImages() string {
	if x != nil {
		return x.CustTeamImages
	}
	return ""
}

func (x *Future) GetMainList() []*FutureList {
	if x != nil {
		return x.MainList
	}
	return nil
}

func (x *Future) GetCustList() []*FutureList {
	if x != nil {
		return x.CustList
	}
	return nil
}

type FutureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        int64  `protobuf:"varint,1,opt,name=EventId,proto3" json:"EventId,omitempty"`               //比赛id
	HistoricalDate int64  `protobuf:"varint,2,opt,name=HistoricalDate,proto3" json:"HistoricalDate,omitempty"` //历史日期
	MatchName      string `protobuf:"bytes,3,opt,name=MatchName,proto3" json:"MatchName,omitempty"`            //联赛名称
	Round          string `protobuf:"bytes,9,opt,name=Round,proto3" json:"Round,omitempty"`                    //轮次
	MainTeamName   string `protobuf:"bytes,4,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`      //主队名称
	CustTeamName   string `protobuf:"bytes,6,opt,name=CustTeamName,proto3" json:"CustTeamName,omitempty"`      //客队名称
	Spacing        int64  `protobuf:"varint,8,opt,name=Spacing,proto3" json:"Spacing,omitempty"`               //间隔天数
	MainTeamLogo   string `protobuf:"bytes,10,opt,name=MainTeamLogo,proto3" json:"MainTeamLogo,omitempty"`     //主队图标
	AwayTeamLogo   string `protobuf:"bytes,11,opt,name=AwayTeamLogo,proto3" json:"AwayTeamLogo,omitempty"`     //客队图标
	MainTeamId     int64  `protobuf:"varint,12,opt,name=MainTeamId,proto3" json:"MainTeamId,omitempty"`        //主队名称
	CustTeamId     int64  `protobuf:"varint,13,opt,name=CustTeamId,proto3" json:"CustTeamId,omitempty"`        //客队名称
	TournamentId   int64  `protobuf:"varint,22,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`    //联赛id
}

func (x *FutureList) Reset() {
	*x = FutureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureList) ProtoMessage() {}

func (x *FutureList) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureList.ProtoReflect.Descriptor instead.
func (*FutureList) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{19}
}

func (x *FutureList) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *FutureList) GetHistoricalDate() int64 {
	if x != nil {
		return x.HistoricalDate
	}
	return 0
}

func (x *FutureList) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *FutureList) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

func (x *FutureList) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *FutureList) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *FutureList) GetSpacing() int64 {
	if x != nil {
		return x.Spacing
	}
	return 0
}

func (x *FutureList) GetMainTeamLogo() string {
	if x != nil {
		return x.MainTeamLogo
	}
	return ""
}

func (x *FutureList) GetAwayTeamLogo() string {
	if x != nil {
		return x.AwayTeamLogo
	}
	return ""
}

func (x *FutureList) GetMainTeamId() int64 {
	if x != nil {
		return x.MainTeamId
	}
	return 0
}

func (x *FutureList) GetCustTeamId() int64 {
	if x != nil {
		return x.CustTeamId
	}
	return 0
}

func (x *FutureList) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a,
	0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xda,
	0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x2d, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x2d,
	0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x75, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x43, 0x75, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41,
	0x72, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10,
	0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x10, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x6a,
	0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10, 0x49, 0x6e, 0x6a, 0x75, 0x72,
	0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x74,
	0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x75, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x52, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x0c,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x0f,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a,
	0x07, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x89, 0x02,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x52, 0x06, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x77, 0x61,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x06, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x48, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x65,
	0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x53, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d,
	0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x77, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08,
	0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x06,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x4d,
	0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x90, 0x03, 0x0a, 0x0a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_match_proto_goTypes = []interface{}{
	(*LineupRequest)(nil),        // 0: LineupRequest
	(*LineupResponse)(nil),       // 1: LineupResponse
	(*Starting)(nil),             // 2: Starting
	(*Member)(nil),               // 3: Member
	(*Scale)(nil),                // 4: Scale
	(*InjuryArrest)(nil),         // 5: InjuryArrest
	(*Member3)(nil),              // 6: Member3
	(*LiveRequest)(nil),          // 7: LiveRequest
	(*LiveResponse)(nil),         // 8: LiveResponse
	(*LiveDetail)(nil),           // 9: LiveDetail
	(*LiveTabRequest)(nil),       // 10: LiveTabRequest
	(*LiveTabResponse)(nil),      // 11: LiveTabResponse
	(*LiveTab)(nil),              // 12: LiveTab
	(*StatisticsRequest)(nil),    // 13: StatisticsRequest
	(*StatisticsResponse)(nil),   // 14: StatisticsResponse
	(*StatisticsDetail)(nil),     // 15: StatisticsDetail
	(*StatisticsListDetail)(nil), // 16: statisticsListDetail
	(*Lately)(nil),               // 17: Lately
	(*Future)(nil),               // 18: Future
	(*FutureList)(nil),           // 19: futureList
}
var file_match_proto_depIdxs = []int32{
	2,  // 0: LineupResponse.StartingMain:type_name -> Starting
	2,  // 1: LineupResponse.StartingCust:type_name -> Starting
	2,  // 2: LineupResponse.ForecastMain:type_name -> Starting
	2,  // 3: LineupResponse.ForecastCust:type_name -> Starting
	4,  // 4: LineupResponse.ScaleList:type_name -> Scale
	2,  // 5: LineupResponse.ReserveLineupMain:type_name -> Starting
	2,  // 6: LineupResponse.ReserveLineupCust:type_name -> Starting
	5,  // 7: LineupResponse.InjuryArrestMain:type_name -> InjuryArrest
	5,  // 8: LineupResponse.InjuryArrestCust:type_name -> InjuryArrest
	3,  // 9: Starting.member:type_name -> Member
	6,  // 10: InjuryArrest.Member:type_name -> Member3
	9,  // 11: LiveResponse.data:type_name -> LiveDetail
	12, // 12: LiveTabResponse.List:type_name -> LiveTab
	15, // 13: StatisticsResponse.Historical:type_name -> StatisticsDetail
	17, // 14: StatisticsResponse.Lately:type_name -> Lately
	18, // 15: StatisticsResponse.Future:type_name -> Future
	16, // 16: StatisticsDetail.StatisticsList:type_name -> statisticsListDetail
	16, // 17: Lately.MainList:type_name -> statisticsListDetail
	16, // 18: Lately.CustList:type_name -> statisticsListDetail
	19, // 19: Future.MainList:type_name -> futureList
	19, // 20: Future.CustList:type_name -> futureList
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Starting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjuryArrest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveTabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveTabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsListDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lately); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
