// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: match_result.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//赛况
type MatchResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  int64  `protobuf:"varint,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`  //联赛id：46
	Language string `protobuf:"bytes,2,opt,name=Language,proto3" json:"Language,omitempty"` //请求语言  1:zh  2:en
}

func (x *MatchResultRequest) Reset() {
	*x = MatchResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultRequest) ProtoMessage() {}

func (x *MatchResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultRequest.ProtoReflect.Descriptor instead.
func (*MatchResultRequest) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{0}
}

func (x *MatchResultRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchResultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type MatchResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreStatistics *Score           `protobuf:"bytes,1,opt,name=ScoreStatistics,proto3" json:"ScoreStatistics,omitempty"`
	Optimum         *Optimum         `protobuf:"bytes,2,opt,name=optimum,proto3" json:"optimum,omitempty"`
	TeamStatistics  *TeamsStatistics `protobuf:"bytes,8,opt,name=teamStatistics,proto3" json:"teamStatistics,omitempty"`
	PlayerStats     *PlayerStats     `protobuf:"bytes,12,opt,name=PlayerStats,proto3" json:"PlayerStats,omitempty"`
}

func (x *MatchResultResponse) Reset() {
	*x = MatchResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultResponse) ProtoMessage() {}

func (x *MatchResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultResponse.ProtoReflect.Descriptor instead.
func (*MatchResultResponse) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{1}
}

func (x *MatchResultResponse) GetScoreStatistics() *Score {
	if x != nil {
		return x.ScoreStatistics
	}
	return nil
}

func (x *MatchResultResponse) GetOptimum() *Optimum {
	if x != nil {
		return x.Optimum
	}
	return nil
}

func (x *MatchResultResponse) GetTeamStatistics() *TeamsStatistics {
	if x != nil {
		return x.TeamStatistics
	}
	return nil
}

func (x *MatchResultResponse) GetPlayerStats() *PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

type Optimum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTeamName   string    `protobuf:"bytes,1,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`
	CustTeamName   string    `protobuf:"bytes,2,opt,name=CustTeamName,proto3" json:"CustTeamName,omitempty"`
	MainTeamImages string    `protobuf:"bytes,3,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"`
	CustTeamImages string    `protobuf:"bytes,4,opt,name=CustTeamImages,proto3" json:"CustTeamImages,omitempty"`
	List           []*Player `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Optimum) Reset() {
	*x = Optimum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optimum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optimum) ProtoMessage() {}

func (x *Optimum) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optimum.ProtoReflect.Descriptor instead.
func (*Optimum) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{2}
}

func (x *Optimum) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *Optimum) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *Optimum) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *Optimum) GetCustTeamImages() string {
	if x != nil {
		return x.CustTeamImages
	}
	return ""
}

func (x *Optimum) GetList() []*Player {
	if x != nil {
		return x.List
	}
	return nil
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            []string `protobuf:"bytes,1,rep,name=Tag,proto3" json:"Tag,omitempty"`
	MainScore      []int64  `protobuf:"varint,3,rep,packed,name=MainScore,proto3" json:"MainScore,omitempty"`
	AwayScore      []int64  `protobuf:"varint,4,rep,packed,name=AwayScore,proto3" json:"AwayScore,omitempty"`
	Difference     []int64  `protobuf:"varint,5,rep,packed,name=Difference,proto3" json:"Difference,omitempty"`
	MainFoul       int64    `protobuf:"varint,6,opt,name=MainFoul,proto3" json:"MainFoul,omitempty"`
	AwayFoul       int64    `protobuf:"varint,7,opt,name=AwayFoul,proto3" json:"AwayFoul,omitempty"`
	MainStop       int64    `protobuf:"varint,9,opt,name=MainStop,proto3" json:"MainStop,omitempty"`
	AwayStop       int64    `protobuf:"varint,2,opt,name=AwayStop,proto3" json:"AwayStop,omitempty"`
	MainTeamImages string   `protobuf:"bytes,15,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"`
	AwayTeamImages string   `protobuf:"bytes,16,opt,name=AwayTeamImages,proto3" json:"AwayTeamImages,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{3}
}

func (x *Score) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Score) GetMainScore() []int64 {
	if x != nil {
		return x.MainScore
	}
	return nil
}

func (x *Score) GetAwayScore() []int64 {
	if x != nil {
		return x.AwayScore
	}
	return nil
}

func (x *Score) GetDifference() []int64 {
	if x != nil {
		return x.Difference
	}
	return nil
}

func (x *Score) GetMainFoul() int64 {
	if x != nil {
		return x.MainFoul
	}
	return 0
}

func (x *Score) GetAwayFoul() int64 {
	if x != nil {
		return x.AwayFoul
	}
	return 0
}

func (x *Score) GetMainStop() int64 {
	if x != nil {
		return x.MainStop
	}
	return 0
}

func (x *Score) GetAwayStop() int64 {
	if x != nil {
		return x.AwayStop
	}
	return 0
}

func (x *Score) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *Score) GetAwayTeamImages() string {
	if x != nil {
		return x.AwayTeamImages
	}
	return ""
}

type TeamsStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTeamImages  string           `protobuf:"bytes,15,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"`
	AwayTeamImages  string           `protobuf:"bytes,16,opt,name=AwayTeamImages,proto3" json:"AwayTeamImages,omitempty"`
	Teamstatistices []*Teamstatistic `protobuf:"bytes,1,rep,name=teamstatistices,proto3" json:"teamstatistices,omitempty"`
}

func (x *TeamsStatistics) Reset() {
	*x = TeamsStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsStatistics) ProtoMessage() {}

func (x *TeamsStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsStatistics.ProtoReflect.Descriptor instead.
func (*TeamsStatistics) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{4}
}

func (x *TeamsStatistics) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *TeamsStatistics) GetAwayTeamImages() string {
	if x != nil {
		return x.AwayTeamImages
	}
	return ""
}

func (x *TeamsStatistics) GetTeamstatistices() []*Teamstatistic {
	if x != nil {
		return x.Teamstatistices
	}
	return nil
}

type PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTeamName   string        `protobuf:"bytes,1,opt,name=MainTeamName,proto3" json:"MainTeamName,omitempty"`
	AwayTeamName   string        `protobuf:"bytes,3,opt,name=AwayTeamName,proto3" json:"AwayTeamName,omitempty"`
	MainTeamImages string        `protobuf:"bytes,15,opt,name=MainTeamImages,proto3" json:"MainTeamImages,omitempty"`
	AwayTeamImages string        `protobuf:"bytes,16,opt,name=AwayTeamImages,proto3" json:"AwayTeamImages,omitempty"`
	MainList       []*PlayerList `protobuf:"bytes,2,rep,name=mainList,proto3" json:"mainList,omitempty"`
	AwayList       []*PlayerList `protobuf:"bytes,4,rep,name=awayList,proto3" json:"awayList,omitempty"`
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerStats) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *PlayerStats) GetAwayTeamName() string {
	if x != nil {
		return x.AwayTeamName
	}
	return ""
}

func (x *PlayerStats) GetMainTeamImages() string {
	if x != nil {
		return x.MainTeamImages
	}
	return ""
}

func (x *PlayerStats) GetAwayTeamImages() string {
	if x != nil {
		return x.AwayTeamImages
	}
	return ""
}

func (x *PlayerStats) GetMainList() []*PlayerList {
	if x != nil {
		return x.MainList
	}
	return nil
}

func (x *PlayerStats) GetAwayList() []*PlayerList {
	if x != nil {
		return x.AwayList
	}
	return nil
}

type PlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Started       string  `protobuf:"bytes,2,opt,name=Started,proto3" json:"Started,omitempty"`               //首发
	PlayName      string  `protobuf:"bytes,3,opt,name=PlayName,proto3" json:"PlayName,omitempty"`             //
	PlayTime      float32 `protobuf:"fixed32,45,opt,name=PlayTime,proto3" json:"PlayTime,omitempty"`          //上场时间
	Score         int64   `protobuf:"varint,4,opt,name=Score,proto3" json:"Score,omitempty"`                  //得分
	Rebounds      int64   `protobuf:"varint,5,opt,name=Rebounds,proto3" json:"Rebounds,omitempty"`            //篮板
	Assists       int64   `protobuf:"varint,6,opt,name=Assists,proto3" json:"Assists,omitempty"`              //助攻
	GoalsAll      int64   `protobuf:"varint,7,opt,name=GoalsAll,proto3" json:"GoalsAll,omitempty"`            //三分投篮
	GoalsHit      int64   `protobuf:"varint,15,opt,name=GoalsHit,proto3" json:"GoalsHit,omitempty"`           //三分命中
	FreeThrowsAll int64   `protobuf:"varint,8,opt,name=FreeThrowsAll,proto3" json:"FreeThrowsAll,omitempty"`  //罚球投篮
	FreeThrowsHit int64   `protobuf:"varint,16,opt,name=FreeThrowsHit,proto3" json:"FreeThrowsHit,omitempty"` //罚球命中
	Steals        int64   `protobuf:"varint,9,opt,name=Steals,proto3" json:"Steals,omitempty"`                //抢断
	Blocks        int64   `protobuf:"varint,10,opt,name=Blocks,proto3" json:"Blocks,omitempty"`               //盖帽
	Turnovers     int64   `protobuf:"varint,11,opt,name=Turnovers,proto3" json:"Turnovers,omitempty"`         //失误
	Fouls         int64   `protobuf:"varint,12,opt,name=Fouls,proto3" json:"Fouls,omitempty"`                 //犯规
}

func (x *PlayerList) Reset() {
	*x = PlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerList) ProtoMessage() {}

func (x *PlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerList.ProtoReflect.Descriptor instead.
func (*PlayerList) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerList) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

func (x *PlayerList) GetPlayName() string {
	if x != nil {
		return x.PlayName
	}
	return ""
}

func (x *PlayerList) GetPlayTime() float32 {
	if x != nil {
		return x.PlayTime
	}
	return 0
}

func (x *PlayerList) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerList) GetRebounds() int64 {
	if x != nil {
		return x.Rebounds
	}
	return 0
}

func (x *PlayerList) GetAssists() int64 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *PlayerList) GetGoalsAll() int64 {
	if x != nil {
		return x.GoalsAll
	}
	return 0
}

func (x *PlayerList) GetGoalsHit() int64 {
	if x != nil {
		return x.GoalsHit
	}
	return 0
}

func (x *PlayerList) GetFreeThrowsAll() int64 {
	if x != nil {
		return x.FreeThrowsAll
	}
	return 0
}

func (x *PlayerList) GetFreeThrowsHit() int64 {
	if x != nil {
		return x.FreeThrowsHit
	}
	return 0
}

func (x *PlayerList) GetSteals() int64 {
	if x != nil {
		return x.Steals
	}
	return 0
}

func (x *PlayerList) GetBlocks() int64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *PlayerList) GetTurnovers() int64 {
	if x != nil {
		return x.Turnovers
	}
	return 0
}

func (x *PlayerList) GetFouls() int64 {
	if x != nil {
		return x.Fouls
	}
	return 0
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainPlayers string `protobuf:"bytes,1,opt,name=MainPlayers,proto3" json:"MainPlayers,omitempty"`
	AwayPlayers string `protobuf:"bytes,2,opt,name=AwayPlayers,proto3" json:"AwayPlayers,omitempty"`
	MainScore   int64  `protobuf:"varint,3,opt,name=MainScore,proto3" json:"MainScore,omitempty"`
	AwayScore   int64  `protobuf:"varint,4,opt,name=AwayScore,proto3" json:"AwayScore,omitempty"`
	TagName     string `protobuf:"bytes,5,opt,name=TagName,proto3" json:"TagName,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{7}
}

func (x *Player) GetMainPlayers() string {
	if x != nil {
		return x.MainPlayers
	}
	return ""
}

func (x *Player) GetAwayPlayers() string {
	if x != nil {
		return x.AwayPlayers
	}
	return ""
}

func (x *Player) GetMainScore() int64 {
	if x != nil {
		return x.MainScore
	}
	return 0
}

func (x *Player) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *Player) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type Teamstatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainScore int64  `protobuf:"varint,3,opt,name=MainScore,proto3" json:"MainScore,omitempty"`
	AwayScore int64  `protobuf:"varint,4,opt,name=AwayScore,proto3" json:"AwayScore,omitempty"`
	TagName   string `protobuf:"bytes,5,opt,name=TagName,proto3" json:"TagName,omitempty"`
}

func (x *Teamstatistic) Reset() {
	*x = Teamstatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teamstatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teamstatistic) ProtoMessage() {}

func (x *Teamstatistic) ProtoReflect() protoreflect.Message {
	mi := &file_match_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teamstatistic.ProtoReflect.Descriptor instead.
func (*Teamstatistic) Descriptor() ([]byte, []int) {
	return file_match_result_proto_rawDescGZIP(), []int{8}
}

func (x *Teamstatistic) GetMainScore() int64 {
	if x != nil {
		return x.MainScore
	}
	return 0
}

func (x *Teamstatistic) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *Teamstatistic) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

var File_match_result_proto protoreflect.FileDescriptor

var file_match_result_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x38,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x41, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x75, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x75, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x77, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x41, 0x77, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x77, 0x61, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x77, 0x61, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x77, 0x61,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22,
	0xf7, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x77, 0x61, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x41,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x41,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x48, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x48, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x6c, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x77,
	0x73, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x54, 0x68, 0x72, 0x6f,
	0x77, 0x73, 0x48, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x48, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x65, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x75, 0x6c,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x46, 0x6f, 0x75, 0x6c, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x77, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x77, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x41, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_result_proto_rawDescOnce sync.Once
	file_match_result_proto_rawDescData = file_match_result_proto_rawDesc
)

func file_match_result_proto_rawDescGZIP() []byte {
	file_match_result_proto_rawDescOnce.Do(func() {
		file_match_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_result_proto_rawDescData)
	})
	return file_match_result_proto_rawDescData
}

var file_match_result_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_match_result_proto_goTypes = []interface{}{
	(*MatchResultRequest)(nil),  // 0: MatchResultRequest
	(*MatchResultResponse)(nil), // 1: MatchResultResponse
	(*Optimum)(nil),             // 2: optimum
	(*Score)(nil),               // 3: Score
	(*TeamsStatistics)(nil),     // 4: teamsStatistics
	(*PlayerStats)(nil),         // 5: PlayerStats
	(*PlayerList)(nil),          // 6: playerList
	(*Player)(nil),              // 7: player
	(*Teamstatistic)(nil),       // 8: teamstatistic
}
var file_match_result_proto_depIdxs = []int32{
	3, // 0: MatchResultResponse.ScoreStatistics:type_name -> Score
	2, // 1: MatchResultResponse.optimum:type_name -> optimum
	4, // 2: MatchResultResponse.teamStatistics:type_name -> teamsStatistics
	5, // 3: MatchResultResponse.PlayerStats:type_name -> PlayerStats
	7, // 4: optimum.list:type_name -> player
	8, // 5: teamsStatistics.teamstatistices:type_name -> teamstatistic
	6, // 6: PlayerStats.mainList:type_name -> playerList
	6, // 7: PlayerStats.awayList:type_name -> playerList
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_match_result_proto_init() }
func file_match_result_proto_init() {
	if File_match_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optimum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teamstatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_result_proto_goTypes,
		DependencyIndexes: file_match_result_proto_depIdxs,
		MessageInfos:      file_match_result_proto_msgTypes,
	}.Build()
	File_match_result_proto = out.File
	file_match_result_proto_rawDesc = nil
	file_match_result_proto_goTypes = nil
	file_match_result_proto_depIdxs = nil
}
