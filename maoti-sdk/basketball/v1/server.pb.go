// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//请求格式
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method   string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`     //请求的方法
	Params   []byte `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`     //请求的参数
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"` //请求语言  1:zh  2:en
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Request) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` //返回结果
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DataCenterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int64  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataCenterResponse) Reset() {
	*x = DataCenterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterResponse) ProtoMessage() {}

func (x *DataCenterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterResponse.ProtoReflect.Descriptor instead.
func (*DataCenterResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *DataCenterResponse) GetRet() int64 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *DataCenterResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6f, 0x64, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x12, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x9d, 0x0b, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x12,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x11, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x11, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x12, 0x0e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x62, 0x12, 0x0f, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x2e, 0x4f, 0x64, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_server_proto_goTypes = []interface{}{
	(*Request)(nil),                    // 0: Request
	(*Response)(nil),                   // 1: Response
	(*DataCenterResponse)(nil),         // 2: DataCenterResponse
	(*TeamStandRequest)(nil),           // 3: TeamStandRequest
	(*PlayerStandRequest)(nil),         // 4: PlayerStandRequest
	(*MatchInfoRequest)(nil),           // 5: MatchInfoRequest
	(*MatchListRequest)(nil),           // 6: MatchListRequest
	(*LineupRequest)(nil),              // 7: LineupRequest
	(*LiveRequest)(nil),                // 8: LiveRequest
	(*LiveTabRequest)(nil),             // 9: LiveTabRequest
	(*SeasonListRequest)(nil),          // 10: SeasonListRequest
	(*LeagueStandRequest)(nil),         // 11: LeagueStandRequest
	(*CountryRequest)(nil),             // 12: CountryRequest
	(*MatchResultRequest)(nil),         // 13: MatchResultRequest
	(*StandTagRequest)(nil),            // 14: StandTagRequest
	(*MatchDateRequest)(nil),           // 15: MatchDateRequest
	(*MatchRealTimeRequest)(nil),       // 16: MatchRealTimeRequest
	(*CheckExistenceRequest)(nil),      // 17: CheckExistenceRequest
	(*StatisticsRequest)(nil),          // 18: StatisticsRequest
	(*CheckExistenceDataRequest)(nil),  // 19: CheckExistenceDataRequest
	(*OddListRequest)(nil),             // 20: OddListRequest
	(*OddDetailRequest)(nil),           // 21: OddDetailRequest
	(*DataPromotionRequest)(nil),       // 22: DataPromotionRequest
	(*MatchFiltrateRequest)(nil),       // 23: MatchFiltrateRequest
	(*TypeStatusRequest)(nil),          // 24: TypeStatusRequest
	(*FiltrationRequest)(nil),          // 25: FiltrationRequest
	(*DataCenterCommentRequest)(nil),   // 26: DataCenterCommentRequest
	(*DataCenterLiveScoreRequest)(nil), // 27: DataCenterLiveScoreRequest
	(*MatchDetailAllRequest)(nil),      // 28: MatchDetailAllRequest
	(*FinishMatchRequest)(nil),         // 29: FinishMatchRequest
}
var file_server_proto_depIdxs = []int32{
	3,  // 0: BasketBall.GetTeamStand:input_type -> TeamStandRequest
	4,  // 1: BasketBall.GetPlayerStand:input_type -> PlayerStandRequest
	5,  // 2: BasketBall.MatchAgainstDetail:input_type -> MatchInfoRequest
	6,  // 3: BasketBall.GetMatchList:input_type -> MatchListRequest
	7,  // 4: BasketBall.GetMatchLineup:input_type -> LineupRequest
	8,  // 5: BasketBall.GetMatchComment:input_type -> LiveRequest
	9,  // 6: BasketBall.GetMatchCommentTab:input_type -> LiveTabRequest
	10, // 7: BasketBall.GetSeasonList:input_type -> SeasonListRequest
	11, // 8: BasketBall.GetLeagueStand:input_type -> LeagueStandRequest
	12, // 9: BasketBall.GetCountry:input_type -> CountryRequest
	13, // 10: BasketBall.GetMatchResult:input_type -> MatchResultRequest
	14, // 11: BasketBall.GetStandTag:input_type -> StandTagRequest
	15, // 12: BasketBall.GetMatchDate:input_type -> MatchDateRequest
	16, // 13: BasketBall.GetMatchRealTime:input_type -> MatchRealTimeRequest
	17, // 14: BasketBall.GetCheckExistence:input_type -> CheckExistenceRequest
	18, // 15: BasketBall.GetMatchDetail:input_type -> StatisticsRequest
	19, // 16: BasketBall.GetCheckExistenceData:input_type -> CheckExistenceDataRequest
	20, // 17: BasketBall.GetMatchOddList:input_type -> OddListRequest
	21, // 18: BasketBall.GetMatchOddListDetail:input_type -> OddDetailRequest
	22, // 19: BasketBall.GetDataPromotion:input_type -> DataPromotionRequest
	23, // 20: BasketBall.GetMatchFiltrate:input_type -> MatchFiltrateRequest
	24, // 21: BasketBall.GetTypeStatus:input_type -> TypeStatusRequest
	25, // 22: BasketBall.FiltrationId:input_type -> FiltrationRequest
	26, // 23: BasketBall.SendComment:input_type -> DataCenterCommentRequest
	27, // 24: BasketBall.SendLiveScore:input_type -> DataCenterLiveScoreRequest
	28, // 25: BasketBall.MatchDetailAll:input_type -> MatchDetailAllRequest
	29, // 26: BasketBall.MatchFinish:input_type -> FinishMatchRequest
	1,  // 27: BasketBall.GetTeamStand:output_type -> Response
	1,  // 28: BasketBall.GetPlayerStand:output_type -> Response
	1,  // 29: BasketBall.MatchAgainstDetail:output_type -> Response
	1,  // 30: BasketBall.GetMatchList:output_type -> Response
	1,  // 31: BasketBall.GetMatchLineup:output_type -> Response
	1,  // 32: BasketBall.GetMatchComment:output_type -> Response
	1,  // 33: BasketBall.GetMatchCommentTab:output_type -> Response
	1,  // 34: BasketBall.GetSeasonList:output_type -> Response
	1,  // 35: BasketBall.GetLeagueStand:output_type -> Response
	1,  // 36: BasketBall.GetCountry:output_type -> Response
	1,  // 37: BasketBall.GetMatchResult:output_type -> Response
	1,  // 38: BasketBall.GetStandTag:output_type -> Response
	1,  // 39: BasketBall.GetMatchDate:output_type -> Response
	1,  // 40: BasketBall.GetMatchRealTime:output_type -> Response
	1,  // 41: BasketBall.GetCheckExistence:output_type -> Response
	1,  // 42: BasketBall.GetMatchDetail:output_type -> Response
	1,  // 43: BasketBall.GetCheckExistenceData:output_type -> Response
	1,  // 44: BasketBall.GetMatchOddList:output_type -> Response
	1,  // 45: BasketBall.GetMatchOddListDetail:output_type -> Response
	1,  // 46: BasketBall.GetDataPromotion:output_type -> Response
	1,  // 47: BasketBall.GetMatchFiltrate:output_type -> Response
	1,  // 48: BasketBall.GetTypeStatus:output_type -> Response
	1,  // 49: BasketBall.FiltrationId:output_type -> Response
	2,  // 50: BasketBall.SendComment:output_type -> DataCenterResponse
	2,  // 51: BasketBall.SendLiveScore:output_type -> DataCenterResponse
	1,  // 52: BasketBall.MatchDetailAll:output_type -> Response
	1,  // 53: BasketBall.MatchFinish:output_type -> Response
	27, // [27:54] is the sub-list for method output_type
	0,  // [0:27] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	file_team_stand_proto_init()
	file_player_stand_proto_init()
	file_match_proto_init()
	file_season_list_proto_init()
	file_match_list_proto_init()
	file_match_request_proto_init()
	file_league_stand_proto_init()
	file_country_list_proto_init()
	file_match_result_proto_init()
	file_stand_tag_proto_init()
	file_match_date_proto_init()
	file_match_real_time_proto_init()
	file_check_existence_proto_init()
	file_check_existence_data_proto_init()
	file_odd_proto_init()
	file_data_promotion_proto_init()
	file_match_filtrate_proto_init()
	file_type_status_proto_init()
	file_data_center_proto_init()
	file_check_filtration_proto_init()
	file_match_details_all_proto_init()
	file_match_finish_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BasketBallClient is the client API for BasketBall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasketBallClient interface {
	//球队榜
	GetTeamStand(ctx context.Context, in *TeamStandRequest, opts ...grpc.CallOption) (*Response, error)
	//球员榜
	GetPlayerStand(ctx context.Context, in *PlayerStandRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛对阵详情
	MatchAgainstDetail(ctx context.Context, in *MatchInfoRequest, opts ...grpc.CallOption) (*Response, error)
	//赛程
	GetMatchList(ctx context.Context, in *MatchListRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛阵容
	GetMatchLineup(ctx context.Context, in *LineupRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛直播
	GetMatchComment(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛文字直播的tab
	GetMatchCommentTab(ctx context.Context, in *LiveTabRequest, opts ...grpc.CallOption) (*Response, error)
	//赛季列表
	GetSeasonList(ctx context.Context, in *SeasonListRequest, opts ...grpc.CallOption) (*Response, error)
	//积分榜
	GetLeagueStand(ctx context.Context, in *LeagueStandRequest, opts ...grpc.CallOption) (*Response, error)
	//联赛列表
	GetCountry(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*Response, error)
	//赛况
	GetMatchResult(ctx context.Context, in *MatchResultRequest, opts ...grpc.CallOption) (*Response, error)
	// 侧边栏标签
	GetStandTag(ctx context.Context, in *StandTagRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛日历
	GetMatchDate(ctx context.Context, in *MatchDateRequest, opts ...grpc.CallOption) (*Response, error)
	//实时比赛
	GetMatchRealTime(ctx context.Context, in *MatchRealTimeRequest, opts ...grpc.CallOption) (*Response, error)
	//检测接口
	GetCheckExistence(ctx context.Context, in *CheckExistenceRequest, opts ...grpc.CallOption) (*Response, error)
	//比赛详情-数据
	GetMatchDetail(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*Response, error)
	//检测接口返回数据
	GetCheckExistenceData(ctx context.Context, in *CheckExistenceDataRequest, opts ...grpc.CallOption) (*Response, error)
	//指数-列表
	GetMatchOddList(ctx context.Context, in *OddListRequest, opts ...grpc.CallOption) (*Response, error)
	//指数-公司指数明细
	GetMatchOddListDetail(ctx context.Context, in *OddDetailRequest, opts ...grpc.CallOption) (*Response, error)
	//晋级图
	GetDataPromotion(ctx context.Context, in *DataPromotionRequest, opts ...grpc.CallOption) (*Response, error)
	//筛选
	GetMatchFiltrate(ctx context.Context, in *MatchFiltrateRequest, opts ...grpc.CallOption) (*Response, error)
	//筛选
	GetTypeStatus(ctx context.Context, in *TypeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	//检测id接口
	FiltrationId(ctx context.Context, in *FiltrationRequest, opts ...grpc.CallOption) (*Response, error)
	//提供一个接口供数据中心调用
	//发送直播数据
	SendComment(ctx context.Context, in *DataCenterCommentRequest, opts ...grpc.CallOption) (*DataCenterResponse, error)
	//发送即时比分数据
	SendLiveScore(ctx context.Context, in *DataCenterLiveScoreRequest, opts ...grpc.CallOption) (*DataCenterResponse, error)
	//比赛详情
	MatchDetailAll(ctx context.Context, in *MatchDetailAllRequest, opts ...grpc.CallOption) (*Response, error)
	//获取已经完成的比赛
	MatchFinish(ctx context.Context, in *FinishMatchRequest, opts ...grpc.CallOption) (*Response, error)
}

type basketBallClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketBallClient(cc grpc.ClientConnInterface) BasketBallClient {
	return &basketBallClient{cc}
}

func (c *basketBallClient) GetTeamStand(ctx context.Context, in *TeamStandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetTeamStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetPlayerStand(ctx context.Context, in *PlayerStandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetPlayerStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) MatchAgainstDetail(ctx context.Context, in *MatchInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/MatchAgainstDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchList(ctx context.Context, in *MatchListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchLineup(ctx context.Context, in *LineupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchComment(ctx context.Context, in *LiveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchCommentTab(ctx context.Context, in *LiveTabRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchCommentTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetSeasonList(ctx context.Context, in *SeasonListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetSeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetLeagueStand(ctx context.Context, in *LeagueStandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetLeagueStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetCountry(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchResult(ctx context.Context, in *MatchResultRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetStandTag(ctx context.Context, in *StandTagRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetStandTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchDate(ctx context.Context, in *MatchDateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchRealTime(ctx context.Context, in *MatchRealTimeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchRealTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetCheckExistence(ctx context.Context, in *CheckExistenceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetCheckExistence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchDetail(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetCheckExistenceData(ctx context.Context, in *CheckExistenceDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetCheckExistenceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchOddList(ctx context.Context, in *OddListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchOddList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchOddListDetail(ctx context.Context, in *OddDetailRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchOddListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetDataPromotion(ctx context.Context, in *DataPromotionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetDataPromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetMatchFiltrate(ctx context.Context, in *MatchFiltrateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetMatchFiltrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) GetTypeStatus(ctx context.Context, in *TypeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/GetTypeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) FiltrationId(ctx context.Context, in *FiltrationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/FiltrationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) SendComment(ctx context.Context, in *DataCenterCommentRequest, opts ...grpc.CallOption) (*DataCenterResponse, error) {
	out := new(DataCenterResponse)
	err := c.cc.Invoke(ctx, "/BasketBall/SendComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) SendLiveScore(ctx context.Context, in *DataCenterLiveScoreRequest, opts ...grpc.CallOption) (*DataCenterResponse, error) {
	out := new(DataCenterResponse)
	err := c.cc.Invoke(ctx, "/BasketBall/SendLiveScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) MatchDetailAll(ctx context.Context, in *MatchDetailAllRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/MatchDetailAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketBallClient) MatchFinish(ctx context.Context, in *FinishMatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BasketBall/MatchFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketBallServer is the server API for BasketBall service.
type BasketBallServer interface {
	//球队榜
	GetTeamStand(context.Context, *TeamStandRequest) (*Response, error)
	//球员榜
	GetPlayerStand(context.Context, *PlayerStandRequest) (*Response, error)
	//比赛对阵详情
	MatchAgainstDetail(context.Context, *MatchInfoRequest) (*Response, error)
	//赛程
	GetMatchList(context.Context, *MatchListRequest) (*Response, error)
	//比赛阵容
	GetMatchLineup(context.Context, *LineupRequest) (*Response, error)
	//比赛直播
	GetMatchComment(context.Context, *LiveRequest) (*Response, error)
	//比赛文字直播的tab
	GetMatchCommentTab(context.Context, *LiveTabRequest) (*Response, error)
	//赛季列表
	GetSeasonList(context.Context, *SeasonListRequest) (*Response, error)
	//积分榜
	GetLeagueStand(context.Context, *LeagueStandRequest) (*Response, error)
	//联赛列表
	GetCountry(context.Context, *CountryRequest) (*Response, error)
	//赛况
	GetMatchResult(context.Context, *MatchResultRequest) (*Response, error)
	// 侧边栏标签
	GetStandTag(context.Context, *StandTagRequest) (*Response, error)
	//比赛日历
	GetMatchDate(context.Context, *MatchDateRequest) (*Response, error)
	//实时比赛
	GetMatchRealTime(context.Context, *MatchRealTimeRequest) (*Response, error)
	//检测接口
	GetCheckExistence(context.Context, *CheckExistenceRequest) (*Response, error)
	//比赛详情-数据
	GetMatchDetail(context.Context, *StatisticsRequest) (*Response, error)
	//检测接口返回数据
	GetCheckExistenceData(context.Context, *CheckExistenceDataRequest) (*Response, error)
	//指数-列表
	GetMatchOddList(context.Context, *OddListRequest) (*Response, error)
	//指数-公司指数明细
	GetMatchOddListDetail(context.Context, *OddDetailRequest) (*Response, error)
	//晋级图
	GetDataPromotion(context.Context, *DataPromotionRequest) (*Response, error)
	//筛选
	GetMatchFiltrate(context.Context, *MatchFiltrateRequest) (*Response, error)
	//筛选
	GetTypeStatus(context.Context, *TypeStatusRequest) (*Response, error)
	//检测id接口
	FiltrationId(context.Context, *FiltrationRequest) (*Response, error)
	//提供一个接口供数据中心调用
	//发送直播数据
	SendComment(context.Context, *DataCenterCommentRequest) (*DataCenterResponse, error)
	//发送即时比分数据
	SendLiveScore(context.Context, *DataCenterLiveScoreRequest) (*DataCenterResponse, error)
	//比赛详情
	MatchDetailAll(context.Context, *MatchDetailAllRequest) (*Response, error)
	//获取已经完成的比赛
	MatchFinish(context.Context, *FinishMatchRequest) (*Response, error)
}

// UnimplementedBasketBallServer can be embedded to have forward compatible implementations.
type UnimplementedBasketBallServer struct {
}

func (*UnimplementedBasketBallServer) GetTeamStand(context.Context, *TeamStandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamStand not implemented")
}
func (*UnimplementedBasketBallServer) GetPlayerStand(context.Context, *PlayerStandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStand not implemented")
}
func (*UnimplementedBasketBallServer) MatchAgainstDetail(context.Context, *MatchInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchAgainstDetail not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchList(context.Context, *MatchListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchList not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchLineup(context.Context, *LineupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchLineup not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchComment(context.Context, *LiveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchComment not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchCommentTab(context.Context, *LiveTabRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchCommentTab not implemented")
}
func (*UnimplementedBasketBallServer) GetSeasonList(context.Context, *SeasonListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonList not implemented")
}
func (*UnimplementedBasketBallServer) GetLeagueStand(context.Context, *LeagueStandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagueStand not implemented")
}
func (*UnimplementedBasketBallServer) GetCountry(context.Context, *CountryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchResult(context.Context, *MatchResultRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchResult not implemented")
}
func (*UnimplementedBasketBallServer) GetStandTag(context.Context, *StandTagRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandTag not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchDate(context.Context, *MatchDateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchDate not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchRealTime(context.Context, *MatchRealTimeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchRealTime not implemented")
}
func (*UnimplementedBasketBallServer) GetCheckExistence(context.Context, *CheckExistenceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckExistence not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchDetail(context.Context, *StatisticsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchDetail not implemented")
}
func (*UnimplementedBasketBallServer) GetCheckExistenceData(context.Context, *CheckExistenceDataRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckExistenceData not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchOddList(context.Context, *OddListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddList not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchOddListDetail(context.Context, *OddDetailRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddListDetail not implemented")
}
func (*UnimplementedBasketBallServer) GetDataPromotion(context.Context, *DataPromotionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPromotion not implemented")
}
func (*UnimplementedBasketBallServer) GetMatchFiltrate(context.Context, *MatchFiltrateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchFiltrate not implemented")
}
func (*UnimplementedBasketBallServer) GetTypeStatus(context.Context, *TypeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeStatus not implemented")
}
func (*UnimplementedBasketBallServer) FiltrationId(context.Context, *FiltrationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FiltrationId not implemented")
}
func (*UnimplementedBasketBallServer) SendComment(context.Context, *DataCenterCommentRequest) (*DataCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComment not implemented")
}
func (*UnimplementedBasketBallServer) SendLiveScore(context.Context, *DataCenterLiveScoreRequest) (*DataCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLiveScore not implemented")
}
func (*UnimplementedBasketBallServer) MatchDetailAll(context.Context, *MatchDetailAllRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchDetailAll not implemented")
}
func (*UnimplementedBasketBallServer) MatchFinish(context.Context, *FinishMatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchFinish not implemented")
}

func RegisterBasketBallServer(s *grpc.Server, srv BasketBallServer) {
	s.RegisterService(&_BasketBall_serviceDesc, srv)
}

func _BasketBall_GetTeamStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetTeamStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetTeamStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetTeamStand(ctx, req.(*TeamStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetPlayerStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetPlayerStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetPlayerStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetPlayerStand(ctx, req.(*PlayerStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_MatchAgainstDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).MatchAgainstDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/MatchAgainstDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).MatchAgainstDetail(ctx, req.(*MatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchList(ctx, req.(*MatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchLineup(ctx, req.(*LineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchComment(ctx, req.(*LiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchCommentTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchCommentTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchCommentTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchCommentTab(ctx, req.(*LiveTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetSeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetSeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetSeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetSeasonList(ctx, req.(*SeasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetLeagueStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeagueStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetLeagueStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetLeagueStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetLeagueStand(ctx, req.(*LeagueStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetCountry(ctx, req.(*CountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchResult(ctx, req.(*MatchResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetStandTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetStandTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetStandTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetStandTag(ctx, req.(*StandTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchDate(ctx, req.(*MatchDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchRealTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRealTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchRealTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchRealTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchRealTime(ctx, req.(*MatchRealTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetCheckExistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetCheckExistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetCheckExistence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetCheckExistence(ctx, req.(*CheckExistenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchDetail(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetCheckExistenceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistenceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetCheckExistenceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetCheckExistenceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetCheckExistenceData(ctx, req.(*CheckExistenceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchOddList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OddListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchOddList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchOddList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchOddList(ctx, req.(*OddListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchOddListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OddDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchOddListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchOddListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchOddListDetail(ctx, req.(*OddDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetDataPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetDataPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetDataPromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetDataPromotion(ctx, req.(*DataPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetMatchFiltrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchFiltrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetMatchFiltrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetMatchFiltrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetMatchFiltrate(ctx, req.(*MatchFiltrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_GetTypeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).GetTypeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/GetTypeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).GetTypeStatus(ctx, req.(*TypeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_FiltrationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiltrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).FiltrationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/FiltrationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).FiltrationId(ctx, req.(*FiltrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_SendComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCenterCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).SendComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/SendComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).SendComment(ctx, req.(*DataCenterCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_SendLiveScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCenterLiveScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).SendLiveScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/SendLiveScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).SendLiveScore(ctx, req.(*DataCenterLiveScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_MatchDetailAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDetailAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).MatchDetailAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/MatchDetailAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).MatchDetailAll(ctx, req.(*MatchDetailAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketBall_MatchFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketBallServer).MatchFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BasketBall/MatchFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketBallServer).MatchFinish(ctx, req.(*FinishMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BasketBall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BasketBall",
	HandlerType: (*BasketBallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamStand",
			Handler:    _BasketBall_GetTeamStand_Handler,
		},
		{
			MethodName: "GetPlayerStand",
			Handler:    _BasketBall_GetPlayerStand_Handler,
		},
		{
			MethodName: "MatchAgainstDetail",
			Handler:    _BasketBall_MatchAgainstDetail_Handler,
		},
		{
			MethodName: "GetMatchList",
			Handler:    _BasketBall_GetMatchList_Handler,
		},
		{
			MethodName: "GetMatchLineup",
			Handler:    _BasketBall_GetMatchLineup_Handler,
		},
		{
			MethodName: "GetMatchComment",
			Handler:    _BasketBall_GetMatchComment_Handler,
		},
		{
			MethodName: "GetMatchCommentTab",
			Handler:    _BasketBall_GetMatchCommentTab_Handler,
		},
		{
			MethodName: "GetSeasonList",
			Handler:    _BasketBall_GetSeasonList_Handler,
		},
		{
			MethodName: "GetLeagueStand",
			Handler:    _BasketBall_GetLeagueStand_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _BasketBall_GetCountry_Handler,
		},
		{
			MethodName: "GetMatchResult",
			Handler:    _BasketBall_GetMatchResult_Handler,
		},
		{
			MethodName: "GetStandTag",
			Handler:    _BasketBall_GetStandTag_Handler,
		},
		{
			MethodName: "GetMatchDate",
			Handler:    _BasketBall_GetMatchDate_Handler,
		},
		{
			MethodName: "GetMatchRealTime",
			Handler:    _BasketBall_GetMatchRealTime_Handler,
		},
		{
			MethodName: "GetCheckExistence",
			Handler:    _BasketBall_GetCheckExistence_Handler,
		},
		{
			MethodName: "GetMatchDetail",
			Handler:    _BasketBall_GetMatchDetail_Handler,
		},
		{
			MethodName: "GetCheckExistenceData",
			Handler:    _BasketBall_GetCheckExistenceData_Handler,
		},
		{
			MethodName: "GetMatchOddList",
			Handler:    _BasketBall_GetMatchOddList_Handler,
		},
		{
			MethodName: "GetMatchOddListDetail",
			Handler:    _BasketBall_GetMatchOddListDetail_Handler,
		},
		{
			MethodName: "GetDataPromotion",
			Handler:    _BasketBall_GetDataPromotion_Handler,
		},
		{
			MethodName: "GetMatchFiltrate",
			Handler:    _BasketBall_GetMatchFiltrate_Handler,
		},
		{
			MethodName: "GetTypeStatus",
			Handler:    _BasketBall_GetTypeStatus_Handler,
		},
		{
			MethodName: "FiltrationId",
			Handler:    _BasketBall_FiltrationId_Handler,
		},
		{
			MethodName: "SendComment",
			Handler:    _BasketBall_SendComment_Handler,
		},
		{
			MethodName: "SendLiveScore",
			Handler:    _BasketBall_SendLiveScore_Handler,
		},
		{
			MethodName: "MatchDetailAll",
			Handler:    _BasketBall_MatchDetailAll_Handler,
		},
		{
			MethodName: "MatchFinish",
			Handler:    _BasketBall_MatchFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
