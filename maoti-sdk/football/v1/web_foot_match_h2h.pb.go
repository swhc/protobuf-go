// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: web_foot_match_h2h.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//web即时比赛列表 - 比赛详情 - H2H主客队伍交手记录
type WebFootMatchTeamHandsOnRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`  //请求语言
	MatchId  int64  `protobuf:"varint,2,opt,name=matchId,proto3" json:"matchId,omitempty"`   //比赛ID
	TimeZone int64  `protobuf:"varint,3,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"` //时区
}

func (x *WebFootMatchTeamHandsOnRecordRequest) Reset() {
	*x = WebFootMatchTeamHandsOnRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamHandsOnRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamHandsOnRecordRequest) ProtoMessage() {}

func (x *WebFootMatchTeamHandsOnRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamHandsOnRecordRequest.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamHandsOnRecordRequest) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{0}
}

func (x *WebFootMatchTeamHandsOnRecordRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebFootMatchTeamHandsOnRecordRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type WebFootMatchTeamHandsOnRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WebFootMatchTeamHandsOnRecordInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WebFootMatchTeamHandsOnRecordResponse) Reset() {
	*x = WebFootMatchTeamHandsOnRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamHandsOnRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamHandsOnRecordResponse) ProtoMessage() {}

func (x *WebFootMatchTeamHandsOnRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamHandsOnRecordResponse.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamHandsOnRecordResponse) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{1}
}

func (x *WebFootMatchTeamHandsOnRecordResponse) GetList() []*WebFootMatchTeamHandsOnRecordInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type WebFootMatchTeamHandsOnRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       int64  `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`              //比赛ID
	MatchTime     int64  `protobuf:"varint,2,opt,name=matchTime,proto3" json:"matchTime,omitempty"`          //比赛时间
	LeagueId      int64  `protobuf:"varint,3,opt,name=LeagueId,proto3" json:"LeagueId,omitempty"`            //联赛ID
	LeagueName    string `protobuf:"bytes,5,opt,name=LeagueName,proto3" json:"LeagueName,omitempty"`         //联赛名称
	HomeId        int64  `protobuf:"varint,6,opt,name=homeId,proto3" json:"homeId,omitempty"`                //主队ID
	Home          string `protobuf:"bytes,8,opt,name=home,proto3" json:"home,omitempty"`                     //主队名称
	HomeScore     int64  `protobuf:"varint,9,opt,name=homeScore,proto3" json:"homeScore,omitempty"`          //主队得分
	HomeHalfScore int64  `protobuf:"varint,10,opt,name=homeHalfScore,proto3" json:"homeHalfScore,omitempty"` //主队半场得分
	AwayId        int64  `protobuf:"varint,11,opt,name=awayId,proto3" json:"awayId,omitempty"`               //客队ID
	Away          string `protobuf:"bytes,13,opt,name=away,proto3" json:"away,omitempty"`                    //客队名称
	AwayScore     int64  `protobuf:"varint,14,opt,name=awayScore,proto3" json:"awayScore,omitempty"`         //客队得分
	AwayHalfScore int64  `protobuf:"varint,15,opt,name=awayHalfScore,proto3" json:"awayHalfScore,omitempty"` //客队半场得分
	Result        int64  `protobuf:"varint,16,opt,name=result,proto3" json:"result,omitempty"`               //胜平负
	SameLeague    bool   `protobuf:"varint,17,opt,name=sameLeague,proto3" json:"sameLeague,omitempty"`       //相同联赛
	SameHome      bool   `protobuf:"varint,18,opt,name=sameHome,proto3" json:"sameHome,omitempty"`           //相同主队
}

func (x *WebFootMatchTeamHandsOnRecordInfo) Reset() {
	*x = WebFootMatchTeamHandsOnRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamHandsOnRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamHandsOnRecordInfo) ProtoMessage() {}

func (x *WebFootMatchTeamHandsOnRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamHandsOnRecordInfo.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamHandsOnRecordInfo) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{2}
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetHomeScore() int64 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetHomeHalfScore() int64 {
	if x != nil {
		return x.HomeHalfScore
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetAwayId() int64 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetAway() string {
	if x != nil {
		return x.Away
	}
	return ""
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetAwayHalfScore() int64 {
	if x != nil {
		return x.AwayHalfScore
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetSameLeague() bool {
	if x != nil {
		return x.SameLeague
	}
	return false
}

func (x *WebFootMatchTeamHandsOnRecordInfo) GetSameHome() bool {
	if x != nil {
		return x.SameHome
	}
	return false
}

//web即时比赛列表 - 比赛详情 - H2H主客队伍近期战绩
type WebFootMatchTeamRecentRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`  //请求语言
	MatchId  int64  `protobuf:"varint,2,opt,name=matchId,proto3" json:"matchId,omitempty"`   //比赛ID
	TimeZone int64  `protobuf:"varint,3,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"` //时区
}

func (x *WebFootMatchTeamRecentRecordRequest) Reset() {
	*x = WebFootMatchTeamRecentRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamRecentRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamRecentRecordRequest) ProtoMessage() {}

func (x *WebFootMatchTeamRecentRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamRecentRecordRequest.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamRecentRecordRequest) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{3}
}

func (x *WebFootMatchTeamRecentRecordRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebFootMatchTeamRecentRecordRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type WebMatchTeamRecentRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeId   int64                               `protobuf:"varint,1,opt,name=homeId,proto3" json:"homeId,omitempty"` //主队ID
	Home     string                              `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`      //主队名称
	AwayId   int64                               `protobuf:"varint,4,opt,name=awayId,proto3" json:"awayId,omitempty"` //客队ID
	Away     string                              `protobuf:"bytes,5,opt,name=away,proto3" json:"away,omitempty"`      //客队名称
	HomeList []*WebFootMatchTeamRecentRecordInfo `protobuf:"bytes,7,rep,name=homeList,proto3" json:"homeList,omitempty"`
	AwayList []*WebFootMatchTeamRecentRecordInfo `protobuf:"bytes,8,rep,name=awayList,proto3" json:"awayList,omitempty"`
}

func (x *WebMatchTeamRecentRecordResponse) Reset() {
	*x = WebMatchTeamRecentRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebMatchTeamRecentRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebMatchTeamRecentRecordResponse) ProtoMessage() {}

func (x *WebMatchTeamRecentRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebMatchTeamRecentRecordResponse.ProtoReflect.Descriptor instead.
func (*WebMatchTeamRecentRecordResponse) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{4}
}

func (x *WebMatchTeamRecentRecordResponse) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *WebMatchTeamRecentRecordResponse) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *WebMatchTeamRecentRecordResponse) GetAwayId() int64 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *WebMatchTeamRecentRecordResponse) GetAway() string {
	if x != nil {
		return x.Away
	}
	return ""
}

func (x *WebMatchTeamRecentRecordResponse) GetHomeList() []*WebFootMatchTeamRecentRecordInfo {
	if x != nil {
		return x.HomeList
	}
	return nil
}

func (x *WebMatchTeamRecentRecordResponse) GetAwayList() []*WebFootMatchTeamRecentRecordInfo {
	if x != nil {
		return x.AwayList
	}
	return nil
}

type WebFootMatchTeamRecentRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       int64  `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`              //比赛ID
	MatchTime     int64  `protobuf:"varint,2,opt,name=matchTime,proto3" json:"matchTime,omitempty"`          //比赛时间
	LeagueId      int64  `protobuf:"varint,3,opt,name=LeagueId,proto3" json:"LeagueId,omitempty"`            //联赛ID
	LeagueName    string `protobuf:"bytes,5,opt,name=LeagueName,proto3" json:"LeagueName,omitempty"`         //联赛名称
	HomeId        int64  `protobuf:"varint,6,opt,name=homeId,proto3" json:"homeId,omitempty"`                //主队ID
	Home          string `protobuf:"bytes,8,opt,name=home,proto3" json:"home,omitempty"`                     //主队名称
	HomeScore     int64  `protobuf:"varint,9,opt,name=homeScore,proto3" json:"homeScore,omitempty"`          //主队得分
	HomeHalfScore int64  `protobuf:"varint,10,opt,name=homeHalfScore,proto3" json:"homeHalfScore,omitempty"` //主队半场得分
	AwayId        int64  `protobuf:"varint,11,opt,name=awayId,proto3" json:"awayId,omitempty"`               //客队ID
	Away          string `protobuf:"bytes,13,opt,name=away,proto3" json:"away,omitempty"`                    //客队名称
	AwayScore     int64  `protobuf:"varint,14,opt,name=awayScore,proto3" json:"awayScore,omitempty"`         //客队得分
	AwayHalfScore int64  `protobuf:"varint,15,opt,name=awayHalfScore,proto3" json:"awayHalfScore,omitempty"` //客队半场得分
	Result        int64  `protobuf:"varint,16,opt,name=result,proto3" json:"result,omitempty"`               //胜平负
	SameLeague    bool   `protobuf:"varint,17,opt,name=sameLeague,proto3" json:"sameLeague,omitempty"`       //相同联赛
	SameHome      bool   `protobuf:"varint,18,opt,name=sameHome,proto3" json:"sameHome,omitempty"`           //相同主队，供主队近期战绩时使用
	SameAway      bool   `protobuf:"varint,19,opt,name=sameAway,proto3" json:"sameAway,omitempty"`           //相同客队，供客队近期战绩时使用
}

func (x *WebFootMatchTeamRecentRecordInfo) Reset() {
	*x = WebFootMatchTeamRecentRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamRecentRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamRecentRecordInfo) ProtoMessage() {}

func (x *WebFootMatchTeamRecentRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamRecentRecordInfo.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamRecentRecordInfo) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{5}
}

func (x *WebFootMatchTeamRecentRecordInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *WebFootMatchTeamRecentRecordInfo) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *WebFootMatchTeamRecentRecordInfo) GetHomeScore() int64 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetHomeHalfScore() int64 {
	if x != nil {
		return x.HomeHalfScore
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetAwayId() int64 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetAway() string {
	if x != nil {
		return x.Away
	}
	return ""
}

func (x *WebFootMatchTeamRecentRecordInfo) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetAwayHalfScore() int64 {
	if x != nil {
		return x.AwayHalfScore
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *WebFootMatchTeamRecentRecordInfo) GetSameLeague() bool {
	if x != nil {
		return x.SameLeague
	}
	return false
}

func (x *WebFootMatchTeamRecentRecordInfo) GetSameHome() bool {
	if x != nil {
		return x.SameHome
	}
	return false
}

func (x *WebFootMatchTeamRecentRecordInfo) GetSameAway() bool {
	if x != nil {
		return x.SameAway
	}
	return false
}

//web即时比赛列表 - 比赛详情 - H2H主客队伍未来赛程
type WebFootMatchTeamFutureScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`  //请求语言
	MatchId  int64  `protobuf:"varint,2,opt,name=matchId,proto3" json:"matchId,omitempty"`   //比赛ID
	TimeZone int64  `protobuf:"varint,3,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"` //时区
}

func (x *WebFootMatchTeamFutureScheduleRequest) Reset() {
	*x = WebFootMatchTeamFutureScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchTeamFutureScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchTeamFutureScheduleRequest) ProtoMessage() {}

func (x *WebFootMatchTeamFutureScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchTeamFutureScheduleRequest.ProtoReflect.Descriptor instead.
func (*WebFootMatchTeamFutureScheduleRequest) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{6}
}

func (x *WebFootMatchTeamFutureScheduleRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebFootMatchTeamFutureScheduleRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebFootMatchTeamFutureScheduleRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type WebMatchMatchTeamFutureScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home []*WebMatchMatchTeamFutureScheduleInfo `protobuf:"bytes,1,rep,name=home,proto3" json:"home,omitempty"`
	Away []*WebMatchMatchTeamFutureScheduleInfo `protobuf:"bytes,2,rep,name=away,proto3" json:"away,omitempty"`
}

func (x *WebMatchMatchTeamFutureScheduleResponse) Reset() {
	*x = WebMatchMatchTeamFutureScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebMatchMatchTeamFutureScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebMatchMatchTeamFutureScheduleResponse) ProtoMessage() {}

func (x *WebMatchMatchTeamFutureScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebMatchMatchTeamFutureScheduleResponse.ProtoReflect.Descriptor instead.
func (*WebMatchMatchTeamFutureScheduleResponse) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{7}
}

func (x *WebMatchMatchTeamFutureScheduleResponse) GetHome() []*WebMatchMatchTeamFutureScheduleInfo {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *WebMatchMatchTeamFutureScheduleResponse) GetAway() []*WebMatchMatchTeamFutureScheduleInfo {
	if x != nil {
		return x.Away
	}
	return nil
}

type WebMatchMatchTeamFutureScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    int64  `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`      //比赛ID
	MatchTime  int64  `protobuf:"varint,2,opt,name=matchTime,proto3" json:"matchTime,omitempty"`  //比赛时间
	LeagueId   int64  `protobuf:"varint,3,opt,name=LeagueId,proto3" json:"LeagueId,omitempty"`    //联赛ID
	LeagueName string `protobuf:"bytes,5,opt,name=LeagueName,proto3" json:"LeagueName,omitempty"` //联赛名称
	HomeId     int64  `protobuf:"varint,6,opt,name=homeId,proto3" json:"homeId,omitempty"`        //主队ID
	Home       string `protobuf:"bytes,7,opt,name=home,proto3" json:"home,omitempty"`             //主队名称
	AwayId     int64  `protobuf:"varint,9,opt,name=awayId,proto3" json:"awayId,omitempty"`        //客队ID
	Away       string `protobuf:"bytes,10,opt,name=away,proto3" json:"away,omitempty"`            //客队名称
	Spacing    int64  `protobuf:"varint,12,opt,name=spacing,proto3" json:"spacing,omitempty"`     //间隔天数
}

func (x *WebMatchMatchTeamFutureScheduleInfo) Reset() {
	*x = WebMatchMatchTeamFutureScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_match_h2h_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebMatchMatchTeamFutureScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebMatchMatchTeamFutureScheduleInfo) ProtoMessage() {}

func (x *WebMatchMatchTeamFutureScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_match_h2h_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebMatchMatchTeamFutureScheduleInfo.ProtoReflect.Descriptor instead.
func (*WebMatchMatchTeamFutureScheduleInfo) Descriptor() ([]byte, []int) {
	return file_web_foot_match_h2h_proto_rawDescGZIP(), []int{8}
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetAwayId() int64 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetAway() string {
	if x != nil {
		return x.Away
	}
	return ""
}

func (x *WebMatchMatchTeamFutureScheduleInfo) GetSpacing() int64 {
	if x != nil {
		return x.Spacing
	}
	return 0
}

var File_web_foot_match_h2h_proto protoreflect.FileDescriptor

var file_web_foot_match_h2h_proto_rawDesc = []byte{
	0x0a, 0x18, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x68, 0x32, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x24, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x5f, 0x0a, 0x25, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x21, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6d,
	0x65, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61,
	0x79, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x65, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x23, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x20, 0x57, 0x65, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x57, 0x65, 0x62,
	0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61,
	0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x03, 0x0a, 0x20, 0x57, 0x65, 0x62, 0x46,
	0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f,
	0x6d, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77,
	0x61, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x65,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x65,
	0x48, 0x6f, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65,
	0x48, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x22, 0x79, 0x0a, 0x25, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x27,
	0x57, 0x65, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x22, 0x8b, 0x02, 0x0a, 0x23,
	0x57, 0x65, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_foot_match_h2h_proto_rawDescOnce sync.Once
	file_web_foot_match_h2h_proto_rawDescData = file_web_foot_match_h2h_proto_rawDesc
)

func file_web_foot_match_h2h_proto_rawDescGZIP() []byte {
	file_web_foot_match_h2h_proto_rawDescOnce.Do(func() {
		file_web_foot_match_h2h_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_foot_match_h2h_proto_rawDescData)
	})
	return file_web_foot_match_h2h_proto_rawDescData
}

var file_web_foot_match_h2h_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_web_foot_match_h2h_proto_goTypes = []interface{}{
	(*WebFootMatchTeamHandsOnRecordRequest)(nil),    // 0: WebFootMatchTeamHandsOnRecordRequest
	(*WebFootMatchTeamHandsOnRecordResponse)(nil),   // 1: WebFootMatchTeamHandsOnRecordResponse
	(*WebFootMatchTeamHandsOnRecordInfo)(nil),       // 2: WebFootMatchTeamHandsOnRecordInfo
	(*WebFootMatchTeamRecentRecordRequest)(nil),     // 3: WebFootMatchTeamRecentRecordRequest
	(*WebMatchTeamRecentRecordResponse)(nil),        // 4: WebMatchTeamRecentRecordResponse
	(*WebFootMatchTeamRecentRecordInfo)(nil),        // 5: WebFootMatchTeamRecentRecordInfo
	(*WebFootMatchTeamFutureScheduleRequest)(nil),   // 6: WebFootMatchTeamFutureScheduleRequest
	(*WebMatchMatchTeamFutureScheduleResponse)(nil), // 7: WebMatchMatchTeamFutureScheduleResponse
	(*WebMatchMatchTeamFutureScheduleInfo)(nil),     // 8: WebMatchMatchTeamFutureScheduleInfo
}
var file_web_foot_match_h2h_proto_depIdxs = []int32{
	2, // 0: WebFootMatchTeamHandsOnRecordResponse.list:type_name -> WebFootMatchTeamHandsOnRecordInfo
	5, // 1: WebMatchTeamRecentRecordResponse.homeList:type_name -> WebFootMatchTeamRecentRecordInfo
	5, // 2: WebMatchTeamRecentRecordResponse.awayList:type_name -> WebFootMatchTeamRecentRecordInfo
	8, // 3: WebMatchMatchTeamFutureScheduleResponse.home:type_name -> WebMatchMatchTeamFutureScheduleInfo
	8, // 4: WebMatchMatchTeamFutureScheduleResponse.away:type_name -> WebMatchMatchTeamFutureScheduleInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_web_foot_match_h2h_proto_init() }
func file_web_foot_match_h2h_proto_init() {
	if File_web_foot_match_h2h_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web_foot_match_h2h_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamHandsOnRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamHandsOnRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamHandsOnRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamRecentRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebMatchTeamRecentRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamRecentRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchTeamFutureScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebMatchMatchTeamFutureScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_match_h2h_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebMatchMatchTeamFutureScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_foot_match_h2h_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_web_foot_match_h2h_proto_goTypes,
		DependencyIndexes: file_web_foot_match_h2h_proto_depIdxs,
		MessageInfos:      file_web_foot_match_h2h_proto_msgTypes,
	}.Build()
	File_web_foot_match_h2h_proto = out.File
	file_web_foot_match_h2h_proto_rawDesc = nil
	file_web_foot_match_h2h_proto_goTypes = nil
	file_web_foot_match_h2h_proto_depIdxs = nil
}
