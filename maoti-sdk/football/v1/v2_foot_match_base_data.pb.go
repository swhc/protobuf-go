// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: v2_foot_match_base_data.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//基础数据-列表
type V2FootBaseDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  int64  `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`  //比赛id
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"` //请求语言
}

func (x *V2FootBaseDataRequest) Reset() {
	*x = V2FootBaseDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootBaseDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootBaseDataRequest) ProtoMessage() {}

func (x *V2FootBaseDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootBaseDataRequest.ProtoReflect.Descriptor instead.
func (*V2FootBaseDataRequest) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{0}
}

func (x *V2FootBaseDataRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *V2FootBaseDataRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type V2FootBaseDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandLeague *V2FootStandLeague `protobuf:"bytes,1,opt,name=standLeague,proto3" json:"standLeague,omitempty"`
	Historical  *V2FootHistorical  `protobuf:"bytes,2,opt,name=historical,proto3" json:"historical,omitempty"`
	Future      *V2FootFuture      `protobuf:"bytes,3,opt,name=future,proto3" json:"future,omitempty"`
	Opponent    *V2FootOpponent    `protobuf:"bytes,4,opt,name=opponent,proto3" json:"opponent,omitempty"`
	Lately      *V2FootLately      `protobuf:"bytes,5,opt,name=lately,proto3" json:"lately,omitempty"`
}

func (x *V2FootBaseDataResponse) Reset() {
	*x = V2FootBaseDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootBaseDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootBaseDataResponse) ProtoMessage() {}

func (x *V2FootBaseDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootBaseDataResponse.ProtoReflect.Descriptor instead.
func (*V2FootBaseDataResponse) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{1}
}

func (x *V2FootBaseDataResponse) GetStandLeague() *V2FootStandLeague {
	if x != nil {
		return x.StandLeague
	}
	return nil
}

func (x *V2FootBaseDataResponse) GetHistorical() *V2FootHistorical {
	if x != nil {
		return x.Historical
	}
	return nil
}

func (x *V2FootBaseDataResponse) GetFuture() *V2FootFuture {
	if x != nil {
		return x.Future
	}
	return nil
}

func (x *V2FootBaseDataResponse) GetOpponent() *V2FootOpponent {
	if x != nil {
		return x.Opponent
	}
	return nil
}

func (x *V2FootBaseDataResponse) GetLately() *V2FootLately {
	if x != nil {
		return x.Lately
	}
	return nil
}

type V2FootLately struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main         *V2FootOpponentList `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Cust         *V2FootOpponentList `protobuf:"bytes,2,opt,name=cust,proto3" json:"cust,omitempty"`
	TournamentId int64               `protobuf:"varint,3,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
}

func (x *V2FootLately) Reset() {
	*x = V2FootLately{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootLately) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootLately) ProtoMessage() {}

func (x *V2FootLately) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootLately.ProtoReflect.Descriptor instead.
func (*V2FootLately) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{2}
}

func (x *V2FootLately) GetMain() *V2FootOpponentList {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *V2FootLately) GetCust() *V2FootOpponentList {
	if x != nil {
		return x.Cust
	}
	return nil
}

func (x *V2FootLately) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

type V2FootStandLeague struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main *V2LeagueList `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Cust *V2LeagueList `protobuf:"bytes,2,opt,name=cust,proto3" json:"cust,omitempty"`
}

func (x *V2FootStandLeague) Reset() {
	*x = V2FootStandLeague{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootStandLeague) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootStandLeague) ProtoMessage() {}

func (x *V2FootStandLeague) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootStandLeague.ProtoReflect.Descriptor instead.
func (*V2FootStandLeague) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{3}
}

func (x *V2FootStandLeague) GetMain() *V2LeagueList {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *V2FootStandLeague) GetCust() *V2LeagueList {
	if x != nil {
		return x.Cust
	}
	return nil
}

type V2LeagueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName   string              `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	TeamImages string              `protobuf:"bytes,2,opt,name=teamImages,proto3" json:"teamImages,omitempty"`
	TeamId     int64               `protobuf:"varint,4,opt,name=TeamId,proto3" json:"TeamId,omitempty"`
	List       []*V2FootLeagueList `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *V2LeagueList) Reset() {
	*x = V2LeagueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2LeagueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2LeagueList) ProtoMessage() {}

func (x *V2LeagueList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2LeagueList.ProtoReflect.Descriptor instead.
func (*V2LeagueList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{4}
}

func (x *V2LeagueList) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *V2LeagueList) GetTeamImages() string {
	if x != nil {
		return x.TeamImages
	}
	return ""
}

func (x *V2LeagueList) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *V2LeagueList) GetList() []*V2FootLeagueList {
	if x != nil {
		return x.List
	}
	return nil
}

type V2FootLeagueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     int64  `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Situation   int64  `protobuf:"varint,2,opt,name=situation,proto3" json:"situation,omitempty"`
	WinNumber   int64  `protobuf:"varint,3,opt,name=winNumber,proto3" json:"winNumber,omitempty"`
	FlatNumber  int64  `protobuf:"varint,4,opt,name=flatNumber,proto3" json:"flatNumber,omitempty"`
	MinusNumber int64  `protobuf:"varint,5,opt,name=minusNumber,proto3" json:"minusNumber,omitempty"`
	GoalAndLose string `protobuf:"bytes,6,opt,name=goalAndLose,proto3" json:"goalAndLose,omitempty"`
	Integral    int64  `protobuf:"varint,8,opt,name=integral,proto3" json:"integral,omitempty"`
	Rank        int64  `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
	HomeCourt   int64  `protobuf:"varint,10,opt,name=homeCourt,proto3" json:"homeCourt,omitempty"`
}

func (x *V2FootLeagueList) Reset() {
	*x = V2FootLeagueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootLeagueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootLeagueList) ProtoMessage() {}

func (x *V2FootLeagueList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootLeagueList.ProtoReflect.Descriptor instead.
func (*V2FootLeagueList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{5}
}

func (x *V2FootLeagueList) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *V2FootLeagueList) GetSituation() int64 {
	if x != nil {
		return x.Situation
	}
	return 0
}

func (x *V2FootLeagueList) GetWinNumber() int64 {
	if x != nil {
		return x.WinNumber
	}
	return 0
}

func (x *V2FootLeagueList) GetFlatNumber() int64 {
	if x != nil {
		return x.FlatNumber
	}
	return 0
}

func (x *V2FootLeagueList) GetMinusNumber() int64 {
	if x != nil {
		return x.MinusNumber
	}
	return 0
}

func (x *V2FootLeagueList) GetGoalAndLose() string {
	if x != nil {
		return x.GoalAndLose
	}
	return ""
}

func (x *V2FootLeagueList) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *V2FootLeagueList) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *V2FootLeagueList) GetHomeCourt() int64 {
	if x != nil {
		return x.HomeCourt
	}
	return 0
}

type V2FootHistorical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List            []*V2FootBaseList `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Count           int64             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	FlatNumber      int64             `protobuf:"varint,5,opt,name=flatNumber,proto3" json:"flatNumber,omitempty"`
	MinusNumber     int64             `protobuf:"varint,6,opt,name=minusNumber,proto3" json:"minusNumber,omitempty"`
	TeamId          int64             `protobuf:"varint,7,opt,name=teamId,proto3" json:"teamId,omitempty"`
	TeamImages      string            `protobuf:"bytes,8,opt,name=teamImages,proto3" json:"teamImages,omitempty"`
	TeamName        string            `protobuf:"bytes,9,opt,name=teamName,proto3" json:"teamName,omitempty"`
	WinNumber       int64             `protobuf:"varint,10,opt,name=winNumber,proto3" json:"winNumber,omitempty"`
	WinRete         string            `protobuf:"bytes,11,opt,name=winRete,proto3" json:"winRete,omitempty"`                 //胜率 ，近期战绩时使用
	WinHandicapRate string            `protobuf:"bytes,12,opt,name=winHandicapRate,proto3" json:"winHandicapRate,omitempty"` //赢盘率 ，近期战绩时使用
	BigBallRate     string            `protobuf:"bytes,13,opt,name=bigBallRate,proto3" json:"bigBallRate,omitempty"`         //大球率 ，近期战绩时使用
}

func (x *V2FootHistorical) Reset() {
	*x = V2FootHistorical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootHistorical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootHistorical) ProtoMessage() {}

func (x *V2FootHistorical) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootHistorical.ProtoReflect.Descriptor instead.
func (*V2FootHistorical) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{6}
}

func (x *V2FootHistorical) GetList() []*V2FootBaseList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *V2FootHistorical) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *V2FootHistorical) GetFlatNumber() int64 {
	if x != nil {
		return x.FlatNumber
	}
	return 0
}

func (x *V2FootHistorical) GetMinusNumber() int64 {
	if x != nil {
		return x.MinusNumber
	}
	return 0
}

func (x *V2FootHistorical) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *V2FootHistorical) GetTeamImages() string {
	if x != nil {
		return x.TeamImages
	}
	return ""
}

func (x *V2FootHistorical) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *V2FootHistorical) GetWinNumber() int64 {
	if x != nil {
		return x.WinNumber
	}
	return 0
}

func (x *V2FootHistorical) GetWinRete() string {
	if x != nil {
		return x.WinRete
	}
	return ""
}

func (x *V2FootHistorical) GetWinHandicapRate() string {
	if x != nil {
		return x.WinHandicapRate
	}
	return ""
}

func (x *V2FootHistorical) GetBigBallRate() string {
	if x != nil {
		return x.BigBallRate
	}
	return ""
}

type V2FootBaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         int64  `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	HistoricalDate  int64  `protobuf:"varint,2,opt,name=historicalDate,proto3" json:"historicalDate,omitempty"`
	MatchName       string `protobuf:"bytes,3,opt,name=matchName,proto3" json:"matchName,omitempty"`
	TeamMainId      int64  `protobuf:"varint,4,opt,name=teamMainId,proto3" json:"teamMainId,omitempty"`
	MainTeamName    string `protobuf:"bytes,5,opt,name=mainTeamName,proto3" json:"mainTeamName,omitempty"`
	Achievement     string `protobuf:"bytes,6,opt,name=achievement,proto3" json:"achievement,omitempty"`
	HalfCourtScore  string `protobuf:"bytes,7,opt,name=halfCourtScore,proto3" json:"halfCourtScore,omitempty"`
	TeamCustId      int64  `protobuf:"varint,8,opt,name=teamCustId,proto3" json:"teamCustId,omitempty"`
	CustTeamName    string `protobuf:"bytes,9,opt,name=custTeamName,proto3" json:"custTeamName,omitempty"`
	Outcome         string `protobuf:"bytes,10,opt,name=outcome,proto3" json:"outcome,omitempty"`
	SameEvent       bool   `protobuf:"varint,11,opt,name=sameEvent,proto3" json:"sameEvent,omitempty"`
	SameHomeCourt   bool   `protobuf:"varint,12,opt,name=sameHomeCourt,proto3" json:"sameHomeCourt,omitempty"`
	Trend           string `protobuf:"bytes,13,opt,name=trend,proto3" json:"trend,omitempty"`
	TrendStr        string `protobuf:"bytes,14,opt,name=trendStr,proto3" json:"trendStr,omitempty"`
	TrendNum        int64  `protobuf:"varint,15,opt,name=trendNum,proto3" json:"trendNum,omitempty"`
	Goal            string `protobuf:"bytes,16,opt,name=goal,proto3" json:"goal,omitempty"`
	GoalStr         string `protobuf:"bytes,17,opt,name=goalStr,proto3" json:"goalStr,omitempty"`
	GoalNum         int64  `protobuf:"varint,18,opt,name=goalNum,proto3" json:"goalNum,omitempty"`
	CornerKick      int64  `protobuf:"varint,19,opt,name=cornerKick,proto3" json:"cornerKick,omitempty"`
	MarkType        int64  `protobuf:"varint,20,opt,name=markType,proto3" json:"markType,omitempty"`
	IsMainTeam      bool   `protobuf:"varint,21,opt,name=isMainTeam,proto3" json:"isMainTeam,omitempty"`
	TournamentName  string `protobuf:"bytes,22,opt,name=tournamentName,proto3" json:"tournamentName,omitempty"`
	MainTeamLogo    string `protobuf:"bytes,23,opt,name=mainTeamLogo,proto3" json:"mainTeamLogo,omitempty"`
	CustTeamLogo    string `protobuf:"bytes,24,opt,name=custTeamLogo,proto3" json:"custTeamLogo,omitempty"`
	TournamentId    int64  `protobuf:"varint,25,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	HomeCornerScore int64  `protobuf:"varint,26,opt,name=homeCornerScore,proto3" json:"homeCornerScore,omitempty"` //主队角球得分
	AwayCornerScore int64  `protobuf:"varint,27,opt,name=awayCornerScore,proto3" json:"awayCornerScore,omitempty"` //客队角球得分
	HomeHalfScore   int64  `protobuf:"varint,28,opt,name=homeHalfScore,proto3" json:"homeHalfScore,omitempty"`     //主队半场得分
	AwayHalfScore   int64  `protobuf:"varint,29,opt,name=awayHalfScore,proto3" json:"awayHalfScore,omitempty"`     //客队半场得分
}

func (x *V2FootBaseList) Reset() {
	*x = V2FootBaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootBaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootBaseList) ProtoMessage() {}

func (x *V2FootBaseList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootBaseList.ProtoReflect.Descriptor instead.
func (*V2FootBaseList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{7}
}

func (x *V2FootBaseList) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *V2FootBaseList) GetHistoricalDate() int64 {
	if x != nil {
		return x.HistoricalDate
	}
	return 0
}

func (x *V2FootBaseList) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *V2FootBaseList) GetTeamMainId() int64 {
	if x != nil {
		return x.TeamMainId
	}
	return 0
}

func (x *V2FootBaseList) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *V2FootBaseList) GetAchievement() string {
	if x != nil {
		return x.Achievement
	}
	return ""
}

func (x *V2FootBaseList) GetHalfCourtScore() string {
	if x != nil {
		return x.HalfCourtScore
	}
	return ""
}

func (x *V2FootBaseList) GetTeamCustId() int64 {
	if x != nil {
		return x.TeamCustId
	}
	return 0
}

func (x *V2FootBaseList) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *V2FootBaseList) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *V2FootBaseList) GetSameEvent() bool {
	if x != nil {
		return x.SameEvent
	}
	return false
}

func (x *V2FootBaseList) GetSameHomeCourt() bool {
	if x != nil {
		return x.SameHomeCourt
	}
	return false
}

func (x *V2FootBaseList) GetTrend() string {
	if x != nil {
		return x.Trend
	}
	return ""
}

func (x *V2FootBaseList) GetTrendStr() string {
	if x != nil {
		return x.TrendStr
	}
	return ""
}

func (x *V2FootBaseList) GetTrendNum() int64 {
	if x != nil {
		return x.TrendNum
	}
	return 0
}

func (x *V2FootBaseList) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *V2FootBaseList) GetGoalStr() string {
	if x != nil {
		return x.GoalStr
	}
	return ""
}

func (x *V2FootBaseList) GetGoalNum() int64 {
	if x != nil {
		return x.GoalNum
	}
	return 0
}

func (x *V2FootBaseList) GetCornerKick() int64 {
	if x != nil {
		return x.CornerKick
	}
	return 0
}

func (x *V2FootBaseList) GetMarkType() int64 {
	if x != nil {
		return x.MarkType
	}
	return 0
}

func (x *V2FootBaseList) GetIsMainTeam() bool {
	if x != nil {
		return x.IsMainTeam
	}
	return false
}

func (x *V2FootBaseList) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *V2FootBaseList) GetMainTeamLogo() string {
	if x != nil {
		return x.MainTeamLogo
	}
	return ""
}

func (x *V2FootBaseList) GetCustTeamLogo() string {
	if x != nil {
		return x.CustTeamLogo
	}
	return ""
}

func (x *V2FootBaseList) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *V2FootBaseList) GetHomeCornerScore() int64 {
	if x != nil {
		return x.HomeCornerScore
	}
	return 0
}

func (x *V2FootBaseList) GetAwayCornerScore() int64 {
	if x != nil {
		return x.AwayCornerScore
	}
	return 0
}

func (x *V2FootBaseList) GetHomeHalfScore() int64 {
	if x != nil {
		return x.HomeHalfScore
	}
	return 0
}

func (x *V2FootBaseList) GetAwayHalfScore() int64 {
	if x != nil {
		return x.AwayHalfScore
	}
	return 0
}

type V2FootFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main *V2FootBaseMatchList `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Cust *V2FootBaseMatchList `protobuf:"bytes,2,opt,name=cust,proto3" json:"cust,omitempty"`
}

func (x *V2FootFuture) Reset() {
	*x = V2FootFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootFuture) ProtoMessage() {}

func (x *V2FootFuture) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootFuture.ProtoReflect.Descriptor instead.
func (*V2FootFuture) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{8}
}

func (x *V2FootFuture) GetMain() *V2FootBaseMatchList {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *V2FootFuture) GetCust() *V2FootBaseMatchList {
	if x != nil {
		return x.Cust
	}
	return nil
}

type V2FootBaseMatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*V2FootFutureList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	TeamName   string              `protobuf:"bytes,2,opt,name=teamName,proto3" json:"teamName,omitempty"`
	TeamImages string              `protobuf:"bytes,3,opt,name=teamImages,proto3" json:"teamImages,omitempty"`
}

func (x *V2FootBaseMatchList) Reset() {
	*x = V2FootBaseMatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootBaseMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootBaseMatchList) ProtoMessage() {}

func (x *V2FootBaseMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootBaseMatchList.ProtoReflect.Descriptor instead.
func (*V2FootBaseMatchList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{9}
}

func (x *V2FootBaseMatchList) GetList() []*V2FootFutureList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *V2FootBaseMatchList) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *V2FootBaseMatchList) GetTeamImages() string {
	if x != nil {
		return x.TeamImages
	}
	return ""
}

type V2FootFutureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        int64  `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	HistoricalDate int64  `protobuf:"varint,2,opt,name=historicalDate,proto3" json:"historicalDate,omitempty"`
	TournamentName string `protobuf:"bytes,3,opt,name=tournamentName,proto3" json:"tournamentName,omitempty"`
	MainTeamName   string `protobuf:"bytes,4,opt,name=mainTeamName,proto3" json:"mainTeamName,omitempty"`
	Achievement    string `protobuf:"bytes,5,opt,name=achievement,proto3" json:"achievement,omitempty"`
	CustTeamName   string `protobuf:"bytes,6,opt,name=custTeamName,proto3" json:"custTeamName,omitempty"`
	Trend          string `protobuf:"bytes,7,opt,name=trend,proto3" json:"trend,omitempty"`
	Spacing        int64  `protobuf:"varint,8,opt,name=spacing,proto3" json:"spacing,omitempty"`
	MainTeamLogo   string `protobuf:"bytes,9,opt,name=mainTeamLogo,proto3" json:"mainTeamLogo,omitempty"`
	CustTeamLogo   string `protobuf:"bytes,10,opt,name=custTeamLogo,proto3" json:"custTeamLogo,omitempty"`
	TournamentId   int64  `protobuf:"varint,11,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	MainTeamId     int64  `protobuf:"varint,12,opt,name=mainTeamId,proto3" json:"mainTeamId,omitempty"`
	CustTeamId     int64  `protobuf:"varint,13,opt,name=custTeamId,proto3" json:"custTeamId,omitempty"`
}

func (x *V2FootFutureList) Reset() {
	*x = V2FootFutureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootFutureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootFutureList) ProtoMessage() {}

func (x *V2FootFutureList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootFutureList.ProtoReflect.Descriptor instead.
func (*V2FootFutureList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{10}
}

func (x *V2FootFutureList) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *V2FootFutureList) GetHistoricalDate() int64 {
	if x != nil {
		return x.HistoricalDate
	}
	return 0
}

func (x *V2FootFutureList) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *V2FootFutureList) GetMainTeamName() string {
	if x != nil {
		return x.MainTeamName
	}
	return ""
}

func (x *V2FootFutureList) GetAchievement() string {
	if x != nil {
		return x.Achievement
	}
	return ""
}

func (x *V2FootFutureList) GetCustTeamName() string {
	if x != nil {
		return x.CustTeamName
	}
	return ""
}

func (x *V2FootFutureList) GetTrend() string {
	if x != nil {
		return x.Trend
	}
	return ""
}

func (x *V2FootFutureList) GetSpacing() int64 {
	if x != nil {
		return x.Spacing
	}
	return 0
}

func (x *V2FootFutureList) GetMainTeamLogo() string {
	if x != nil {
		return x.MainTeamLogo
	}
	return ""
}

func (x *V2FootFutureList) GetCustTeamLogo() string {
	if x != nil {
		return x.CustTeamLogo
	}
	return ""
}

func (x *V2FootFutureList) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *V2FootFutureList) GetMainTeamId() int64 {
	if x != nil {
		return x.MainTeamId
	}
	return 0
}

func (x *V2FootFutureList) GetCustTeamId() int64 {
	if x != nil {
		return x.CustTeamId
	}
	return 0
}

type V2FootOpponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main         *V2FootOpponentList `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Cust         *V2FootOpponentList `protobuf:"bytes,2,opt,name=cust,proto3" json:"cust,omitempty"`
	TournamentId int64               `protobuf:"varint,3,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
}

func (x *V2FootOpponent) Reset() {
	*x = V2FootOpponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootOpponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootOpponent) ProtoMessage() {}

func (x *V2FootOpponent) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootOpponent.ProtoReflect.Descriptor instead.
func (*V2FootOpponent) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{11}
}

func (x *V2FootOpponent) GetMain() *V2FootOpponentList {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *V2FootOpponent) GetCust() *V2FootOpponentList {
	if x != nil {
		return x.Cust
	}
	return nil
}

func (x *V2FootOpponent) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

type V2FootOpponentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count           int64             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	FlatNumber      int64             `protobuf:"varint,2,opt,name=flatNumber,proto3" json:"flatNumber,omitempty"`
	MinusNumber     int64             `protobuf:"varint,3,opt,name=minusNumber,proto3" json:"minusNumber,omitempty"`
	TeamId          int64             `protobuf:"varint,4,opt,name=teamId,proto3" json:"teamId,omitempty"`
	TeamImages      string            `protobuf:"bytes,5,opt,name=teamImages,proto3" json:"teamImages,omitempty"`
	TeamName        string            `protobuf:"bytes,6,opt,name=teamName,proto3" json:"teamName,omitempty"`
	WinNumber       int64             `protobuf:"varint,7,opt,name=winNumber,proto3" json:"winNumber,omitempty"`
	List            []*V2FootBaseList `protobuf:"bytes,8,rep,name=list,proto3" json:"list,omitempty"`
	WinRete         string            `protobuf:"bytes,9,opt,name=winRete,proto3" json:"winRete,omitempty"`                  //胜率 ，近期战绩时使用
	WinHandicapRate string            `protobuf:"bytes,10,opt,name=winHandicapRate,proto3" json:"winHandicapRate,omitempty"` //赢盘率 ，近期战绩时使用
	BigBallRate     string            `protobuf:"bytes,11,opt,name=bigBallRate,proto3" json:"bigBallRate,omitempty"`         //大球率 ，近期战绩时使用
}

func (x *V2FootOpponentList) Reset() {
	*x = V2FootOpponentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_foot_match_base_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2FootOpponentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2FootOpponentList) ProtoMessage() {}

func (x *V2FootOpponentList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_foot_match_base_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2FootOpponentList.ProtoReflect.Descriptor instead.
func (*V2FootOpponentList) Descriptor() ([]byte, []int) {
	return file_v2_foot_match_base_data_proto_rawDescGZIP(), []int{12}
}

func (x *V2FootOpponentList) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *V2FootOpponentList) GetFlatNumber() int64 {
	if x != nil {
		return x.FlatNumber
	}
	return 0
}

func (x *V2FootOpponentList) GetMinusNumber() int64 {
	if x != nil {
		return x.MinusNumber
	}
	return 0
}

func (x *V2FootOpponentList) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *V2FootOpponentList) GetTeamImages() string {
	if x != nil {
		return x.TeamImages
	}
	return ""
}

func (x *V2FootOpponentList) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *V2FootOpponentList) GetWinNumber() int64 {
	if x != nil {
		return x.WinNumber
	}
	return 0
}

func (x *V2FootOpponentList) GetList() []*V2FootBaseList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *V2FootOpponentList) GetWinRete() string {
	if x != nil {
		return x.WinRete
	}
	return ""
}

func (x *V2FootOpponentList) GetWinHandicapRate() string {
	if x != nil {
		return x.WinHandicapRate
	}
	return ""
}

func (x *V2FootOpponentList) GetBigBallRate() string {
	if x != nil {
		return x.BigBallRate
	}
	return ""
}

var File_v2_foot_match_base_data_proto protoreflect.FileDescriptor

var file_v2_foot_match_base_data_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x32, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4d, 0x0a, 0x15, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x16, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x32,
	0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x22, 0x84, 0x01,
	0x0a, 0x0c, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56,
	0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x75, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x63, 0x75, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x32, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x04,
	0x63, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x32, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x63, 0x75, 0x73, 0x74, 0x22,
	0x89, 0x01, 0x0a, 0x0c, 0x56, 0x32, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x10,
	0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x75, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x6f, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x10, 0x56, 0x32, 0x46,
	0x6f, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x32,
	0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6c,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x75,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x69, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x77, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x22, 0xc6, 0x07, 0x0a, 0x0e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x68,
	0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x48, 0x61, 0x6c, 0x66,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x48, 0x61, 0x6c,
	0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77,
	0x61, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x62, 0x0a, 0x0c, 0x56,
	0x32, 0x46, 0x6f, 0x6f, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x32, 0x46, 0x6f,
	0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x63, 0x75, 0x73, 0x74, 0x22,
	0x78, 0x0a, 0x13, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x10, 0x56, 0x32,
	0x46, 0x6f, 0x6f, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x0e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x75,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f,
	0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x63,
	0x75, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x56, 0x32, 0x46, 0x6f,
	0x6f, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x32, 0x46, 0x6f, 0x6f, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x77, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_foot_match_base_data_proto_rawDescOnce sync.Once
	file_v2_foot_match_base_data_proto_rawDescData = file_v2_foot_match_base_data_proto_rawDesc
)

func file_v2_foot_match_base_data_proto_rawDescGZIP() []byte {
	file_v2_foot_match_base_data_proto_rawDescOnce.Do(func() {
		file_v2_foot_match_base_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_foot_match_base_data_proto_rawDescData)
	})
	return file_v2_foot_match_base_data_proto_rawDescData
}

var file_v2_foot_match_base_data_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v2_foot_match_base_data_proto_goTypes = []interface{}{
	(*V2FootBaseDataRequest)(nil),  // 0: V2FootBaseDataRequest
	(*V2FootBaseDataResponse)(nil), // 1: V2FootBaseDataResponse
	(*V2FootLately)(nil),           // 2: V2FootLately
	(*V2FootStandLeague)(nil),      // 3: V2FootStandLeague
	(*V2LeagueList)(nil),           // 4: V2LeagueList
	(*V2FootLeagueList)(nil),       // 5: V2FootLeagueList
	(*V2FootHistorical)(nil),       // 6: V2FootHistorical
	(*V2FootBaseList)(nil),         // 7: V2FootBaseList
	(*V2FootFuture)(nil),           // 8: V2FootFuture
	(*V2FootBaseMatchList)(nil),    // 9: V2FootBaseMatchList
	(*V2FootFutureList)(nil),       // 10: V2FootFutureList
	(*V2FootOpponent)(nil),         // 11: V2FootOpponent
	(*V2FootOpponentList)(nil),     // 12: V2FootOpponentList
}
var file_v2_foot_match_base_data_proto_depIdxs = []int32{
	3,  // 0: V2FootBaseDataResponse.standLeague:type_name -> V2FootStandLeague
	6,  // 1: V2FootBaseDataResponse.historical:type_name -> V2FootHistorical
	8,  // 2: V2FootBaseDataResponse.future:type_name -> V2FootFuture
	11, // 3: V2FootBaseDataResponse.opponent:type_name -> V2FootOpponent
	2,  // 4: V2FootBaseDataResponse.lately:type_name -> V2FootLately
	12, // 5: V2FootLately.main:type_name -> V2FootOpponentList
	12, // 6: V2FootLately.cust:type_name -> V2FootOpponentList
	4,  // 7: V2FootStandLeague.main:type_name -> V2LeagueList
	4,  // 8: V2FootStandLeague.cust:type_name -> V2LeagueList
	5,  // 9: V2LeagueList.list:type_name -> V2FootLeagueList
	7,  // 10: V2FootHistorical.list:type_name -> V2FootBaseList
	9,  // 11: V2FootFuture.main:type_name -> V2FootBaseMatchList
	9,  // 12: V2FootFuture.cust:type_name -> V2FootBaseMatchList
	10, // 13: V2FootBaseMatchList.list:type_name -> V2FootFutureList
	12, // 14: V2FootOpponent.main:type_name -> V2FootOpponentList
	12, // 15: V2FootOpponent.cust:type_name -> V2FootOpponentList
	7,  // 16: V2FootOpponentList.list:type_name -> V2FootBaseList
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v2_foot_match_base_data_proto_init() }
func file_v2_foot_match_base_data_proto_init() {
	if File_v2_foot_match_base_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_foot_match_base_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootBaseDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootBaseDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootLately); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootStandLeague); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2LeagueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootLeagueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootHistorical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootBaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootBaseMatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootFutureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootOpponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_foot_match_base_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2FootOpponentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_foot_match_base_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v2_foot_match_base_data_proto_goTypes,
		DependencyIndexes: file_v2_foot_match_base_data_proto_depIdxs,
		MessageInfos:      file_v2_foot_match_base_data_proto_msgTypes,
	}.Build()
	File_v2_foot_match_base_data_proto = out.File
	file_v2_foot_match_base_data_proto_rawDesc = nil
	file_v2_foot_match_base_data_proto_goTypes = nil
	file_v2_foot_match_base_data_proto_depIdxs = nil
}
