// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: foot_match_real_time_v2.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//比赛日历
type FootMatchRealTimeRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabType      int64   `protobuf:"varint,6,opt,name=tabType,proto3" json:"tabType,omitempty"` //1：即时，2：全部比赛，3：关注
	Status       int64   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`   //即时的状态 0全部,1：未开始，2为开始，3为结束
	Page         int64   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int64   `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	DateTime     string  `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //全部比赛的日期  2020-09-01
	TournamentId []int64 `protobuf:"varint,1,rep,packed,name=tournamentId,proto3" json:"tournamentId,omitempty"` //赛事筛选
	EventIds     []int64 `protobuf:"varint,2,rep,packed,name=eventIds,proto3" json:"eventIds,omitempty"`         //比赛筛选
	Language     string  `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`                 //请求语言
}

func (x *FootMatchRealTimeRequestV2) Reset() {
	*x = FootMatchRealTimeRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeRequestV2) ProtoMessage() {}

func (x *FootMatchRealTimeRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeRequestV2.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeRequestV2) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_v2_proto_rawDescGZIP(), []int{0}
}

func (x *FootMatchRealTimeRequestV2) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *FootMatchRealTimeRequestV2) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FootMatchRealTimeRequestV2) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FootMatchRealTimeRequestV2) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FootMatchRealTimeRequestV2) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *FootMatchRealTimeRequestV2) GetTournamentId() []int64 {
	if x != nil {
		return x.TournamentId
	}
	return nil
}

func (x *FootMatchRealTimeRequestV2) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *FootMatchRealTimeRequestV2) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FootMatchRealTimeResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C    int64                      `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
	CTm  int64                      `protobuf:"varint,24,opt,name=cTm,proto3" json:"cTm,omitempty"` //服务器当前时间戳
	List []*FootMatchRealTimeListV2 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FootMatchRealTimeResponseV2) Reset() {
	*x = FootMatchRealTimeResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeResponseV2) ProtoMessage() {}

func (x *FootMatchRealTimeResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeResponseV2.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeResponseV2) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_v2_proto_rawDescGZIP(), []int{1}
}

func (x *FootMatchRealTimeResponseV2) GetC() int64 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *FootMatchRealTimeResponseV2) GetCTm() int64 {
	if x != nil {
		return x.CTm
	}
	return 0
}

func (x *FootMatchRealTimeResponseV2) GetList() []*FootMatchRealTimeListV2 {
	if x != nil {
		return x.List
	}
	return nil
}

type FootMatchRealTimeListV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  string tournamentName = 1;    //  联赛名称
	STm  int64                      `protobuf:"varint,2,opt,name=sTm,proto3" json:"sTm,omitempty"`  //      当前比赛开始时间戳   startTime
	List []*FootMatchRealTimeInfoV2 `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` //  数据列表
	//  string tournamentImage = 4;    //  当前联赛的图片
	//  string color = 5;    //  联赛颜色
	St  int64 `protobuf:"varint,6,opt,name=st,proto3" json:"st,omitempty"`   //后端用来排序前端不用管  eventStatusResult
	TId int64 `protobuf:"varint,7,opt,name=tId,proto3" json:"tId,omitempty"` //当前联赛id   //tournamentId
}

func (x *FootMatchRealTimeListV2) Reset() {
	*x = FootMatchRealTimeListV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeListV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeListV2) ProtoMessage() {}

func (x *FootMatchRealTimeListV2) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeListV2.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeListV2) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_v2_proto_rawDescGZIP(), []int{2}
}

func (x *FootMatchRealTimeListV2) GetSTm() int64 {
	if x != nil {
		return x.STm
	}
	return 0
}

func (x *FootMatchRealTimeListV2) GetList() []*FootMatchRealTimeInfoV2 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FootMatchRealTimeListV2) GetSt() int64 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *FootMatchRealTimeListV2) GetTId() int64 {
	if x != nil {
		return x.TId
	}
	return 0
}

type FootMatchRealTimeInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"` //当前记录ID 赛事iD用于收藏传递
	//  int64        tournamentId = 1;                      //联赛名称
	//  string        tournamentName = 2;                      //联赛名称
	MId int64 `protobuf:"varint,3,opt,name=mId,proto3" json:"mId,omitempty"` //主队ID   teamMainId
	//  string         teamMainName = 4;                      //主队name
	CId int64 `protobuf:"varint,5,opt,name=cId,proto3" json:"cId,omitempty"` //客队ID   teamCustId
	//  string         teamCustName = 6;                      //客队name
	//  int64         teamMainScore = 7;                      //主队进球总分
	//  int64         teamCustScore = 18;                      //客队进球总分
	Sc string `protobuf:"bytes,98,opt,name=sc,proto3" json:"sc,omitempty"` //主客总比分   mainCustScore
	//  string        result = 19;                      //结果
	//  int64         startTime = 110;                      //当前比赛开始时间戳
	//  string         startDate = 111;                      //
	//  int64         endTime = 12;                      //结束时间
	St  int64  `protobuf:"varint,13,opt,name=st,proto3" json:"st,omitempty"`  //当前比赛状态 1：未开始，2为开始，3为结束 4特殊状况临时中断比赛  5、延迟  6、取消  eventStatusResult
	Pt  int64  `protobuf:"varint,14,opt,name=pt,proto3" json:"pt,omitempty"`  //播放类型（1:直播，2：3D）  playbackType
	Url string `protobuf:"bytes,15,opt,name=url,proto3" json:"url,omitempty"` //跳转地址   playUrl
	//  string        leagueImage = 16;//联赛图标
	HSc string `protobuf:"bytes,17,opt,name=hSc,proto3" json:"hSc,omitempty"` //当前半场得分状况   HalfCourt
	CK  string `protobuf:"bytes,11,opt,name=cK,proto3" json:"cK,omitempty"`   //角球
	YC  string `protobuf:"bytes,12,opt,name=yC,proto3" json:"yC,omitempty"`   //黄牌
	RC  string `protobuf:"bytes,51,opt,name=rC,proto3" json:"rC,omitempty"`   //红牌
	Rk  string `protobuf:"bytes,52,opt,name=rk,proto3" json:"rk,omitempty"`   //排名
	//  FootCornerKickV2    cornerKick = 11;  //角球
	//  bool          isCollect = 119;//是否收藏
	//  footTeamInfoV2  teamMain = 20;  //主队数据信息
	//  footTeamInfoV2  teamCust = 21;  //客队数据信息
	Re   string `protobuf:"bytes,22,opt,name=re,proto3" json:"re,omitempty"`      //备注说明：什么原因中断  reason
	StId int64  `protobuf:"varint,23,opt,name=stId,proto3" json:"stId,omitempty"` //当前比赛eapi的原有状态   eventStatusId
	//  int64         currentTime = 24;    //服务器当前时间戳
	//  int64         secondHalfTime = 25;    //下半场开始时间
	//  string        secondHalfExtraTimes = 26;    //下半场加时赛开始时间
	//  string        secondHalfTimes = 27;    //下半场开始时间
	//  int64         firstHalfTime = 28;    //真正开始时间
	//  string        firstHalfTimes = 29;    //上半场开始时间
	//  string        firstHalfExtraTimes = 30;    //上半场加时赛开始时间
	//  int64         elapsed = 31;    //事件发生时的比赛时长
	//  int64         elapsedUpTime = 32;    //事件时长更新时间戳
	//  int64         planNum = 33;    //方案数量
	//  string        leagueColor = 34;    //联赛颜色
	ESc string `protobuf:"bytes,35,opt,name=eSc,proto3" json:"eSc,omitempty"` //加时得分   ExtratimeScore
	PSc string `protobuf:"bytes,36,opt,name=pSc,proto3" json:"pSc,omitempty"` //点球得分   PenaltyshootoutScore
	//  string        mainExtratimeScore = 35;    //加时主队得分
	//  string        custExtratimeScore = 36;    //加时客队得分
	//  string        mainPenaltyshootoutScore = 37;    //点球主队得分
	//  string        custPenaltyshootoutScore = 38;    //点球客队得分
	//  string        mainFinalResult = 39;    //主队最终得分
	//  string        custFinalResult = 40;    //客队最终得分
	Odds *FootOddsV2 `protobuf:"bytes,41,opt,name=odds,proto3" json:"odds,omitempty"` //指数
	R    string      `protobuf:"bytes,42,opt,name=r,proto3" json:"r,omitempty"`       //场次 | 编号  round
	//  string        tournamentImage = 43;    //  当前联赛的图片
	//  string        color = 44;    //  联赛颜色
	CTm string `protobuf:"bytes,45,opt,name=cTm,proto3" json:"cTm,omitempty"` //分类用的时间   classifyTime
}

func (x *FootMatchRealTimeInfoV2) Reset() {
	*x = FootMatchRealTimeInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeInfoV2) ProtoMessage() {}

func (x *FootMatchRealTimeInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeInfoV2.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeInfoV2) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_v2_proto_rawDescGZIP(), []int{3}
}

func (x *FootMatchRealTimeInfoV2) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetMId() int64 {
	if x != nil {
		return x.MId
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetCId() int64 {
	if x != nil {
		return x.CId
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetSc() string {
	if x != nil {
		return x.Sc
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetSt() int64 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetPt() int64 {
	if x != nil {
		return x.Pt
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetHSc() string {
	if x != nil {
		return x.HSc
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetCK() string {
	if x != nil {
		return x.CK
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetYC() string {
	if x != nil {
		return x.YC
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetRC() string {
	if x != nil {
		return x.RC
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetRk() string {
	if x != nil {
		return x.Rk
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetStId() int64 {
	if x != nil {
		return x.StId
	}
	return 0
}

func (x *FootMatchRealTimeInfoV2) GetESc() string {
	if x != nil {
		return x.ESc
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetPSc() string {
	if x != nil {
		return x.PSc
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetOdds() *FootOddsV2 {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *FootMatchRealTimeInfoV2) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *FootMatchRealTimeInfoV2) GetCTm() string {
	if x != nil {
		return x.CTm
	}
	return ""
}

type FootOddsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MP string `protobuf:"bytes,1,opt,name=mP,proto3" json:"mP,omitempty"` //欧盘|中间参数（格式：1.70 +0/0.5 2.00）【这个app需要舍弃，h5在使用】只需要显示下面两对应 middleParam
	OU string `protobuf:"bytes,2,opt,name=oU,proto3" json:"oU,omitempty"` //亚赔的即时指数【格式：0.5|u,+2.5,0.25|d】  oddsUp
	OD string `protobuf:"bytes,3,opt,name=oD,proto3" json:"oD,omitempty"` //大小球的即时指数【格式：0.5|u,+2.5,0.25|d】  oddsDown
}

func (x *FootOddsV2) Reset() {
	*x = FootOddsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootOddsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootOddsV2) ProtoMessage() {}

func (x *FootOddsV2) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootOddsV2.ProtoReflect.Descriptor instead.
func (*FootOddsV2) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_v2_proto_rawDescGZIP(), []int{4}
}

func (x *FootOddsV2) GetMP() string {
	if x != nil {
		return x.MP
	}
	return ""
}

func (x *FootOddsV2) GetOU() string {
	if x != nil {
		return x.OU
	}
	return ""
}

func (x *FootOddsV2) GetOD() string {
	if x != nil {
		return x.OD
	}
	return ""
}

var File_foot_match_real_time_v2_proto protoreflect.FileDescriptor

var file_foot_match_real_time_v2_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf7, 0x01, 0x0a, 0x1a, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x1b, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x54, 0x6d, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x54, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x32,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x54, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x54, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x74, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x17, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x63, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x53, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x53, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x4b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x4b, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x43, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x43, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x43, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x43, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6b, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x53, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x53, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x53, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x53, 0x63, 0x12,
	0x1f, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x56, 0x32, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x54, 0x6d, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x54, 0x6d,
	0x22, 0x3c, 0x0a, 0x0a, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x56, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x50, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x55, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x44, 0x42, 0x07,
	0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foot_match_real_time_v2_proto_rawDescOnce sync.Once
	file_foot_match_real_time_v2_proto_rawDescData = file_foot_match_real_time_v2_proto_rawDesc
)

func file_foot_match_real_time_v2_proto_rawDescGZIP() []byte {
	file_foot_match_real_time_v2_proto_rawDescOnce.Do(func() {
		file_foot_match_real_time_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_foot_match_real_time_v2_proto_rawDescData)
	})
	return file_foot_match_real_time_v2_proto_rawDescData
}

var file_foot_match_real_time_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_foot_match_real_time_v2_proto_goTypes = []interface{}{
	(*FootMatchRealTimeRequestV2)(nil),  // 0: FootMatchRealTimeRequestV2
	(*FootMatchRealTimeResponseV2)(nil), // 1: FootMatchRealTimeResponseV2
	(*FootMatchRealTimeListV2)(nil),     // 2: FootMatchRealTimeListV2
	(*FootMatchRealTimeInfoV2)(nil),     // 3: FootMatchRealTimeInfoV2
	(*FootOddsV2)(nil),                  // 4: FootOddsV2
}
var file_foot_match_real_time_v2_proto_depIdxs = []int32{
	2, // 0: FootMatchRealTimeResponseV2.list:type_name -> FootMatchRealTimeListV2
	3, // 1: FootMatchRealTimeListV2.list:type_name -> FootMatchRealTimeInfoV2
	4, // 2: FootMatchRealTimeInfoV2.odds:type_name -> FootOddsV2
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_foot_match_real_time_v2_proto_init() }
func file_foot_match_real_time_v2_proto_init() {
	if File_foot_match_real_time_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_foot_match_real_time_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeListV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootOddsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foot_match_real_time_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_foot_match_real_time_v2_proto_goTypes,
		DependencyIndexes: file_foot_match_real_time_v2_proto_depIdxs,
		MessageInfos:      file_foot_match_real_time_v2_proto_msgTypes,
	}.Build()
	File_foot_match_real_time_v2_proto = out.File
	file_foot_match_real_time_v2_proto_rawDesc = nil
	file_foot_match_real_time_v2_proto_goTypes = nil
	file_foot_match_real_time_v2_proto_depIdxs = nil
}
