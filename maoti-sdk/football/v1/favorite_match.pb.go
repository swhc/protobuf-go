// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: favorite_match.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FavoriteMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []int64 `protobuf:"varint,1,rep,packed,name=matchIds,proto3" json:"matchIds,omitempty"` //比赛ID
	Language string  `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`         //请求语言
}

func (x *FavoriteMatchRequest) Reset() {
	*x = FavoriteMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteMatchRequest) ProtoMessage() {}

func (x *FavoriteMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteMatchRequest.ProtoReflect.Descriptor instead.
func (*FavoriteMatchRequest) Descriptor() ([]byte, []int) {
	return file_favorite_match_proto_rawDescGZIP(), []int{0}
}

func (x *FavoriteMatchRequest) GetMatchIds() []int64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *FavoriteMatchRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FavoriteMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FavoriteMatchList `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FavoriteMatchResponse) Reset() {
	*x = FavoriteMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteMatchResponse) ProtoMessage() {}

func (x *FavoriteMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteMatchResponse.ProtoReflect.Descriptor instead.
func (*FavoriteMatchResponse) Descriptor() ([]byte, []int) {
	return file_favorite_match_proto_rawDescGZIP(), []int{1}
}

func (x *FavoriteMatchResponse) GetList() []*FavoriteMatchList {
	if x != nil {
		return x.List
	}
	return nil
}

type FavoriteMatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64                `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	List      []*FavoriteMatchInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //数据列表
}

func (x *FavoriteMatchList) Reset() {
	*x = FavoriteMatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteMatchList) ProtoMessage() {}

func (x *FavoriteMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteMatchList.ProtoReflect.Descriptor instead.
func (*FavoriteMatchList) Descriptor() ([]byte, []int) {
	return file_favorite_match_proto_rawDescGZIP(), []int{2}
}

func (x *FavoriteMatchList) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FavoriteMatchList) GetList() []*FavoriteMatchInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type FavoriteMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId           int64      `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`                     //比赛ID
	Result            string     `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`                        //结果
	StartTime         int64      `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`                 //当前比赛开始时间戳
	EndTime           int64      `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`                     //结束时间
	EventStatusResult int64      `protobuf:"varint,5,opt,name=eventStatusResult,proto3" json:"eventStatusResult,omitempty"` //当前比赛状态 1：未开始，2为开始，3为结束 4特殊状况临时中断比赛  5、延迟  6、取消
	TeamMain          *TeamsInfo `protobuf:"bytes,6,opt,name=teamMain,proto3" json:"teamMain,omitempty"`                    //主队数据信息
	TeamCust          *TeamsInfo `protobuf:"bytes,7,opt,name=teamCust,proto3" json:"teamCust,omitempty"`                    //客队数据信息
	TotalScore        string     `protobuf:"bytes,8,opt,name=totalScore,proto3" json:"totalScore,omitempty"`                //主客总比分
	Reason            string     `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`                        //备注说明：什么原因中断
	CurrentTime       int64      `protobuf:"varint,10,opt,name=currentTime,proto3" json:"currentTime,omitempty"`            //服务器当前时间戳
	TournamentId      int64      `protobuf:"varint,11,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`          //联赛ID
	TournamentName    string     `protobuf:"bytes,12,opt,name=tournamentName,proto3" json:"tournamentName,omitempty"`       //联赛名称
	TournamentImage   string     `protobuf:"bytes,13,opt,name=tournamentImage,proto3" json:"tournamentImage,omitempty"`     //联赛的图片
	Color             string     `protobuf:"bytes,14,opt,name=color,proto3" json:"color,omitempty"`                         //联赛颜色
	SportId           int64      `protobuf:"varint,15,opt,name=sportId,proto3" json:"sportId,omitempty"`                    //比赛数据类型：1.足球，2.篮球
}

func (x *FavoriteMatchInfo) Reset() {
	*x = FavoriteMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteMatchInfo) ProtoMessage() {}

func (x *FavoriteMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteMatchInfo.ProtoReflect.Descriptor instead.
func (*FavoriteMatchInfo) Descriptor() ([]byte, []int) {
	return file_favorite_match_proto_rawDescGZIP(), []int{3}
}

func (x *FavoriteMatchInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *FavoriteMatchInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *FavoriteMatchInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FavoriteMatchInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FavoriteMatchInfo) GetEventStatusResult() int64 {
	if x != nil {
		return x.EventStatusResult
	}
	return 0
}

func (x *FavoriteMatchInfo) GetTeamMain() *TeamsInfo {
	if x != nil {
		return x.TeamMain
	}
	return nil
}

func (x *FavoriteMatchInfo) GetTeamCust() *TeamsInfo {
	if x != nil {
		return x.TeamCust
	}
	return nil
}

func (x *FavoriteMatchInfo) GetTotalScore() string {
	if x != nil {
		return x.TotalScore
	}
	return ""
}

func (x *FavoriteMatchInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FavoriteMatchInfo) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *FavoriteMatchInfo) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *FavoriteMatchInfo) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *FavoriteMatchInfo) GetTournamentImage() string {
	if x != nil {
		return x.TournamentImage
	}
	return ""
}

func (x *FavoriteMatchInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *FavoriteMatchInfo) GetSportId() int64 {
	if x != nil {
		return x.SportId
	}
	return 0
}

type TeamsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                            //球队ID
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                        //球队名称
	Logo            string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                        //球队图片
	Rank            int64  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                       //球队排名
	YellowCard      int64  `protobuf:"varint,5,opt,name=yellowCard,proto3" json:"yellowCard,omitempty"`           //黄牌数量
	RedCard         int64  `protobuf:"varint,6,opt,name=redCard,proto3" json:"redCard,omitempty"`                 //红牌数量
	HalfTimeScore   int64  `protobuf:"varint,7,opt,name=halfTimeScore,proto3" json:"halfTimeScore,omitempty"`     //半场得分
	CornerScore     int64  `protobuf:"varint,8,opt,name=cornerScore,proto3" json:"cornerScore,omitempty"`         //角球得分
	TotalGoalsScore int64  `protobuf:"varint,9,opt,name=totalGoalsScore,proto3" json:"totalGoalsScore,omitempty"` //进球总得分
	OvertimeScore   int64  `protobuf:"varint,10,opt,name=overtimeScore,proto3" json:"overtimeScore,omitempty"`    //加时得分
	PenaltyScore    int64  `protobuf:"varint,11,opt,name=penaltyScore,proto3" json:"penaltyScore,omitempty"`      //点球得分
	FinalScore      int64  `protobuf:"varint,12,opt,name=finalScore,proto3" json:"finalScore,omitempty"`          //最终得分
}

func (x *TeamsInfo) Reset() {
	*x = TeamsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsInfo) ProtoMessage() {}

func (x *TeamsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsInfo.ProtoReflect.Descriptor instead.
func (*TeamsInfo) Descriptor() ([]byte, []int) {
	return file_favorite_match_proto_rawDescGZIP(), []int{4}
}

func (x *TeamsInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamsInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamsInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TeamsInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TeamsInfo) GetYellowCard() int64 {
	if x != nil {
		return x.YellowCard
	}
	return 0
}

func (x *TeamsInfo) GetRedCard() int64 {
	if x != nil {
		return x.RedCard
	}
	return 0
}

func (x *TeamsInfo) GetHalfTimeScore() int64 {
	if x != nil {
		return x.HalfTimeScore
	}
	return 0
}

func (x *TeamsInfo) GetCornerScore() int64 {
	if x != nil {
		return x.CornerScore
	}
	return 0
}

func (x *TeamsInfo) GetTotalGoalsScore() int64 {
	if x != nil {
		return x.TotalGoalsScore
	}
	return 0
}

func (x *TeamsInfo) GetOvertimeScore() int64 {
	if x != nil {
		return x.OvertimeScore
	}
	return 0
}

func (x *TeamsInfo) GetPenaltyScore() int64 {
	if x != nil {
		return x.PenaltyScore
	}
	return 0
}

func (x *TeamsInfo) GetFinalScore() int64 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

var File_favorite_match_proto protoreflect.FileDescriptor

var file_favorite_match_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x14, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xfb, 0x03, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x26, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x22, 0xed, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x61, 0x6c,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_favorite_match_proto_rawDescOnce sync.Once
	file_favorite_match_proto_rawDescData = file_favorite_match_proto_rawDesc
)

func file_favorite_match_proto_rawDescGZIP() []byte {
	file_favorite_match_proto_rawDescOnce.Do(func() {
		file_favorite_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_favorite_match_proto_rawDescData)
	})
	return file_favorite_match_proto_rawDescData
}

var file_favorite_match_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_favorite_match_proto_goTypes = []interface{}{
	(*FavoriteMatchRequest)(nil),  // 0: FavoriteMatchRequest
	(*FavoriteMatchResponse)(nil), // 1: FavoriteMatchResponse
	(*FavoriteMatchList)(nil),     // 2: FavoriteMatchList
	(*FavoriteMatchInfo)(nil),     // 3: FavoriteMatchInfo
	(*TeamsInfo)(nil),             // 4: TeamsInfo
}
var file_favorite_match_proto_depIdxs = []int32{
	2, // 0: FavoriteMatchResponse.list:type_name -> FavoriteMatchList
	3, // 1: FavoriteMatchList.list:type_name -> FavoriteMatchInfo
	4, // 2: FavoriteMatchInfo.teamMain:type_name -> TeamsInfo
	4, // 3: FavoriteMatchInfo.teamCust:type_name -> TeamsInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_favorite_match_proto_init() }
func file_favorite_match_proto_init() {
	if File_favorite_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favorite_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteMatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favorite_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_favorite_match_proto_goTypes,
		DependencyIndexes: file_favorite_match_proto_depIdxs,
		MessageInfos:      file_favorite_match_proto_msgTypes,
	}.Build()
	File_favorite_match_proto = out.File
	file_favorite_match_proto_rawDesc = nil
	file_favorite_match_proto_goTypes = nil
	file_favorite_match_proto_depIdxs = nil
}
