// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: foot_server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//请求格式
type FootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method   string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`     //请求的方法
	Params   []byte `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`     //请求的参数
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"` //请求语言  1:zh  2:en
}

func (x *FootRequest) Reset() {
	*x = FootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootRequest) ProtoMessage() {}

func (x *FootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foot_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootRequest.ProtoReflect.Descriptor instead.
func (*FootRequest) Descriptor() ([]byte, []int) {
	return file_foot_server_proto_rawDescGZIP(), []int{0}
}

func (x *FootRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FootRequest) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FootRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` //返回结果
}

func (x *FootResponse) Reset() {
	*x = FootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootResponse) ProtoMessage() {}

func (x *FootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foot_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootResponse.ProtoReflect.Descriptor instead.
func (*FootResponse) Descriptor() ([]byte, []int) {
	return file_foot_server_proto_rawDescGZIP(), []int{1}
}

func (x *FootResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_foot_server_proto protoreflect.FileDescriptor

var file_foot_server_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x65,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x59, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0xc4, 0x0b, 0x0a, 0x08, 0x46, 0x6f, 0x6f, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x16,
	0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x14, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x46,
	0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x46,
	0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x12, 0x12, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74,
	0x54, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x10, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x65, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x14,
	0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x46, 0x6f, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foot_server_proto_rawDescOnce sync.Once
	file_foot_server_proto_rawDescData = file_foot_server_proto_rawDesc
)

func file_foot_server_proto_rawDescGZIP() []byte {
	file_foot_server_proto_rawDescOnce.Do(func() {
		file_foot_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_foot_server_proto_rawDescData)
	})
	return file_foot_server_proto_rawDescData
}

var file_foot_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_foot_server_proto_goTypes = []interface{}{
	(*FootRequest)(nil),                               // 0: FootRequest
	(*FootResponse)(nil),                              // 1: FootResponse
	(*FootMatchInfoRequest)(nil),                      // 2: FootMatchInfoRequest
	(*FootOddListRequest)(nil),                        // 3: FootOddListRequest
	(*FootOddDetailRequest)(nil),                      // 4: FootOddDetailRequest
	(*FootSeasonListRequest)(nil),                     // 5: FootSeasonListRequest
	(*FootPlayerInfoRequest)(nil),                     // 6: FootPlayerInfoRequest
	(*FootMatchCommentRequest)(nil),                   // 7: FootMatchCommentRequest
	(*FootMatchFiltrateRequest)(nil),                  // 8: FootMatchFiltrateRequest
	(*FootContinentCountryTournamentInfoRequest)(nil), // 9: FootContinentCountryTournamentInfoRequest
	(*FootTeamDetailRequest)(nil),                     // 10: FootTeamDetailRequest
	(*FootStandTagRequest)(nil),                       // 11: FootStandTagRequest
	(*FootTeamMatchRequest)(nil),                      // 12: FootTeamMatchRequest
	(*FootLineupRequest)(nil),                         // 13: FootLineupRequest
	(*FootMatchAllRequest)(nil),                       // 14: FootMatchAllRequest
	(*FootTeamStandRequest)(nil),                      // 15: FootTeamStandRequest
	(*FootTodayMatchRequest)(nil),                     // 16: FootTodayMatchRequest
	(*FootLeagueStandRequest)(nil),                    // 17: FootLeagueStandRequest
	(*FootTeamTransferRequest)(nil),                   // 18: FootTeamTransferRequest
	(*FootPlayerStandRequest)(nil),                    // 19: FootPlayerStandRequest
	(*FootLiveLineupRequest)(nil),                     // 20: FootLiveLineupRequest
	(*FootPlayerCareerRequest)(nil),                   // 21: FootPlayerCareerRequest
	(*FootTeamTransferYearRequest)(nil),               // 22: FootTeamTransferYearRequest
	(*CheckFootExistenceRequest)(nil),                 // 23: CheckFootExistenceRequest
	(*FootFiltrationRequest)(nil),                     // 24: FootFiltrationRequest
}
var file_foot_server_proto_depIdxs = []int32{
	2,  // 0: FootBall.FootMatchAgainstDetail:input_type -> FootMatchInfoRequest
	3,  // 1: FootBall.GetMatchOddList:input_type -> FootOddListRequest
	4,  // 2: FootBall.GetMatchOddListDetail:input_type -> FootOddDetailRequest
	5,  // 3: FootBall.GetFootSeasonList:input_type -> FootSeasonListRequest
	6,  // 4: FootBall.FootPlayerDetail:input_type -> FootPlayerInfoRequest
	7,  // 5: FootBall.FootMatchCommentList:input_type -> FootMatchCommentRequest
	8,  // 6: FootBall.GetFootMatchFiltrate:input_type -> FootMatchFiltrateRequest
	9,  // 7: FootBall.GetFootContinentCountryTournamentData:input_type -> FootContinentCountryTournamentInfoRequest
	10, // 8: FootBall.FootTeamDetail:input_type -> FootTeamDetailRequest
	11, // 9: FootBall.FootStandTag:input_type -> FootStandTagRequest
	12, // 10: FootBall.FootTeamMatch:input_type -> FootTeamMatchRequest
	13, // 11: FootBall.FootMatchTeamLineup:input_type -> FootLineupRequest
	14, // 12: FootBall.FootMatchList:input_type -> FootMatchAllRequest
	15, // 13: FootBall.FootTeamStand:input_type -> FootTeamStandRequest
	16, // 14: FootBall.FootTodayMatch:input_type -> FootTodayMatchRequest
	17, // 15: FootBall.GetFootLeagueStand:input_type -> FootLeagueStandRequest
	18, // 16: FootBall.FootTeamTransfer:input_type -> FootTeamTransferRequest
	19, // 17: FootBall.GetFootPlayerStand:input_type -> FootPlayerStandRequest
	20, // 18: FootBall.FootLiveLineup:input_type -> FootLiveLineupRequest
	21, // 19: FootBall.FootPlayerCareer:input_type -> FootPlayerCareerRequest
	22, // 20: FootBall.FootTeamTransferYear:input_type -> FootTeamTransferYearRequest
	23, // 21: FootBall.GetFootCheckExistence:input_type -> CheckFootExistenceRequest
	24, // 22: FootBall.FootFiltrationId:input_type -> FootFiltrationRequest
	1,  // 23: FootBall.FootMatchAgainstDetail:output_type -> FootResponse
	1,  // 24: FootBall.GetMatchOddList:output_type -> FootResponse
	1,  // 25: FootBall.GetMatchOddListDetail:output_type -> FootResponse
	1,  // 26: FootBall.GetFootSeasonList:output_type -> FootResponse
	1,  // 27: FootBall.FootPlayerDetail:output_type -> FootResponse
	1,  // 28: FootBall.FootMatchCommentList:output_type -> FootResponse
	1,  // 29: FootBall.GetFootMatchFiltrate:output_type -> FootResponse
	1,  // 30: FootBall.GetFootContinentCountryTournamentData:output_type -> FootResponse
	1,  // 31: FootBall.FootTeamDetail:output_type -> FootResponse
	1,  // 32: FootBall.FootStandTag:output_type -> FootResponse
	1,  // 33: FootBall.FootTeamMatch:output_type -> FootResponse
	1,  // 34: FootBall.FootMatchTeamLineup:output_type -> FootResponse
	1,  // 35: FootBall.FootMatchList:output_type -> FootResponse
	1,  // 36: FootBall.FootTeamStand:output_type -> FootResponse
	1,  // 37: FootBall.FootTodayMatch:output_type -> FootResponse
	1,  // 38: FootBall.GetFootLeagueStand:output_type -> FootResponse
	1,  // 39: FootBall.FootTeamTransfer:output_type -> FootResponse
	1,  // 40: FootBall.GetFootPlayerStand:output_type -> FootResponse
	1,  // 41: FootBall.FootLiveLineup:output_type -> FootResponse
	1,  // 42: FootBall.FootPlayerCareer:output_type -> FootResponse
	1,  // 43: FootBall.FootTeamTransferYear:output_type -> FootResponse
	1,  // 44: FootBall.GetFootCheckExistence:output_type -> FootResponse
	1,  // 45: FootBall.FootFiltrationId:output_type -> FootResponse
	23, // [23:46] is the sub-list for method output_type
	0,  // [0:23] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_foot_server_proto_init() }
func file_foot_server_proto_init() {
	if File_foot_server_proto != nil {
		return
	}
	file_foot_match_request_proto_init()
	file_foot_season_list_proto_init()
	file_foot_odd_proto_init()
	file_foot_player_detail_proto_init()
	file_foot_match_comment_proto_init()
	file_foot_match_filtrate_proto_init()
	file_foot_team_detail_proto_init()
	file_foot_stand_tag_proto_init()
	file_foot_continent_country_tournament_proto_init()
	file_foot_team_match_proto_init()
	file_foot_lineup_proto_init()
	file_foot_team_stand_proto_init()
	file_foot_match_all_proto_init()
	file_foot_today_match_proto_init()
	file_foot_league_stand_proto_init()
	file_foot_team_transfer_proto_init()
	file_foot_player_stand_proto_init()
	file_foot_live_lineup_proto_init()
	file_foot_player_career_proto_init()
	file_foot_team_transfer_year_proto_init()
	file_check_foot_existence_proto_init()
	file_check_foot_filtration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_foot_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foot_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_foot_server_proto_goTypes,
		DependencyIndexes: file_foot_server_proto_depIdxs,
		MessageInfos:      file_foot_server_proto_msgTypes,
	}.Build()
	File_foot_server_proto = out.File
	file_foot_server_proto_rawDesc = nil
	file_foot_server_proto_goTypes = nil
	file_foot_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FootBallClient is the client API for FootBall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FootBallClient interface {
	//比赛对阵详情
	FootMatchAgainstDetail(ctx context.Context, in *FootMatchInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//指数列表
	GetMatchOddList(ctx context.Context, in *FootOddListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//指数数值明细
	GetMatchOddListDetail(ctx context.Context, in *FootOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//赛季列表
	GetFootSeasonList(ctx context.Context, in *FootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员详情
	FootPlayerDetail(ctx context.Context, in *FootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//文字直播
	FootMatchCommentList(ctx context.Context, in *FootMatchCommentRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//字段筛选
	GetFootMatchFiltrate(ctx context.Context, in *FootMatchFiltrateRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//各大洲下的国家下的联赛
	GetFootContinentCountryTournamentData(ctx context.Context, in *FootContinentCountryTournamentInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队详情
	FootTeamDetail(ctx context.Context, in *FootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 侧边栏标签
	FootStandTag(ctx context.Context, in *FootStandTagRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队比赛
	FootTeamMatch(ctx context.Context, in *FootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队阵容
	FootMatchTeamLineup(ctx context.Context, in *FootLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//全部比赛（即时，赛程，赛果）
	FootMatchList(ctx context.Context, in *FootMatchAllRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队榜单
	FootTeamStand(ctx context.Context, in *FootTeamStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队榜单
	FootTodayMatch(ctx context.Context, in *FootTodayMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//积分榜
	GetFootLeagueStand(ctx context.Context, in *FootLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 球队转会记录
	FootTeamTransfer(ctx context.Context, in *FootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员榜
	GetFootPlayerStand(ctx context.Context, in *FootPlayerStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//直播 - 球队阵容
	FootLiveLineup(ctx context.Context, in *FootLiveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员职业生涯
	FootPlayerCareer(ctx context.Context, in *FootPlayerCareerRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 球队转会年份
	FootTeamTransferYear(ctx context.Context, in *FootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//检测接口
	GetFootCheckExistence(ctx context.Context, in *CheckFootExistenceRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//检测id接口
	FootFiltrationId(ctx context.Context, in *FootFiltrationRequest, opts ...grpc.CallOption) (*FootResponse, error)
}

type footBallClient struct {
	cc grpc.ClientConnInterface
}

func NewFootBallClient(cc grpc.ClientConnInterface) FootBallClient {
	return &footBallClient{cc}
}

func (c *footBallClient) FootMatchAgainstDetail(ctx context.Context, in *FootMatchInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchAgainstDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetMatchOddList(ctx context.Context, in *FootOddListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetMatchOddList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetMatchOddListDetail(ctx context.Context, in *FootOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetMatchOddListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootSeasonList(ctx context.Context, in *FootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootSeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootPlayerDetail(ctx context.Context, in *FootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootPlayerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchCommentList(ctx context.Context, in *FootMatchCommentRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootMatchFiltrate(ctx context.Context, in *FootMatchFiltrateRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootMatchFiltrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootContinentCountryTournamentData(ctx context.Context, in *FootContinentCountryTournamentInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootContinentCountryTournamentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamDetail(ctx context.Context, in *FootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootStandTag(ctx context.Context, in *FootStandTagRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootStandTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamMatch(ctx context.Context, in *FootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchTeamLineup(ctx context.Context, in *FootLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchTeamLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchList(ctx context.Context, in *FootMatchAllRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamStand(ctx context.Context, in *FootTeamStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTodayMatch(ctx context.Context, in *FootTodayMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTodayMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootLeagueStand(ctx context.Context, in *FootLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootLeagueStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamTransfer(ctx context.Context, in *FootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootPlayerStand(ctx context.Context, in *FootPlayerStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootPlayerStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootLiveLineup(ctx context.Context, in *FootLiveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootLiveLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootPlayerCareer(ctx context.Context, in *FootPlayerCareerRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootPlayerCareer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamTransferYear(ctx context.Context, in *FootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamTransferYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootCheckExistence(ctx context.Context, in *CheckFootExistenceRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootCheckExistence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootFiltrationId(ctx context.Context, in *FootFiltrationRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootFiltrationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FootBallServer is the server API for FootBall service.
type FootBallServer interface {
	//比赛对阵详情
	FootMatchAgainstDetail(context.Context, *FootMatchInfoRequest) (*FootResponse, error)
	//指数列表
	GetMatchOddList(context.Context, *FootOddListRequest) (*FootResponse, error)
	//指数数值明细
	GetMatchOddListDetail(context.Context, *FootOddDetailRequest) (*FootResponse, error)
	//赛季列表
	GetFootSeasonList(context.Context, *FootSeasonListRequest) (*FootResponse, error)
	//球员详情
	FootPlayerDetail(context.Context, *FootPlayerInfoRequest) (*FootResponse, error)
	//文字直播
	FootMatchCommentList(context.Context, *FootMatchCommentRequest) (*FootResponse, error)
	//字段筛选
	GetFootMatchFiltrate(context.Context, *FootMatchFiltrateRequest) (*FootResponse, error)
	//各大洲下的国家下的联赛
	GetFootContinentCountryTournamentData(context.Context, *FootContinentCountryTournamentInfoRequest) (*FootResponse, error)
	//球队详情
	FootTeamDetail(context.Context, *FootTeamDetailRequest) (*FootResponse, error)
	// 侧边栏标签
	FootStandTag(context.Context, *FootStandTagRequest) (*FootResponse, error)
	//球队比赛
	FootTeamMatch(context.Context, *FootTeamMatchRequest) (*FootResponse, error)
	//球队阵容
	FootMatchTeamLineup(context.Context, *FootLineupRequest) (*FootResponse, error)
	//全部比赛（即时，赛程，赛果）
	FootMatchList(context.Context, *FootMatchAllRequest) (*FootResponse, error)
	//球队榜单
	FootTeamStand(context.Context, *FootTeamStandRequest) (*FootResponse, error)
	//球队榜单
	FootTodayMatch(context.Context, *FootTodayMatchRequest) (*FootResponse, error)
	//积分榜
	GetFootLeagueStand(context.Context, *FootLeagueStandRequest) (*FootResponse, error)
	// 球队转会记录
	FootTeamTransfer(context.Context, *FootTeamTransferRequest) (*FootResponse, error)
	//球员榜
	GetFootPlayerStand(context.Context, *FootPlayerStandRequest) (*FootResponse, error)
	//直播 - 球队阵容
	FootLiveLineup(context.Context, *FootLiveLineupRequest) (*FootResponse, error)
	//球员职业生涯
	FootPlayerCareer(context.Context, *FootPlayerCareerRequest) (*FootResponse, error)
	// 球队转会年份
	FootTeamTransferYear(context.Context, *FootTeamTransferYearRequest) (*FootResponse, error)
	//检测接口
	GetFootCheckExistence(context.Context, *CheckFootExistenceRequest) (*FootResponse, error)
	//检测id接口
	FootFiltrationId(context.Context, *FootFiltrationRequest) (*FootResponse, error)
}

// UnimplementedFootBallServer can be embedded to have forward compatible implementations.
type UnimplementedFootBallServer struct {
}

func (*UnimplementedFootBallServer) FootMatchAgainstDetail(context.Context, *FootMatchInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchAgainstDetail not implemented")
}
func (*UnimplementedFootBallServer) GetMatchOddList(context.Context, *FootOddListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddList not implemented")
}
func (*UnimplementedFootBallServer) GetMatchOddListDetail(context.Context, *FootOddDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddListDetail not implemented")
}
func (*UnimplementedFootBallServer) GetFootSeasonList(context.Context, *FootSeasonListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootSeasonList not implemented")
}
func (*UnimplementedFootBallServer) FootPlayerDetail(context.Context, *FootPlayerInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootPlayerDetail not implemented")
}
func (*UnimplementedFootBallServer) FootMatchCommentList(context.Context, *FootMatchCommentRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchCommentList not implemented")
}
func (*UnimplementedFootBallServer) GetFootMatchFiltrate(context.Context, *FootMatchFiltrateRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootMatchFiltrate not implemented")
}
func (*UnimplementedFootBallServer) GetFootContinentCountryTournamentData(context.Context, *FootContinentCountryTournamentInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootContinentCountryTournamentData not implemented")
}
func (*UnimplementedFootBallServer) FootTeamDetail(context.Context, *FootTeamDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamDetail not implemented")
}
func (*UnimplementedFootBallServer) FootStandTag(context.Context, *FootStandTagRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootStandTag not implemented")
}
func (*UnimplementedFootBallServer) FootTeamMatch(context.Context, *FootTeamMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamMatch not implemented")
}
func (*UnimplementedFootBallServer) FootMatchTeamLineup(context.Context, *FootLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchTeamLineup not implemented")
}
func (*UnimplementedFootBallServer) FootMatchList(context.Context, *FootMatchAllRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchList not implemented")
}
func (*UnimplementedFootBallServer) FootTeamStand(context.Context, *FootTeamStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamStand not implemented")
}
func (*UnimplementedFootBallServer) FootTodayMatch(context.Context, *FootTodayMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTodayMatch not implemented")
}
func (*UnimplementedFootBallServer) GetFootLeagueStand(context.Context, *FootLeagueStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootLeagueStand not implemented")
}
func (*UnimplementedFootBallServer) FootTeamTransfer(context.Context, *FootTeamTransferRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamTransfer not implemented")
}
func (*UnimplementedFootBallServer) GetFootPlayerStand(context.Context, *FootPlayerStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootPlayerStand not implemented")
}
func (*UnimplementedFootBallServer) FootLiveLineup(context.Context, *FootLiveLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootLiveLineup not implemented")
}
func (*UnimplementedFootBallServer) FootPlayerCareer(context.Context, *FootPlayerCareerRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootPlayerCareer not implemented")
}
func (*UnimplementedFootBallServer) FootTeamTransferYear(context.Context, *FootTeamTransferYearRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamTransferYear not implemented")
}
func (*UnimplementedFootBallServer) GetFootCheckExistence(context.Context, *CheckFootExistenceRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootCheckExistence not implemented")
}
func (*UnimplementedFootBallServer) FootFiltrationId(context.Context, *FootFiltrationRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootFiltrationId not implemented")
}

func RegisterFootBallServer(s *grpc.Server, srv FootBallServer) {
	s.RegisterService(&_FootBall_serviceDesc, srv)
}

func _FootBall_FootMatchAgainstDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchAgainstDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchAgainstDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchAgainstDetail(ctx, req.(*FootMatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetMatchOddList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootOddListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetMatchOddList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetMatchOddList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetMatchOddList(ctx, req.(*FootOddListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetMatchOddListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootOddDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetMatchOddListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetMatchOddListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetMatchOddListDetail(ctx, req.(*FootOddDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootSeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootSeasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootSeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootSeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootSeasonList(ctx, req.(*FootSeasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootPlayerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootPlayerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootPlayerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootPlayerDetail(ctx, req.(*FootPlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchCommentList(ctx, req.(*FootMatchCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootMatchFiltrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchFiltrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootMatchFiltrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootMatchFiltrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootMatchFiltrate(ctx, req.(*FootMatchFiltrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootContinentCountryTournamentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootContinentCountryTournamentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootContinentCountryTournamentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootContinentCountryTournamentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootContinentCountryTournamentData(ctx, req.(*FootContinentCountryTournamentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamDetail(ctx, req.(*FootTeamDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootStandTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootStandTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootStandTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootStandTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootStandTag(ctx, req.(*FootStandTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamMatch(ctx, req.(*FootTeamMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchTeamLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchTeamLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchTeamLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchTeamLineup(ctx, req.(*FootLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchList(ctx, req.(*FootMatchAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamStand(ctx, req.(*FootTeamStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTodayMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTodayMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTodayMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTodayMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTodayMatch(ctx, req.(*FootTodayMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootLeagueStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLeagueStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootLeagueStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootLeagueStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootLeagueStand(ctx, req.(*FootLeagueStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamTransfer(ctx, req.(*FootTeamTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootPlayerStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootPlayerStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootPlayerStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootPlayerStand(ctx, req.(*FootPlayerStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootLiveLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLiveLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootLiveLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootLiveLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootLiveLineup(ctx, req.(*FootLiveLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootPlayerCareer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerCareerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootPlayerCareer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootPlayerCareer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootPlayerCareer(ctx, req.(*FootPlayerCareerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamTransferYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamTransferYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamTransferYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamTransferYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamTransferYear(ctx, req.(*FootTeamTransferYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootCheckExistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFootExistenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootCheckExistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootCheckExistence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootCheckExistence(ctx, req.(*CheckFootExistenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootFiltrationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootFiltrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootFiltrationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootFiltrationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootFiltrationId(ctx, req.(*FootFiltrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FootBall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FootBall",
	HandlerType: (*FootBallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FootMatchAgainstDetail",
			Handler:    _FootBall_FootMatchAgainstDetail_Handler,
		},
		{
			MethodName: "GetMatchOddList",
			Handler:    _FootBall_GetMatchOddList_Handler,
		},
		{
			MethodName: "GetMatchOddListDetail",
			Handler:    _FootBall_GetMatchOddListDetail_Handler,
		},
		{
			MethodName: "GetFootSeasonList",
			Handler:    _FootBall_GetFootSeasonList_Handler,
		},
		{
			MethodName: "FootPlayerDetail",
			Handler:    _FootBall_FootPlayerDetail_Handler,
		},
		{
			MethodName: "FootMatchCommentList",
			Handler:    _FootBall_FootMatchCommentList_Handler,
		},
		{
			MethodName: "GetFootMatchFiltrate",
			Handler:    _FootBall_GetFootMatchFiltrate_Handler,
		},
		{
			MethodName: "GetFootContinentCountryTournamentData",
			Handler:    _FootBall_GetFootContinentCountryTournamentData_Handler,
		},
		{
			MethodName: "FootTeamDetail",
			Handler:    _FootBall_FootTeamDetail_Handler,
		},
		{
			MethodName: "FootStandTag",
			Handler:    _FootBall_FootStandTag_Handler,
		},
		{
			MethodName: "FootTeamMatch",
			Handler:    _FootBall_FootTeamMatch_Handler,
		},
		{
			MethodName: "FootMatchTeamLineup",
			Handler:    _FootBall_FootMatchTeamLineup_Handler,
		},
		{
			MethodName: "FootMatchList",
			Handler:    _FootBall_FootMatchList_Handler,
		},
		{
			MethodName: "FootTeamStand",
			Handler:    _FootBall_FootTeamStand_Handler,
		},
		{
			MethodName: "FootTodayMatch",
			Handler:    _FootBall_FootTodayMatch_Handler,
		},
		{
			MethodName: "GetFootLeagueStand",
			Handler:    _FootBall_GetFootLeagueStand_Handler,
		},
		{
			MethodName: "FootTeamTransfer",
			Handler:    _FootBall_FootTeamTransfer_Handler,
		},
		{
			MethodName: "GetFootPlayerStand",
			Handler:    _FootBall_GetFootPlayerStand_Handler,
		},
		{
			MethodName: "FootLiveLineup",
			Handler:    _FootBall_FootLiveLineup_Handler,
		},
		{
			MethodName: "FootPlayerCareer",
			Handler:    _FootBall_FootPlayerCareer_Handler,
		},
		{
			MethodName: "FootTeamTransferYear",
			Handler:    _FootBall_FootTeamTransferYear_Handler,
		},
		{
			MethodName: "GetFootCheckExistence",
			Handler:    _FootBall_GetFootCheckExistence_Handler,
		},
		{
			MethodName: "FootFiltrationId",
			Handler:    _FootBall_FootFiltrationId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foot_server.proto",
}
