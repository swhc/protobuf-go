// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: foot_server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//请求格式
type FootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method   string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`     //请求的方法
	Params   []byte `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`     //请求的参数
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"` //请求语言
}

func (x *FootRequest) Reset() {
	*x = FootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootRequest) ProtoMessage() {}

func (x *FootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foot_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootRequest.ProtoReflect.Descriptor instead.
func (*FootRequest) Descriptor() ([]byte, []int) {
	return file_foot_server_proto_rawDescGZIP(), []int{0}
}

func (x *FootRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *FootRequest) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FootRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type FootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` //返回结果
}

func (x *FootResponse) Reset() {
	*x = FootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootResponse) ProtoMessage() {}

func (x *FootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foot_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootResponse.ProtoReflect.Descriptor instead.
func (*FootResponse) Descriptor() ([]byte, []int) {
	return file_foot_server_proto_rawDescGZIP(), []int{1}
}

func (x *FootResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_foot_server_proto protoreflect.FileDescriptor

var file_foot_server_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x65,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6f, 0x64, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x65, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x77, 0x65, 0x62, 0x5f,
	0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x77, 0x65,
	0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x77, 0x65, 0x62, 0x5f, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x6f, 0x6f, 0x74,
	0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x6c,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73,
	0x71, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x68, 0x32, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x66,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x49, 0x6e, 0x63, 0x72, 0x49, 0x64, 0x32, 0x53, 0x75, 0x70,
	0x49, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xbc, 0x2c, 0x0a, 0x08, 0x46, 0x6f, 0x6f, 0x74,
	0x42, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x16, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x15,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x64, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4f,
	0x64, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x14, 0x46,
	0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x46, 0x6f,
	0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74,
	0x54, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0c, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x65, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x14, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x10, 0x46, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x15, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x6f, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x6f, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32,
	0x12, 0x1b, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x75, 0x73, 0x12, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x13, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x4f, 0x64, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x57, 0x65, 0x62, 0x4f, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x17, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62,
	0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x57, 0x65, 0x62,
	0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62,
	0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1c, 0x2e, 0x57,
	0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x57,
	0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x18, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x19, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79,
	0x12, 0x21, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x1e,
	0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x57, 0x65, 0x62, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1e, 0x2e, 0x57,
	0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x12, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1e,
	0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b,
	0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13,
	0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x57, 0x65, 0x62, 0x4f, 0x64, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10,
	0x57, 0x65, 0x62, 0x4f, 0x64, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x4f, 0x55,
	0x12, 0x18, 0x2e, 0x57, 0x65, 0x62, 0x4f, 0x64, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x70, 0x4f, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x57,
	0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x12, 0x1a, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x1d, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x25, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1c, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x1e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x61, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1c, 0x57, 0x65, 0x62,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x1a, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x53, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x57,
	0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0c, 0x53, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x2e,
	0x53, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x53, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x14, 0x46,
	0x6f, 0x6f, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x11, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x12, 0x15, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x46,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x14, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x72, 0x49, 0x64, 0x32, 0x53, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x49, 0x64, 0x32, 0x53, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foot_server_proto_rawDescOnce sync.Once
	file_foot_server_proto_rawDescData = file_foot_server_proto_rawDesc
)

func file_foot_server_proto_rawDescGZIP() []byte {
	file_foot_server_proto_rawDescOnce.Do(func() {
		file_foot_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_foot_server_proto_rawDescData)
	})
	return file_foot_server_proto_rawDescData
}

var file_foot_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_foot_server_proto_goTypes = []interface{}{
	(*FootRequest)(nil),                               // 0: FootRequest
	(*FootResponse)(nil),                              // 1: FootResponse
	(*FootMatchInfoRequest)(nil),                      // 2: FootMatchInfoRequest
	(*FootOddListRequest)(nil),                        // 3: FootOddListRequest
	(*FootOddDetailRequest)(nil),                      // 4: FootOddDetailRequest
	(*FootSeasonListRequest)(nil),                     // 5: FootSeasonListRequest
	(*FootPlayerInfoRequest)(nil),                     // 6: FootPlayerInfoRequest
	(*FootMatchCommentRequest)(nil),                   // 7: FootMatchCommentRequest
	(*FootMatchFiltrateRequest)(nil),                  // 8: FootMatchFiltrateRequest
	(*FootContinentCountryTournamentInfoRequest)(nil), // 9: FootContinentCountryTournamentInfoRequest
	(*FootTeamDetailRequest)(nil),                     // 10: FootTeamDetailRequest
	(*FootStandTagRequest)(nil),                       // 11: FootStandTagRequest
	(*FootTeamMatchRequest)(nil),                      // 12: FootTeamMatchRequest
	(*FootLineupRequest)(nil),                         // 13: FootLineupRequest
	(*FootTeamStandRequest)(nil),                      // 14: FootTeamStandRequest
	(*FootTodayMatchRequest)(nil),                     // 15: FootTodayMatchRequest
	(*FootLeagueStandRequest)(nil),                    // 16: FootLeagueStandRequest
	(*FootTeamTransferRequest)(nil),                   // 17: FootTeamTransferRequest
	(*FootPlayerStandRequest)(nil),                    // 18: FootPlayerStandRequest
	(*FootLiveLineupRequest)(nil),                     // 19: FootLiveLineupRequest
	(*FootLiveStatRequest)(nil),                       // 20: FootLiveStatRequest
	(*FootPlayerCareerRequest)(nil),                   // 21: FootPlayerCareerRequest
	(*FootTeamTransferYearRequest)(nil),               // 22: FootTeamTransferYearRequest
	(*CheckFootExistenceRequest)(nil),                 // 23: CheckFootExistenceRequest
	(*FootFiltrationRequest)(nil),                     // 24: FootFiltrationRequest
	(*DataTypeCountRequest)(nil),                      // 25: DataTypeCountRequest
	(*CheckFootDataRequest)(nil),                      // 26: CheckFootDataRequest
	(*FootMatchRealTimeRequest)(nil),                  // 27: FootMatchRealTimeRequest
	(*FootMatchRealTimeRequestV2)(nil),                // 28: FootMatchRealTimeRequestV2
	(*FootOddFilterRequest)(nil),                      // 29: FootOddFilterRequest
	(*FootMatchListRequest)(nil),                      // 30: FootMatchListRequest
	(*FootMatchPlusRequest)(nil),                      // 31: FootMatchPlusRequest
	(*FootBaseDataRequest)(nil),                       // 32: FootBaseDataRequest
	(*FootMatchInProgressRequest)(nil),                // 33: FootMatchInProgressRequest
	(*FootDataPromotionRequest)(nil),                  // 34: FootDataPromotionRequest
	(*FootLineupAverageDataRequest)(nil),              // 35: FootLineupAverageDataRequest
	(*FootLineupMatchDataRequest)(nil),                // 36: FootLineupMatchDataRequest
	(*FootQuestionRequest)(nil),                       // 37: FootQuestionRequest
	(*WebFootSeasonListRequest)(nil),                  // 38: WebFootSeasonListRequest
	(*WebOddListRequest)(nil),                         // 39: WebOddListRequest
	(*FootMatchModifyRequest)(nil),                    // 40: FootMatchModifyRequest
	(*WebFootTeamDetailRequest)(nil),                  // 41: WebFootTeamDetailRequest
	(*WebFootTeamMatchRequest)(nil),                   // 42: WebFootTeamMatchRequest
	(*WebFootTeamPlayerRequest)(nil),                  // 43: WebFootTeamPlayerRequest
	(*WebFootTeamTransferRequest)(nil),                // 44: WebFootTeamTransferRequest
	(*WebFootTeamTransferYearRequest)(nil),            // 45: WebFootTeamTransferYearRequest
	(*WebFootTeamStatsMenuRequest)(nil),               // 46: WebFootTeamStatsMenuRequest
	(*WebFootTeamStatsRequest)(nil),                   // 47: WebFootTeamStatsRequest
	(*WebFootTeamSeasonListRequest)(nil),              // 48: WebFootTeamSeasonListRequest
	(*WebFootMatchListRequest)(nil),                   // 49: WebFootMatchListRequest
	(*WebFootMatchMonthRequest)(nil),                  // 50: WebFootMatchMonthRequest
	(*WebFootTeamTransferInjuryRequest)(nil),          // 51: WebFootTeamTransferInjuryRequest
	(*WebFootMatchLastLineupRequest)(nil),             // 52: WebFootMatchLastLineupRequest
	(*WebFootPlayerInfoRequest)(nil),                  // 53: WebFootPlayerInfoRequest
	(*WebFootLeagueDetailRequest)(nil),                // 54: WebFootLeagueDetailRequest
	(*WebLeagueStandRequest)(nil),                     // 55: WebLeagueStandRequest
	(*WebFootLeagueStatsMenuRequest)(nil),             // 56: WebFootLeagueStatsMenuRequest
	(*WebFootLeagueTeamRequest)(nil),                  // 57: WebFootLeagueTeamRequest
	(*WebFootLeagueStatsRequest)(nil),                 // 58: WebFootLeagueStatsRequest
	(*WebFootMatchDetailRequest)(nil),                 // 59: WebFootMatchDetailRequest
	(*WebFootContinentLeagueRequest)(nil),             // 60: WebFootContinentLeagueRequest
	(*WebFootMatchCountRequest)(nil),                  // 61: WebFootMatchCountRequest
	(*WebFootMatchIncidentRequest)(nil),               // 62: WebFootMatchIncidentRequest
	(*WebFootInstantMatchRequest)(nil),                // 63: WebFootInstantMatchRequest
	(*WebFootLeagueFilterRequest)(nil),                // 64: WebFootLeagueFilterRequest
	(*WebOddDetailRequest)(nil),                       // 65: WebOddDetailRequest
	(*WebOddHandicapOURequest)(nil),                   // 66: WebOddHandicapOURequest
	(*WebFootMatchLineupRequest)(nil),                 // 67: WebFootMatchLineupRequest
	(*WebFootMatchTeamHandsOnRecordRequest)(nil),      // 68: WebFootMatchTeamHandsOnRecordRequest
	(*WebFootMatchTeamRecentRecordRequest)(nil),       // 69: WebFootMatchTeamRecentRecordRequest
	(*WebFootMatchTeamFutureScheduleRequest)(nil),     // 70: WebFootMatchTeamFutureScheduleRequest
	(*WebFootLiveLineupReplacementRequest)(nil),       // 71: WebFootLiveLineupReplacementRequest
	(*WebFootLiveLineupInjuryRequest)(nil),            // 72: WebFootLiveLineupInjuryRequest
	(*WebFootLineupSameFormationRequest)(nil),         // 73: WebFootLineupSameFormationRequest
	(*WebFootLineupAverageDataRequest)(nil),           // 74: WebFootLineupAverageDataRequest
	(*WebFootReserveLineupRequest)(nil),               // 75: WebFootReserveLineupRequest
	(*FutureMatchCountRequest)(nil),                   // 76: FutureMatchCountRequest
	(*FootMatchDetailAllRequest)(nil),                 // 77: FootMatchDetailAllRequest
	(*FootMatchFinishRequest)(nil),                    // 78: FootMatchFinishRequest
	(*FavoriteMatchRequest)(nil),                      // 79: FavoriteMatchRequest
	(*CheckMatchStatusRequest)(nil),                   // 80: CheckMatchStatusRequest
	(*SqliteDbTimeRequest)(nil),                       // 81: SqliteDbTimeRequest
	(*SqliteDbDataRequest)(nil),                       // 82: SqliteDbDataRequest
	(*TournamentSearchRequest)(nil),                   // 83: TournamentSearchRequest
	(*RealEventLiveRequest)(nil),                      // 84: RealEventLiveRequest
	(*RealEventAllRequest)(nil),                       // 85: RealEventAllRequest
	(*MatchFilterRequest)(nil),                        // 86: MatchFilterRequest
	(*IncrId2SupIdRequest)(nil),                       // 87: IncrId2SupIdRequest
	(*FootMatchInProgressResponse)(nil),               // 88: FootMatchInProgressResponse
}
var file_foot_server_proto_depIdxs = []int32{
	2,  // 0: FootBall.FootMatchAgainstDetail:input_type -> FootMatchInfoRequest
	3,  // 1: FootBall.GetMatchOddList:input_type -> FootOddListRequest
	4,  // 2: FootBall.GetMatchOddListDetail:input_type -> FootOddDetailRequest
	5,  // 3: FootBall.GetFootSeasonList:input_type -> FootSeasonListRequest
	6,  // 4: FootBall.FootPlayerDetail:input_type -> FootPlayerInfoRequest
	7,  // 5: FootBall.FootMatchCommentList:input_type -> FootMatchCommentRequest
	8,  // 6: FootBall.GetFootMatchFiltrate:input_type -> FootMatchFiltrateRequest
	9,  // 7: FootBall.GetFootContinentCountryTournamentData:input_type -> FootContinentCountryTournamentInfoRequest
	10, // 8: FootBall.FootTeamDetail:input_type -> FootTeamDetailRequest
	11, // 9: FootBall.FootStandTag:input_type -> FootStandTagRequest
	12, // 10: FootBall.FootTeamMatch:input_type -> FootTeamMatchRequest
	13, // 11: FootBall.FootMatchTeamLineup:input_type -> FootLineupRequest
	14, // 12: FootBall.FootTeamStand:input_type -> FootTeamStandRequest
	15, // 13: FootBall.FootTodayMatch:input_type -> FootTodayMatchRequest
	16, // 14: FootBall.GetFootLeagueStand:input_type -> FootLeagueStandRequest
	17, // 15: FootBall.FootTeamTransfer:input_type -> FootTeamTransferRequest
	18, // 16: FootBall.GetFootPlayerStand:input_type -> FootPlayerStandRequest
	19, // 17: FootBall.FootLiveLineup:input_type -> FootLiveLineupRequest
	20, // 18: FootBall.FootLiveStat:input_type -> FootLiveStatRequest
	21, // 19: FootBall.FootPlayerCareer:input_type -> FootPlayerCareerRequest
	22, // 20: FootBall.FootTeamTransferYear:input_type -> FootTeamTransferYearRequest
	23, // 21: FootBall.GetFootCheckExistence:input_type -> CheckFootExistenceRequest
	24, // 22: FootBall.FootFiltrationId:input_type -> FootFiltrationRequest
	25, // 23: FootBall.GetDataTypeCount:input_type -> DataTypeCountRequest
	26, // 24: FootBall.CheckFootData:input_type -> CheckFootDataRequest
	27, // 25: FootBall.FootRealTime:input_type -> FootMatchRealTimeRequest
	28, // 26: FootBall.FootRealTimeV2:input_type -> FootMatchRealTimeRequestV2
	29, // 27: FootBall.FootOddsFilter:input_type -> FootOddFilterRequest
	30, // 28: FootBall.FootMatchList:input_type -> FootMatchListRequest
	31, // 29: FootBall.FootMatchPlus:input_type -> FootMatchPlusRequest
	32, // 30: FootBall.FootMatchBase:input_type -> FootBaseDataRequest
	33, // 31: FootBall.FootMatchInProgress:input_type -> FootMatchInProgressRequest
	34, // 32: FootBall.FootDataPromotion:input_type -> FootDataPromotionRequest
	35, // 33: FootBall.FootLineupAverageData:input_type -> FootLineupAverageDataRequest
	36, // 34: FootBall.FootLineupMatchData:input_type -> FootLineupMatchDataRequest
	37, // 35: FootBall.FootQuestionMatch:input_type -> FootQuestionRequest
	38, // 36: FootBall.WebFootSeasonList:input_type -> WebFootSeasonListRequest
	39, // 37: FootBall.GetWebOddList:input_type -> WebOddListRequest
	40, // 38: FootBall.FootMatchModify:input_type -> FootMatchModifyRequest
	41, // 39: FootBall.WebFootTeamDetail:input_type -> WebFootTeamDetailRequest
	42, // 40: FootBall.WebFootTeamMatch:input_type -> WebFootTeamMatchRequest
	43, // 41: FootBall.WebFootTeamPlayer:input_type -> WebFootTeamPlayerRequest
	44, // 42: FootBall.WebFootTransfer:input_type -> WebFootTeamTransferRequest
	45, // 43: FootBall.WebFootTeamTransferYear:input_type -> WebFootTeamTransferYearRequest
	46, // 44: FootBall.WebFootTeamStatsMenu:input_type -> WebFootTeamStatsMenuRequest
	47, // 45: FootBall.WebFootTeamStats:input_type -> WebFootTeamStatsRequest
	48, // 46: FootBall.WebFootTeamSeasonList:input_type -> WebFootTeamSeasonListRequest
	49, // 47: FootBall.WebFootMatchList:input_type -> WebFootMatchListRequest
	50, // 48: FootBall.WebFootMatchMonth:input_type -> WebFootMatchMonthRequest
	51, // 49: FootBall.WebFootTeamTransferInjury:input_type -> WebFootTeamTransferInjuryRequest
	52, // 50: FootBall.WebFootMatchLastLineup:input_type -> WebFootMatchLastLineupRequest
	53, // 51: FootBall.WebFootPlayerDetail:input_type -> WebFootPlayerInfoRequest
	54, // 52: FootBall.WebFootLeagueDetail:input_type -> WebFootLeagueDetailRequest
	55, // 53: FootBall.WebLeagueStand:input_type -> WebLeagueStandRequest
	56, // 54: FootBall.WebFootLeagueStatsMenu:input_type -> WebFootLeagueStatsMenuRequest
	57, // 55: FootBall.WebFootLeagueTeam:input_type -> WebFootLeagueTeamRequest
	58, // 56: FootBall.WebFootLeagueStats:input_type -> WebFootLeagueStatsRequest
	59, // 57: FootBall.WebFootMatchDetail:input_type -> WebFootMatchDetailRequest
	60, // 58: FootBall.WebFootContinentLeague:input_type -> WebFootContinentLeagueRequest
	61, // 59: FootBall.WebFootMatchCount:input_type -> WebFootMatchCountRequest
	62, // 60: FootBall.WebFootMatchIncident:input_type -> WebFootMatchIncidentRequest
	63, // 61: FootBall.WebFootInstantMatch:input_type -> WebFootInstantMatchRequest
	64, // 62: FootBall.WebFootLeagueFilter:input_type -> WebFootLeagueFilterRequest
	65, // 63: FootBall.WebFootOddDetail:input_type -> WebOddDetailRequest
	66, // 64: FootBall.WebOddHandicapOU:input_type -> WebOddHandicapOURequest
	67, // 65: FootBall.WebFootMatchLineup:input_type -> WebFootMatchLineupRequest
	68, // 66: FootBall.WebFootMatchTeamHandsOnRecord:input_type -> WebFootMatchTeamHandsOnRecordRequest
	69, // 67: FootBall.WebFootMatchTeamRecentRecord:input_type -> WebFootMatchTeamRecentRecordRequest
	70, // 68: FootBall.WebFootMatchTeamFutureSchedule:input_type -> WebFootMatchTeamFutureScheduleRequest
	71, // 69: FootBall.WebFootLiveLineupReplacement:input_type -> WebFootLiveLineupReplacementRequest
	72, // 70: FootBall.WebFootLiveLineupInjury:input_type -> WebFootLiveLineupInjuryRequest
	73, // 71: FootBall.WebFootLineupSameFormation:input_type -> WebFootLineupSameFormationRequest
	74, // 72: FootBall.WebFootLineupAverageData:input_type -> WebFootLineupAverageDataRequest
	75, // 73: FootBall.WebFootReserveLineup:input_type -> WebFootReserveLineupRequest
	76, // 74: FootBall.FutureMatchCount:input_type -> FutureMatchCountRequest
	77, // 75: FootBall.FootMatchDetailAll:input_type -> FootMatchDetailAllRequest
	78, // 76: FootBall.MatchFinish:input_type -> FootMatchFinishRequest
	79, // 77: FootBall.FavoriteMatchList:input_type -> FavoriteMatchRequest
	80, // 78: FootBall.CheckMatchStatus:input_type -> CheckMatchStatusRequest
	81, // 79: FootBall.SqliteDbTime:input_type -> SqliteDbTimeRequest
	82, // 80: FootBall.SqliteDbData:input_type -> SqliteDbDataRequest
	83, // 81: FootBall.FootTournamentSearch:input_type -> TournamentSearchRequest
	84, // 82: FootBall.FootRealEventLive:input_type -> RealEventLiveRequest
	85, // 83: FootBall.FootRealEventAll:input_type -> RealEventAllRequest
	86, // 84: FootBall.FootMatchFilter:input_type -> MatchFilterRequest
	87, // 85: FootBall.IncrId2SupId:input_type -> IncrId2SupIdRequest
	1,  // 86: FootBall.FootMatchAgainstDetail:output_type -> FootResponse
	1,  // 87: FootBall.GetMatchOddList:output_type -> FootResponse
	1,  // 88: FootBall.GetMatchOddListDetail:output_type -> FootResponse
	1,  // 89: FootBall.GetFootSeasonList:output_type -> FootResponse
	1,  // 90: FootBall.FootPlayerDetail:output_type -> FootResponse
	1,  // 91: FootBall.FootMatchCommentList:output_type -> FootResponse
	1,  // 92: FootBall.GetFootMatchFiltrate:output_type -> FootResponse
	1,  // 93: FootBall.GetFootContinentCountryTournamentData:output_type -> FootResponse
	1,  // 94: FootBall.FootTeamDetail:output_type -> FootResponse
	1,  // 95: FootBall.FootStandTag:output_type -> FootResponse
	1,  // 96: FootBall.FootTeamMatch:output_type -> FootResponse
	1,  // 97: FootBall.FootMatchTeamLineup:output_type -> FootResponse
	1,  // 98: FootBall.FootTeamStand:output_type -> FootResponse
	1,  // 99: FootBall.FootTodayMatch:output_type -> FootResponse
	1,  // 100: FootBall.GetFootLeagueStand:output_type -> FootResponse
	1,  // 101: FootBall.FootTeamTransfer:output_type -> FootResponse
	1,  // 102: FootBall.GetFootPlayerStand:output_type -> FootResponse
	1,  // 103: FootBall.FootLiveLineup:output_type -> FootResponse
	1,  // 104: FootBall.FootLiveStat:output_type -> FootResponse
	1,  // 105: FootBall.FootPlayerCareer:output_type -> FootResponse
	1,  // 106: FootBall.FootTeamTransferYear:output_type -> FootResponse
	1,  // 107: FootBall.GetFootCheckExistence:output_type -> FootResponse
	1,  // 108: FootBall.FootFiltrationId:output_type -> FootResponse
	1,  // 109: FootBall.GetDataTypeCount:output_type -> FootResponse
	1,  // 110: FootBall.CheckFootData:output_type -> FootResponse
	1,  // 111: FootBall.FootRealTime:output_type -> FootResponse
	1,  // 112: FootBall.FootRealTimeV2:output_type -> FootResponse
	1,  // 113: FootBall.FootOddsFilter:output_type -> FootResponse
	1,  // 114: FootBall.FootMatchList:output_type -> FootResponse
	1,  // 115: FootBall.FootMatchPlus:output_type -> FootResponse
	1,  // 116: FootBall.FootMatchBase:output_type -> FootResponse
	88, // 117: FootBall.FootMatchInProgress:output_type -> FootMatchInProgressResponse
	1,  // 118: FootBall.FootDataPromotion:output_type -> FootResponse
	1,  // 119: FootBall.FootLineupAverageData:output_type -> FootResponse
	1,  // 120: FootBall.FootLineupMatchData:output_type -> FootResponse
	1,  // 121: FootBall.FootQuestionMatch:output_type -> FootResponse
	1,  // 122: FootBall.WebFootSeasonList:output_type -> FootResponse
	1,  // 123: FootBall.GetWebOddList:output_type -> FootResponse
	1,  // 124: FootBall.FootMatchModify:output_type -> FootResponse
	1,  // 125: FootBall.WebFootTeamDetail:output_type -> FootResponse
	1,  // 126: FootBall.WebFootTeamMatch:output_type -> FootResponse
	1,  // 127: FootBall.WebFootTeamPlayer:output_type -> FootResponse
	1,  // 128: FootBall.WebFootTransfer:output_type -> FootResponse
	1,  // 129: FootBall.WebFootTeamTransferYear:output_type -> FootResponse
	1,  // 130: FootBall.WebFootTeamStatsMenu:output_type -> FootResponse
	1,  // 131: FootBall.WebFootTeamStats:output_type -> FootResponse
	1,  // 132: FootBall.WebFootTeamSeasonList:output_type -> FootResponse
	1,  // 133: FootBall.WebFootMatchList:output_type -> FootResponse
	1,  // 134: FootBall.WebFootMatchMonth:output_type -> FootResponse
	1,  // 135: FootBall.WebFootTeamTransferInjury:output_type -> FootResponse
	1,  // 136: FootBall.WebFootMatchLastLineup:output_type -> FootResponse
	1,  // 137: FootBall.WebFootPlayerDetail:output_type -> FootResponse
	1,  // 138: FootBall.WebFootLeagueDetail:output_type -> FootResponse
	1,  // 139: FootBall.WebLeagueStand:output_type -> FootResponse
	1,  // 140: FootBall.WebFootLeagueStatsMenu:output_type -> FootResponse
	1,  // 141: FootBall.WebFootLeagueTeam:output_type -> FootResponse
	1,  // 142: FootBall.WebFootLeagueStats:output_type -> FootResponse
	1,  // 143: FootBall.WebFootMatchDetail:output_type -> FootResponse
	1,  // 144: FootBall.WebFootContinentLeague:output_type -> FootResponse
	1,  // 145: FootBall.WebFootMatchCount:output_type -> FootResponse
	1,  // 146: FootBall.WebFootMatchIncident:output_type -> FootResponse
	1,  // 147: FootBall.WebFootInstantMatch:output_type -> FootResponse
	1,  // 148: FootBall.WebFootLeagueFilter:output_type -> FootResponse
	1,  // 149: FootBall.WebFootOddDetail:output_type -> FootResponse
	1,  // 150: FootBall.WebOddHandicapOU:output_type -> FootResponse
	1,  // 151: FootBall.WebFootMatchLineup:output_type -> FootResponse
	1,  // 152: FootBall.WebFootMatchTeamHandsOnRecord:output_type -> FootResponse
	1,  // 153: FootBall.WebFootMatchTeamRecentRecord:output_type -> FootResponse
	1,  // 154: FootBall.WebFootMatchTeamFutureSchedule:output_type -> FootResponse
	1,  // 155: FootBall.WebFootLiveLineupReplacement:output_type -> FootResponse
	1,  // 156: FootBall.WebFootLiveLineupInjury:output_type -> FootResponse
	1,  // 157: FootBall.WebFootLineupSameFormation:output_type -> FootResponse
	1,  // 158: FootBall.WebFootLineupAverageData:output_type -> FootResponse
	1,  // 159: FootBall.WebFootReserveLineup:output_type -> FootResponse
	1,  // 160: FootBall.FutureMatchCount:output_type -> FootResponse
	1,  // 161: FootBall.FootMatchDetailAll:output_type -> FootResponse
	1,  // 162: FootBall.MatchFinish:output_type -> FootResponse
	1,  // 163: FootBall.FavoriteMatchList:output_type -> FootResponse
	1,  // 164: FootBall.CheckMatchStatus:output_type -> FootResponse
	1,  // 165: FootBall.SqliteDbTime:output_type -> FootResponse
	1,  // 166: FootBall.SqliteDbData:output_type -> FootResponse
	1,  // 167: FootBall.FootTournamentSearch:output_type -> FootResponse
	1,  // 168: FootBall.FootRealEventLive:output_type -> FootResponse
	1,  // 169: FootBall.FootRealEventAll:output_type -> FootResponse
	1,  // 170: FootBall.FootMatchFilter:output_type -> FootResponse
	1,  // 171: FootBall.IncrId2SupId:output_type -> FootResponse
	86, // [86:172] is the sub-list for method output_type
	0,  // [0:86] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_foot_server_proto_init() }
func file_foot_server_proto_init() {
	if File_foot_server_proto != nil {
		return
	}
	file_foot_match_request_proto_init()
	file_foot_season_list_proto_init()
	file_foot_odd_proto_init()
	file_foot_player_detail_proto_init()
	file_foot_match_comment_proto_init()
	file_foot_match_filtrate_proto_init()
	file_foot_team_detail_proto_init()
	file_foot_stand_tag_proto_init()
	file_foot_continent_country_tournament_proto_init()
	file_foot_team_match_proto_init()
	file_foot_lineup_proto_init()
	file_foot_team_stand_proto_init()
	file_foot_today_match_proto_init()
	file_foot_league_stand_proto_init()
	file_foot_team_transfer_proto_init()
	file_foot_player_stand_proto_init()
	file_foot_live_lineup_proto_init()
	file_foot_live_stat_proto_init()
	file_foot_player_career_proto_init()
	file_foot_team_transfer_year_proto_init()
	file_check_foot_existence_proto_init()
	file_check_foot_filtration_proto_init()
	file_foot_datatype_count_proto_init()
	file_get_foot_data_proto_init()
	file_foot_match_real_time_proto_init()
	file_foot_match_real_time_v2_proto_init()
	file_odd_filter_proto_init()
	file_foot_match_list_proto_init()
	file_foot_match_plus_proto_init()
	file_foot_base_data_proto_init()
	file_foot_data_promotion_proto_init()
	file_foot_lineup_average_data_proto_init()
	file_foot_lineup_match_data_proto_init()
	file_get_question_matchs_proto_init()
	file_foot_match_inprogress_proto_init()
	file_web_foot_season_list_proto_init()
	file_web_foot_team_detail_proto_init()
	file_web_foot_odd_proto_init()
	file_web_foot_player_detail_proto_init()
	file_web_foot_match_list_proto_init()
	file_web_foot_match_month_proto_init()
	file_web_foot_stand_proto_init()
	file_web_foot_league_detail_proto_init()
	file_web_foot_match_detail_proto_init()
	file_web_foot_continent_league_proto_init()
	file_web_foot_match_live_count_proto_init()
	file_web_foot_last_lineup_proto_init()
	file_web_foot_match_incident_proto_init()
	file_web_foot_instant_match_proto_init()
	file_web_foot_odd_handicap_ou_proto_init()
	file_web_foot_odd_detail_proto_init()
	file_foot_future_match_count_proto_init()
	file_foot_match_details_all_proto_init()
	file_foot_match_finish_proto_init()
	file_web_foot_lineup_proto_init()
	file_sqlite_db_time_proto_init()
	file_favorite_match_proto_init()
	file_check_match_status_proto_init()
	file_sqlite_db_data_proto_init()
	file_web_foot_match_h2h_proto_init()
	file_foot_tournament_search_proto_init()
	file_foot_match_modify_proto_init()
	file_foot_real_event_live_proto_init()
	file_foot_real_event_all_proto_init()
	file_foot_match_filter_proto_init()
	file_IncrId2SupId_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_foot_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foot_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_foot_server_proto_goTypes,
		DependencyIndexes: file_foot_server_proto_depIdxs,
		MessageInfos:      file_foot_server_proto_msgTypes,
	}.Build()
	File_foot_server_proto = out.File
	file_foot_server_proto_rawDesc = nil
	file_foot_server_proto_goTypes = nil
	file_foot_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FootBallClient is the client API for FootBall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FootBallClient interface {
	//比赛对阵详情
	FootMatchAgainstDetail(ctx context.Context, in *FootMatchInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//指数列表
	GetMatchOddList(ctx context.Context, in *FootOddListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//指数数值明细
	GetMatchOddListDetail(ctx context.Context, in *FootOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//赛季列表
	GetFootSeasonList(ctx context.Context, in *FootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员详情
	FootPlayerDetail(ctx context.Context, in *FootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//文字直播
	FootMatchCommentList(ctx context.Context, in *FootMatchCommentRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//字段筛选
	GetFootMatchFiltrate(ctx context.Context, in *FootMatchFiltrateRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//各大洲下的国家下的联赛
	GetFootContinentCountryTournamentData(ctx context.Context, in *FootContinentCountryTournamentInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队详情
	FootTeamDetail(ctx context.Context, in *FootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 侧边栏标签
	FootStandTag(ctx context.Context, in *FootStandTagRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队比赛
	FootTeamMatch(ctx context.Context, in *FootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队阵容
	FootMatchTeamLineup(ctx context.Context, in *FootLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队榜单
	FootTeamStand(ctx context.Context, in *FootTeamStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球队榜单
	FootTodayMatch(ctx context.Context, in *FootTodayMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//资料库-积分榜
	GetFootLeagueStand(ctx context.Context, in *FootLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 球队转会记录
	FootTeamTransfer(ctx context.Context, in *FootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员榜
	GetFootPlayerStand(ctx context.Context, in *FootPlayerStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//直播 - 球队阵容
	FootLiveLineup(ctx context.Context, in *FootLiveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//直播 - 直播统计
	FootLiveStat(ctx context.Context, in *FootLiveStatRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//球员职业生涯
	FootPlayerCareer(ctx context.Context, in *FootPlayerCareerRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 球队转会年份
	FootTeamTransferYear(ctx context.Context, in *FootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//检测接口
	GetFootCheckExistence(ctx context.Context, in *CheckFootExistenceRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//检测id接口
	FootFiltrationId(ctx context.Context, in *FootFiltrationRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//获取对应id的存在数量
	GetDataTypeCount(ctx context.Context, in *DataTypeCountRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//获取检测的数据
	CheckFootData(ctx context.Context, in *CheckFootDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//即时比赛
	FootRealTime(ctx context.Context, in *FootMatchRealTimeRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//即时比赛V2
	FootRealTimeV2(ctx context.Context, in *FootMatchRealTimeRequestV2, opts ...grpc.CallOption) (*FootResponse, error)
	//指数筛选
	FootOddsFilter(ctx context.Context, in *FootOddFilterRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//赛程
	FootMatchList(ctx context.Context, in *FootMatchListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 增强数据
	FootMatchPlus(ctx context.Context, in *FootMatchPlusRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 基础数据
	FootMatchBase(ctx context.Context, in *FootBaseDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//进行中的比赛球队球员信息
	FootMatchInProgress(ctx context.Context, in *FootMatchInProgressRequest, opts ...grpc.CallOption) (*FootMatchInProgressResponse, error)
	// 晋级图
	FootDataPromotion(ctx context.Context, in *FootDataPromotionRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 预测阵容平均数据
	FootLineupAverageData(ctx context.Context, in *FootLineupAverageDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	// 相同阵型比赛列表
	FootLineupMatchData(ctx context.Context, in *FootLineupMatchDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//问卷调查获取比赛接口
	FootQuestionMatch(ctx context.Context, in *FootQuestionRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web赛季列表
	WebFootSeasonList(ctx context.Context, in *WebFootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web指数列表
	GetWebOddList(ctx context.Context, in *WebOddListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//比赛修改或新增
	FootMatchModify(ctx context.Context, in *FootMatchModifyRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 基础信息
	WebFootTeamDetail(ctx context.Context, in *WebFootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队赛程
	WebFootTeamMatch(ctx context.Context, in *WebFootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队下的球员信息
	WebFootTeamPlayer(ctx context.Context, in *WebFootTeamPlayerRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队转会记录
	WebFootTransfer(ctx context.Context, in *WebFootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队转会年份
	WebFootTeamTransferYear(ctx context.Context, in *WebFootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队技术统计侧边栏
	WebFootTeamStatsMenu(ctx context.Context, in *WebFootTeamStatsMenuRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队技术统计
	WebFootTeamStats(ctx context.Context, in *WebFootTeamStatsRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球队下的赛季列表
	WebFootTeamSeasonList(ctx context.Context, in *WebFootTeamSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 比赛赛程
	WebFootMatchList(ctx context.Context, in *WebFootMatchListRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 比赛月份
	WebFootMatchMonth(ctx context.Context, in *WebFootMatchMonthRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 球员伤停情况
	WebFootTeamTransferInjury(ctx context.Context, in *WebFootTeamTransferInjuryRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球队详情 - 队伍阵容
	WebFootMatchLastLineup(ctx context.Context, in *WebFootMatchLastLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web球员详情 - 基础信息
	WebFootPlayerDetail(ctx context.Context, in *WebFootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 基础信息
	WebFootLeagueDetail(ctx context.Context, in *WebFootLeagueDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 积分榜
	WebLeagueStand(ctx context.Context, in *WebLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 球队球员技术统计侧边栏
	WebFootLeagueStatsMenu(ctx context.Context, in *WebFootLeagueStatsMenuRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 联赛赛季下的球队列表
	WebFootLeagueTeam(ctx context.Context, in *WebFootLeagueTeamRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛详情 - 球队球员技术统计
	WebFootLeagueStats(ctx context.Context, in *WebFootLeagueStatsRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛对阵详情
	WebFootMatchDetail(ctx context.Context, in *WebFootMatchDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web联赛列表
	WebFootContinentLeague(ctx context.Context, in *WebFootContinentLeagueRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 直播统计
	WebFootMatchCount(ctx context.Context, in *WebFootMatchCountRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛事件
	WebFootMatchIncident(ctx context.Context, in *WebFootMatchIncidentRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表
	WebFootInstantMatch(ctx context.Context, in *WebFootInstantMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 当天联赛列表
	WebFootLeagueFilter(ctx context.Context, in *WebFootLeagueFilterRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web指数详情 - 赔率公司指数详情
	WebFootOddDetail(ctx context.Context, in *WebOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web指数-亚盘/大小球
	WebOddHandicapOU(ctx context.Context, in *WebOddHandicapOURequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web比赛阵容
	WebFootMatchLineup(ctx context.Context, in *WebFootMatchLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍交手记录
	WebFootMatchTeamHandsOnRecord(ctx context.Context, in *WebFootMatchTeamHandsOnRecordRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍近期战绩
	WebFootMatchTeamRecentRecord(ctx context.Context, in *WebFootMatchTeamRecentRecordRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍未来赛程
	WebFootMatchTeamFutureSchedule(ctx context.Context, in *WebFootMatchTeamFutureScheduleRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup主客队伍本场换人记录
	WebFootLiveLineupReplacement(ctx context.Context, in *WebFootLiveLineupReplacementRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup主客队伍伤停记录
	WebFootLiveLineupInjury(ctx context.Context, in *WebFootLiveLineupInjuryRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup相同阵型比赛数据
	WebFootLineupSameFormation(ctx context.Context, in *WebFootLineupSameFormationRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup预测阵容占比
	WebFootLineupAverageData(ctx context.Context, in *WebFootLineupAverageDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup替补阵容
	WebFootReserveLineup(ctx context.Context, in *WebFootReserveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//近30天比赛的数量
	FutureMatchCount(ctx context.Context, in *FutureMatchCountRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//比赛详情
	FootMatchDetailAll(ctx context.Context, in *FootMatchDetailAllRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//获取已经完成的比赛
	MatchFinish(ctx context.Context, in *FootMatchFinishRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//收藏比赛列表
	FavoriteMatchList(ctx context.Context, in *FavoriteMatchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//检测比赛状态接口
	CheckMatchStatus(ctx context.Context, in *CheckMatchStatusRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//sqliteDb的文件名
	SqliteDbTime(ctx context.Context, in *SqliteDbTimeRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//sqliteDb的增量数据
	SqliteDbData(ctx context.Context, in *SqliteDbDataRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//联赛球队等查找
	FootTournamentSearch(ctx context.Context, in *TournamentSearchRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//比赛实时直播动画 接口4
	FootRealEventLive(ctx context.Context, in *RealEventLiveRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//比赛实时直播动画 接口1
	FootRealEventAll(ctx context.Context, in *RealEventAllRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//联赛比赛过滤列表
	FootMatchFilter(ctx context.Context, in *MatchFilterRequest, opts ...grpc.CallOption) (*FootResponse, error)
	//system
	IncrId2SupId(ctx context.Context, in *IncrId2SupIdRequest, opts ...grpc.CallOption) (*FootResponse, error)
}

type footBallClient struct {
	cc grpc.ClientConnInterface
}

func NewFootBallClient(cc grpc.ClientConnInterface) FootBallClient {
	return &footBallClient{cc}
}

func (c *footBallClient) FootMatchAgainstDetail(ctx context.Context, in *FootMatchInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchAgainstDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetMatchOddList(ctx context.Context, in *FootOddListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetMatchOddList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetMatchOddListDetail(ctx context.Context, in *FootOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetMatchOddListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootSeasonList(ctx context.Context, in *FootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootSeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootPlayerDetail(ctx context.Context, in *FootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootPlayerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchCommentList(ctx context.Context, in *FootMatchCommentRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootMatchFiltrate(ctx context.Context, in *FootMatchFiltrateRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootMatchFiltrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootContinentCountryTournamentData(ctx context.Context, in *FootContinentCountryTournamentInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootContinentCountryTournamentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamDetail(ctx context.Context, in *FootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootStandTag(ctx context.Context, in *FootStandTagRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootStandTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamMatch(ctx context.Context, in *FootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchTeamLineup(ctx context.Context, in *FootLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchTeamLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamStand(ctx context.Context, in *FootTeamStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTodayMatch(ctx context.Context, in *FootTodayMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTodayMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootLeagueStand(ctx context.Context, in *FootLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootLeagueStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamTransfer(ctx context.Context, in *FootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootPlayerStand(ctx context.Context, in *FootPlayerStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootPlayerStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootLiveLineup(ctx context.Context, in *FootLiveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootLiveLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootLiveStat(ctx context.Context, in *FootLiveStatRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootLiveStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootPlayerCareer(ctx context.Context, in *FootPlayerCareerRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootPlayerCareer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTeamTransferYear(ctx context.Context, in *FootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTeamTransferYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetFootCheckExistence(ctx context.Context, in *CheckFootExistenceRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetFootCheckExistence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootFiltrationId(ctx context.Context, in *FootFiltrationRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootFiltrationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetDataTypeCount(ctx context.Context, in *DataTypeCountRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetDataTypeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) CheckFootData(ctx context.Context, in *CheckFootDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/CheckFootData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootRealTime(ctx context.Context, in *FootMatchRealTimeRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootRealTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootRealTimeV2(ctx context.Context, in *FootMatchRealTimeRequestV2, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootRealTimeV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootOddsFilter(ctx context.Context, in *FootOddFilterRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootOddsFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchList(ctx context.Context, in *FootMatchListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchPlus(ctx context.Context, in *FootMatchPlusRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchBase(ctx context.Context, in *FootBaseDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchInProgress(ctx context.Context, in *FootMatchInProgressRequest, opts ...grpc.CallOption) (*FootMatchInProgressResponse, error) {
	out := new(FootMatchInProgressResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchInProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootDataPromotion(ctx context.Context, in *FootDataPromotionRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootDataPromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootLineupAverageData(ctx context.Context, in *FootLineupAverageDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootLineupAverageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootLineupMatchData(ctx context.Context, in *FootLineupMatchDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootLineupMatchData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootQuestionMatch(ctx context.Context, in *FootQuestionRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootQuestionMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootSeasonList(ctx context.Context, in *WebFootSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootSeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) GetWebOddList(ctx context.Context, in *WebOddListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/GetWebOddList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchModify(ctx context.Context, in *FootMatchModifyRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamDetail(ctx context.Context, in *WebFootTeamDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamMatch(ctx context.Context, in *WebFootTeamMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamPlayer(ctx context.Context, in *WebFootTeamPlayerRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTransfer(ctx context.Context, in *WebFootTeamTransferRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamTransferYear(ctx context.Context, in *WebFootTeamTransferYearRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamTransferYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamStatsMenu(ctx context.Context, in *WebFootTeamStatsMenuRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamStatsMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamStats(ctx context.Context, in *WebFootTeamStatsRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamSeasonList(ctx context.Context, in *WebFootTeamSeasonListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamSeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchList(ctx context.Context, in *WebFootMatchListRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchMonth(ctx context.Context, in *WebFootMatchMonthRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootTeamTransferInjury(ctx context.Context, in *WebFootTeamTransferInjuryRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootTeamTransferInjury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchLastLineup(ctx context.Context, in *WebFootMatchLastLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchLastLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootPlayerDetail(ctx context.Context, in *WebFootPlayerInfoRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootPlayerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLeagueDetail(ctx context.Context, in *WebFootLeagueDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLeagueDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebLeagueStand(ctx context.Context, in *WebLeagueStandRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebLeagueStand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLeagueStatsMenu(ctx context.Context, in *WebFootLeagueStatsMenuRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLeagueStatsMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLeagueTeam(ctx context.Context, in *WebFootLeagueTeamRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLeagueTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLeagueStats(ctx context.Context, in *WebFootLeagueStatsRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLeagueStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchDetail(ctx context.Context, in *WebFootMatchDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootContinentLeague(ctx context.Context, in *WebFootContinentLeagueRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootContinentLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchCount(ctx context.Context, in *WebFootMatchCountRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchIncident(ctx context.Context, in *WebFootMatchIncidentRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootInstantMatch(ctx context.Context, in *WebFootInstantMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootInstantMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLeagueFilter(ctx context.Context, in *WebFootLeagueFilterRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLeagueFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootOddDetail(ctx context.Context, in *WebOddDetailRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootOddDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebOddHandicapOU(ctx context.Context, in *WebOddHandicapOURequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebOddHandicapOU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchLineup(ctx context.Context, in *WebFootMatchLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchTeamHandsOnRecord(ctx context.Context, in *WebFootMatchTeamHandsOnRecordRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchTeamHandsOnRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchTeamRecentRecord(ctx context.Context, in *WebFootMatchTeamRecentRecordRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchTeamRecentRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootMatchTeamFutureSchedule(ctx context.Context, in *WebFootMatchTeamFutureScheduleRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootMatchTeamFutureSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLiveLineupReplacement(ctx context.Context, in *WebFootLiveLineupReplacementRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLiveLineupReplacement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLiveLineupInjury(ctx context.Context, in *WebFootLiveLineupInjuryRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLiveLineupInjury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLineupSameFormation(ctx context.Context, in *WebFootLineupSameFormationRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLineupSameFormation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootLineupAverageData(ctx context.Context, in *WebFootLineupAverageDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootLineupAverageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) WebFootReserveLineup(ctx context.Context, in *WebFootReserveLineupRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/WebFootReserveLineup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FutureMatchCount(ctx context.Context, in *FutureMatchCountRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FutureMatchCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchDetailAll(ctx context.Context, in *FootMatchDetailAllRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchDetailAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) MatchFinish(ctx context.Context, in *FootMatchFinishRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/MatchFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FavoriteMatchList(ctx context.Context, in *FavoriteMatchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FavoriteMatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) CheckMatchStatus(ctx context.Context, in *CheckMatchStatusRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/CheckMatchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) SqliteDbTime(ctx context.Context, in *SqliteDbTimeRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/SqliteDbTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) SqliteDbData(ctx context.Context, in *SqliteDbDataRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/SqliteDbData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootTournamentSearch(ctx context.Context, in *TournamentSearchRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootTournamentSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootRealEventLive(ctx context.Context, in *RealEventLiveRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootRealEventLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootRealEventAll(ctx context.Context, in *RealEventAllRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootRealEventAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) FootMatchFilter(ctx context.Context, in *MatchFilterRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/FootMatchFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footBallClient) IncrId2SupId(ctx context.Context, in *IncrId2SupIdRequest, opts ...grpc.CallOption) (*FootResponse, error) {
	out := new(FootResponse)
	err := c.cc.Invoke(ctx, "/FootBall/IncrId2SupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FootBallServer is the server API for FootBall service.
type FootBallServer interface {
	//比赛对阵详情
	FootMatchAgainstDetail(context.Context, *FootMatchInfoRequest) (*FootResponse, error)
	//指数列表
	GetMatchOddList(context.Context, *FootOddListRequest) (*FootResponse, error)
	//指数数值明细
	GetMatchOddListDetail(context.Context, *FootOddDetailRequest) (*FootResponse, error)
	//赛季列表
	GetFootSeasonList(context.Context, *FootSeasonListRequest) (*FootResponse, error)
	//球员详情
	FootPlayerDetail(context.Context, *FootPlayerInfoRequest) (*FootResponse, error)
	//文字直播
	FootMatchCommentList(context.Context, *FootMatchCommentRequest) (*FootResponse, error)
	//字段筛选
	GetFootMatchFiltrate(context.Context, *FootMatchFiltrateRequest) (*FootResponse, error)
	//各大洲下的国家下的联赛
	GetFootContinentCountryTournamentData(context.Context, *FootContinentCountryTournamentInfoRequest) (*FootResponse, error)
	//球队详情
	FootTeamDetail(context.Context, *FootTeamDetailRequest) (*FootResponse, error)
	// 侧边栏标签
	FootStandTag(context.Context, *FootStandTagRequest) (*FootResponse, error)
	//球队比赛
	FootTeamMatch(context.Context, *FootTeamMatchRequest) (*FootResponse, error)
	//球队阵容
	FootMatchTeamLineup(context.Context, *FootLineupRequest) (*FootResponse, error)
	//球队榜单
	FootTeamStand(context.Context, *FootTeamStandRequest) (*FootResponse, error)
	//球队榜单
	FootTodayMatch(context.Context, *FootTodayMatchRequest) (*FootResponse, error)
	//资料库-积分榜
	GetFootLeagueStand(context.Context, *FootLeagueStandRequest) (*FootResponse, error)
	// 球队转会记录
	FootTeamTransfer(context.Context, *FootTeamTransferRequest) (*FootResponse, error)
	//球员榜
	GetFootPlayerStand(context.Context, *FootPlayerStandRequest) (*FootResponse, error)
	//直播 - 球队阵容
	FootLiveLineup(context.Context, *FootLiveLineupRequest) (*FootResponse, error)
	//直播 - 直播统计
	FootLiveStat(context.Context, *FootLiveStatRequest) (*FootResponse, error)
	//球员职业生涯
	FootPlayerCareer(context.Context, *FootPlayerCareerRequest) (*FootResponse, error)
	// 球队转会年份
	FootTeamTransferYear(context.Context, *FootTeamTransferYearRequest) (*FootResponse, error)
	//检测接口
	GetFootCheckExistence(context.Context, *CheckFootExistenceRequest) (*FootResponse, error)
	//检测id接口
	FootFiltrationId(context.Context, *FootFiltrationRequest) (*FootResponse, error)
	//获取对应id的存在数量
	GetDataTypeCount(context.Context, *DataTypeCountRequest) (*FootResponse, error)
	//获取检测的数据
	CheckFootData(context.Context, *CheckFootDataRequest) (*FootResponse, error)
	//即时比赛
	FootRealTime(context.Context, *FootMatchRealTimeRequest) (*FootResponse, error)
	//即时比赛V2
	FootRealTimeV2(context.Context, *FootMatchRealTimeRequestV2) (*FootResponse, error)
	//指数筛选
	FootOddsFilter(context.Context, *FootOddFilterRequest) (*FootResponse, error)
	//赛程
	FootMatchList(context.Context, *FootMatchListRequest) (*FootResponse, error)
	// 增强数据
	FootMatchPlus(context.Context, *FootMatchPlusRequest) (*FootResponse, error)
	// 基础数据
	FootMatchBase(context.Context, *FootBaseDataRequest) (*FootResponse, error)
	//进行中的比赛球队球员信息
	FootMatchInProgress(context.Context, *FootMatchInProgressRequest) (*FootMatchInProgressResponse, error)
	// 晋级图
	FootDataPromotion(context.Context, *FootDataPromotionRequest) (*FootResponse, error)
	// 预测阵容平均数据
	FootLineupAverageData(context.Context, *FootLineupAverageDataRequest) (*FootResponse, error)
	// 相同阵型比赛列表
	FootLineupMatchData(context.Context, *FootLineupMatchDataRequest) (*FootResponse, error)
	//问卷调查获取比赛接口
	FootQuestionMatch(context.Context, *FootQuestionRequest) (*FootResponse, error)
	//web赛季列表
	WebFootSeasonList(context.Context, *WebFootSeasonListRequest) (*FootResponse, error)
	//web指数列表
	GetWebOddList(context.Context, *WebOddListRequest) (*FootResponse, error)
	//比赛修改或新增
	FootMatchModify(context.Context, *FootMatchModifyRequest) (*FootResponse, error)
	//web球队详情 - 基础信息
	WebFootTeamDetail(context.Context, *WebFootTeamDetailRequest) (*FootResponse, error)
	//web球队详情 - 球队赛程
	WebFootTeamMatch(context.Context, *WebFootTeamMatchRequest) (*FootResponse, error)
	//web球队详情 - 球队下的球员信息
	WebFootTeamPlayer(context.Context, *WebFootTeamPlayerRequest) (*FootResponse, error)
	//web球队详情 - 球队转会记录
	WebFootTransfer(context.Context, *WebFootTeamTransferRequest) (*FootResponse, error)
	//web球队详情 - 球队转会年份
	WebFootTeamTransferYear(context.Context, *WebFootTeamTransferYearRequest) (*FootResponse, error)
	//web球队详情 - 球队技术统计侧边栏
	WebFootTeamStatsMenu(context.Context, *WebFootTeamStatsMenuRequest) (*FootResponse, error)
	//web球队详情 - 球队技术统计
	WebFootTeamStats(context.Context, *WebFootTeamStatsRequest) (*FootResponse, error)
	//web球队详情 - 球队下的赛季列表
	WebFootTeamSeasonList(context.Context, *WebFootTeamSeasonListRequest) (*FootResponse, error)
	//web联赛详情 - 比赛赛程
	WebFootMatchList(context.Context, *WebFootMatchListRequest) (*FootResponse, error)
	//web球队详情 - 比赛月份
	WebFootMatchMonth(context.Context, *WebFootMatchMonthRequest) (*FootResponse, error)
	//web球队详情 - 球员伤停情况
	WebFootTeamTransferInjury(context.Context, *WebFootTeamTransferInjuryRequest) (*FootResponse, error)
	//web球队详情 - 队伍阵容
	WebFootMatchLastLineup(context.Context, *WebFootMatchLastLineupRequest) (*FootResponse, error)
	//web球员详情 - 基础信息
	WebFootPlayerDetail(context.Context, *WebFootPlayerInfoRequest) (*FootResponse, error)
	//web联赛详情 - 基础信息
	WebFootLeagueDetail(context.Context, *WebFootLeagueDetailRequest) (*FootResponse, error)
	//web联赛详情 - 积分榜
	WebLeagueStand(context.Context, *WebLeagueStandRequest) (*FootResponse, error)
	//web联赛详情 - 球队球员技术统计侧边栏
	WebFootLeagueStatsMenu(context.Context, *WebFootLeagueStatsMenuRequest) (*FootResponse, error)
	//web联赛详情 - 联赛赛季下的球队列表
	WebFootLeagueTeam(context.Context, *WebFootLeagueTeamRequest) (*FootResponse, error)
	//web联赛详情 - 球队球员技术统计
	WebFootLeagueStats(context.Context, *WebFootLeagueStatsRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛对阵详情
	WebFootMatchDetail(context.Context, *WebFootMatchDetailRequest) (*FootResponse, error)
	//web联赛列表
	WebFootContinentLeague(context.Context, *WebFootContinentLeagueRequest) (*FootResponse, error)
	//web即时比赛列表 - 直播统计
	WebFootMatchCount(context.Context, *WebFootMatchCountRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛事件
	WebFootMatchIncident(context.Context, *WebFootMatchIncidentRequest) (*FootResponse, error)
	//web即时比赛列表
	WebFootInstantMatch(context.Context, *WebFootInstantMatchRequest) (*FootResponse, error)
	//web即时比赛列表 - 当天联赛列表
	WebFootLeagueFilter(context.Context, *WebFootLeagueFilterRequest) (*FootResponse, error)
	//web指数详情 - 赔率公司指数详情
	WebFootOddDetail(context.Context, *WebOddDetailRequest) (*FootResponse, error)
	//web指数-亚盘/大小球
	WebOddHandicapOU(context.Context, *WebOddHandicapOURequest) (*FootResponse, error)
	//web比赛阵容
	WebFootMatchLineup(context.Context, *WebFootMatchLineupRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍交手记录
	WebFootMatchTeamHandsOnRecord(context.Context, *WebFootMatchTeamHandsOnRecordRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍近期战绩
	WebFootMatchTeamRecentRecord(context.Context, *WebFootMatchTeamRecentRecordRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - H2H主客队伍未来赛程
	WebFootMatchTeamFutureSchedule(context.Context, *WebFootMatchTeamFutureScheduleRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup主客队伍本场换人记录
	WebFootLiveLineupReplacement(context.Context, *WebFootLiveLineupReplacementRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup主客队伍伤停记录
	WebFootLiveLineupInjury(context.Context, *WebFootLiveLineupInjuryRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup相同阵型比赛数据
	WebFootLineupSameFormation(context.Context, *WebFootLineupSameFormationRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup预测阵容占比
	WebFootLineupAverageData(context.Context, *WebFootLineupAverageDataRequest) (*FootResponse, error)
	//web即时比赛列表 - 比赛详情 - Lineup替补阵容
	WebFootReserveLineup(context.Context, *WebFootReserveLineupRequest) (*FootResponse, error)
	//近30天比赛的数量
	FutureMatchCount(context.Context, *FutureMatchCountRequest) (*FootResponse, error)
	//比赛详情
	FootMatchDetailAll(context.Context, *FootMatchDetailAllRequest) (*FootResponse, error)
	//获取已经完成的比赛
	MatchFinish(context.Context, *FootMatchFinishRequest) (*FootResponse, error)
	//收藏比赛列表
	FavoriteMatchList(context.Context, *FavoriteMatchRequest) (*FootResponse, error)
	//检测比赛状态接口
	CheckMatchStatus(context.Context, *CheckMatchStatusRequest) (*FootResponse, error)
	//sqliteDb的文件名
	SqliteDbTime(context.Context, *SqliteDbTimeRequest) (*FootResponse, error)
	//sqliteDb的增量数据
	SqliteDbData(context.Context, *SqliteDbDataRequest) (*FootResponse, error)
	//联赛球队等查找
	FootTournamentSearch(context.Context, *TournamentSearchRequest) (*FootResponse, error)
	//比赛实时直播动画 接口4
	FootRealEventLive(context.Context, *RealEventLiveRequest) (*FootResponse, error)
	//比赛实时直播动画 接口1
	FootRealEventAll(context.Context, *RealEventAllRequest) (*FootResponse, error)
	//联赛比赛过滤列表
	FootMatchFilter(context.Context, *MatchFilterRequest) (*FootResponse, error)
	//system
	IncrId2SupId(context.Context, *IncrId2SupIdRequest) (*FootResponse, error)
}

// UnimplementedFootBallServer can be embedded to have forward compatible implementations.
type UnimplementedFootBallServer struct {
}

func (*UnimplementedFootBallServer) FootMatchAgainstDetail(context.Context, *FootMatchInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchAgainstDetail not implemented")
}
func (*UnimplementedFootBallServer) GetMatchOddList(context.Context, *FootOddListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddList not implemented")
}
func (*UnimplementedFootBallServer) GetMatchOddListDetail(context.Context, *FootOddDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchOddListDetail not implemented")
}
func (*UnimplementedFootBallServer) GetFootSeasonList(context.Context, *FootSeasonListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootSeasonList not implemented")
}
func (*UnimplementedFootBallServer) FootPlayerDetail(context.Context, *FootPlayerInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootPlayerDetail not implemented")
}
func (*UnimplementedFootBallServer) FootMatchCommentList(context.Context, *FootMatchCommentRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchCommentList not implemented")
}
func (*UnimplementedFootBallServer) GetFootMatchFiltrate(context.Context, *FootMatchFiltrateRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootMatchFiltrate not implemented")
}
func (*UnimplementedFootBallServer) GetFootContinentCountryTournamentData(context.Context, *FootContinentCountryTournamentInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootContinentCountryTournamentData not implemented")
}
func (*UnimplementedFootBallServer) FootTeamDetail(context.Context, *FootTeamDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamDetail not implemented")
}
func (*UnimplementedFootBallServer) FootStandTag(context.Context, *FootStandTagRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootStandTag not implemented")
}
func (*UnimplementedFootBallServer) FootTeamMatch(context.Context, *FootTeamMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamMatch not implemented")
}
func (*UnimplementedFootBallServer) FootMatchTeamLineup(context.Context, *FootLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchTeamLineup not implemented")
}
func (*UnimplementedFootBallServer) FootTeamStand(context.Context, *FootTeamStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamStand not implemented")
}
func (*UnimplementedFootBallServer) FootTodayMatch(context.Context, *FootTodayMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTodayMatch not implemented")
}
func (*UnimplementedFootBallServer) GetFootLeagueStand(context.Context, *FootLeagueStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootLeagueStand not implemented")
}
func (*UnimplementedFootBallServer) FootTeamTransfer(context.Context, *FootTeamTransferRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamTransfer not implemented")
}
func (*UnimplementedFootBallServer) GetFootPlayerStand(context.Context, *FootPlayerStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootPlayerStand not implemented")
}
func (*UnimplementedFootBallServer) FootLiveLineup(context.Context, *FootLiveLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootLiveLineup not implemented")
}
func (*UnimplementedFootBallServer) FootLiveStat(context.Context, *FootLiveStatRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootLiveStat not implemented")
}
func (*UnimplementedFootBallServer) FootPlayerCareer(context.Context, *FootPlayerCareerRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootPlayerCareer not implemented")
}
func (*UnimplementedFootBallServer) FootTeamTransferYear(context.Context, *FootTeamTransferYearRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTeamTransferYear not implemented")
}
func (*UnimplementedFootBallServer) GetFootCheckExistence(context.Context, *CheckFootExistenceRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFootCheckExistence not implemented")
}
func (*UnimplementedFootBallServer) FootFiltrationId(context.Context, *FootFiltrationRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootFiltrationId not implemented")
}
func (*UnimplementedFootBallServer) GetDataTypeCount(context.Context, *DataTypeCountRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataTypeCount not implemented")
}
func (*UnimplementedFootBallServer) CheckFootData(context.Context, *CheckFootDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFootData not implemented")
}
func (*UnimplementedFootBallServer) FootRealTime(context.Context, *FootMatchRealTimeRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootRealTime not implemented")
}
func (*UnimplementedFootBallServer) FootRealTimeV2(context.Context, *FootMatchRealTimeRequestV2) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootRealTimeV2 not implemented")
}
func (*UnimplementedFootBallServer) FootOddsFilter(context.Context, *FootOddFilterRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootOddsFilter not implemented")
}
func (*UnimplementedFootBallServer) FootMatchList(context.Context, *FootMatchListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchList not implemented")
}
func (*UnimplementedFootBallServer) FootMatchPlus(context.Context, *FootMatchPlusRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchPlus not implemented")
}
func (*UnimplementedFootBallServer) FootMatchBase(context.Context, *FootBaseDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchBase not implemented")
}
func (*UnimplementedFootBallServer) FootMatchInProgress(context.Context, *FootMatchInProgressRequest) (*FootMatchInProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchInProgress not implemented")
}
func (*UnimplementedFootBallServer) FootDataPromotion(context.Context, *FootDataPromotionRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootDataPromotion not implemented")
}
func (*UnimplementedFootBallServer) FootLineupAverageData(context.Context, *FootLineupAverageDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootLineupAverageData not implemented")
}
func (*UnimplementedFootBallServer) FootLineupMatchData(context.Context, *FootLineupMatchDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootLineupMatchData not implemented")
}
func (*UnimplementedFootBallServer) FootQuestionMatch(context.Context, *FootQuestionRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootQuestionMatch not implemented")
}
func (*UnimplementedFootBallServer) WebFootSeasonList(context.Context, *WebFootSeasonListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootSeasonList not implemented")
}
func (*UnimplementedFootBallServer) GetWebOddList(context.Context, *WebOddListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebOddList not implemented")
}
func (*UnimplementedFootBallServer) FootMatchModify(context.Context, *FootMatchModifyRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchModify not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamDetail(context.Context, *WebFootTeamDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamDetail not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamMatch(context.Context, *WebFootTeamMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamMatch not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamPlayer(context.Context, *WebFootTeamPlayerRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamPlayer not implemented")
}
func (*UnimplementedFootBallServer) WebFootTransfer(context.Context, *WebFootTeamTransferRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTransfer not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamTransferYear(context.Context, *WebFootTeamTransferYearRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamTransferYear not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamStatsMenu(context.Context, *WebFootTeamStatsMenuRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamStatsMenu not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamStats(context.Context, *WebFootTeamStatsRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamStats not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamSeasonList(context.Context, *WebFootTeamSeasonListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamSeasonList not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchList(context.Context, *WebFootMatchListRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchList not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchMonth(context.Context, *WebFootMatchMonthRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchMonth not implemented")
}
func (*UnimplementedFootBallServer) WebFootTeamTransferInjury(context.Context, *WebFootTeamTransferInjuryRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootTeamTransferInjury not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchLastLineup(context.Context, *WebFootMatchLastLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchLastLineup not implemented")
}
func (*UnimplementedFootBallServer) WebFootPlayerDetail(context.Context, *WebFootPlayerInfoRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootPlayerDetail not implemented")
}
func (*UnimplementedFootBallServer) WebFootLeagueDetail(context.Context, *WebFootLeagueDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLeagueDetail not implemented")
}
func (*UnimplementedFootBallServer) WebLeagueStand(context.Context, *WebLeagueStandRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLeagueStand not implemented")
}
func (*UnimplementedFootBallServer) WebFootLeagueStatsMenu(context.Context, *WebFootLeagueStatsMenuRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLeagueStatsMenu not implemented")
}
func (*UnimplementedFootBallServer) WebFootLeagueTeam(context.Context, *WebFootLeagueTeamRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLeagueTeam not implemented")
}
func (*UnimplementedFootBallServer) WebFootLeagueStats(context.Context, *WebFootLeagueStatsRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLeagueStats not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchDetail(context.Context, *WebFootMatchDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchDetail not implemented")
}
func (*UnimplementedFootBallServer) WebFootContinentLeague(context.Context, *WebFootContinentLeagueRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootContinentLeague not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchCount(context.Context, *WebFootMatchCountRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchCount not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchIncident(context.Context, *WebFootMatchIncidentRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchIncident not implemented")
}
func (*UnimplementedFootBallServer) WebFootInstantMatch(context.Context, *WebFootInstantMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootInstantMatch not implemented")
}
func (*UnimplementedFootBallServer) WebFootLeagueFilter(context.Context, *WebFootLeagueFilterRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLeagueFilter not implemented")
}
func (*UnimplementedFootBallServer) WebFootOddDetail(context.Context, *WebOddDetailRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootOddDetail not implemented")
}
func (*UnimplementedFootBallServer) WebOddHandicapOU(context.Context, *WebOddHandicapOURequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebOddHandicapOU not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchLineup(context.Context, *WebFootMatchLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchLineup not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchTeamHandsOnRecord(context.Context, *WebFootMatchTeamHandsOnRecordRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchTeamHandsOnRecord not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchTeamRecentRecord(context.Context, *WebFootMatchTeamRecentRecordRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchTeamRecentRecord not implemented")
}
func (*UnimplementedFootBallServer) WebFootMatchTeamFutureSchedule(context.Context, *WebFootMatchTeamFutureScheduleRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootMatchTeamFutureSchedule not implemented")
}
func (*UnimplementedFootBallServer) WebFootLiveLineupReplacement(context.Context, *WebFootLiveLineupReplacementRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLiveLineupReplacement not implemented")
}
func (*UnimplementedFootBallServer) WebFootLiveLineupInjury(context.Context, *WebFootLiveLineupInjuryRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLiveLineupInjury not implemented")
}
func (*UnimplementedFootBallServer) WebFootLineupSameFormation(context.Context, *WebFootLineupSameFormationRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLineupSameFormation not implemented")
}
func (*UnimplementedFootBallServer) WebFootLineupAverageData(context.Context, *WebFootLineupAverageDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootLineupAverageData not implemented")
}
func (*UnimplementedFootBallServer) WebFootReserveLineup(context.Context, *WebFootReserveLineupRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFootReserveLineup not implemented")
}
func (*UnimplementedFootBallServer) FutureMatchCount(context.Context, *FutureMatchCountRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FutureMatchCount not implemented")
}
func (*UnimplementedFootBallServer) FootMatchDetailAll(context.Context, *FootMatchDetailAllRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchDetailAll not implemented")
}
func (*UnimplementedFootBallServer) MatchFinish(context.Context, *FootMatchFinishRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchFinish not implemented")
}
func (*UnimplementedFootBallServer) FavoriteMatchList(context.Context, *FavoriteMatchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteMatchList not implemented")
}
func (*UnimplementedFootBallServer) CheckMatchStatus(context.Context, *CheckMatchStatusRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMatchStatus not implemented")
}
func (*UnimplementedFootBallServer) SqliteDbTime(context.Context, *SqliteDbTimeRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqliteDbTime not implemented")
}
func (*UnimplementedFootBallServer) SqliteDbData(context.Context, *SqliteDbDataRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqliteDbData not implemented")
}
func (*UnimplementedFootBallServer) FootTournamentSearch(context.Context, *TournamentSearchRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootTournamentSearch not implemented")
}
func (*UnimplementedFootBallServer) FootRealEventLive(context.Context, *RealEventLiveRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootRealEventLive not implemented")
}
func (*UnimplementedFootBallServer) FootRealEventAll(context.Context, *RealEventAllRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootRealEventAll not implemented")
}
func (*UnimplementedFootBallServer) FootMatchFilter(context.Context, *MatchFilterRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FootMatchFilter not implemented")
}
func (*UnimplementedFootBallServer) IncrId2SupId(context.Context, *IncrId2SupIdRequest) (*FootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrId2SupId not implemented")
}

func RegisterFootBallServer(s *grpc.Server, srv FootBallServer) {
	s.RegisterService(&_FootBall_serviceDesc, srv)
}

func _FootBall_FootMatchAgainstDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchAgainstDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchAgainstDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchAgainstDetail(ctx, req.(*FootMatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetMatchOddList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootOddListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetMatchOddList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetMatchOddList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetMatchOddList(ctx, req.(*FootOddListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetMatchOddListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootOddDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetMatchOddListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetMatchOddListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetMatchOddListDetail(ctx, req.(*FootOddDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootSeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootSeasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootSeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootSeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootSeasonList(ctx, req.(*FootSeasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootPlayerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootPlayerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootPlayerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootPlayerDetail(ctx, req.(*FootPlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchCommentList(ctx, req.(*FootMatchCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootMatchFiltrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchFiltrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootMatchFiltrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootMatchFiltrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootMatchFiltrate(ctx, req.(*FootMatchFiltrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootContinentCountryTournamentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootContinentCountryTournamentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootContinentCountryTournamentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootContinentCountryTournamentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootContinentCountryTournamentData(ctx, req.(*FootContinentCountryTournamentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamDetail(ctx, req.(*FootTeamDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootStandTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootStandTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootStandTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootStandTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootStandTag(ctx, req.(*FootStandTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamMatch(ctx, req.(*FootTeamMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchTeamLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchTeamLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchTeamLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchTeamLineup(ctx, req.(*FootLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamStand(ctx, req.(*FootTeamStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTodayMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTodayMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTodayMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTodayMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTodayMatch(ctx, req.(*FootTodayMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootLeagueStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLeagueStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootLeagueStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootLeagueStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootLeagueStand(ctx, req.(*FootLeagueStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamTransfer(ctx, req.(*FootTeamTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootPlayerStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootPlayerStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootPlayerStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootPlayerStand(ctx, req.(*FootPlayerStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootLiveLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLiveLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootLiveLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootLiveLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootLiveLineup(ctx, req.(*FootLiveLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootLiveStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLiveStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootLiveStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootLiveStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootLiveStat(ctx, req.(*FootLiveStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootPlayerCareer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootPlayerCareerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootPlayerCareer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootPlayerCareer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootPlayerCareer(ctx, req.(*FootPlayerCareerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTeamTransferYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootTeamTransferYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTeamTransferYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTeamTransferYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTeamTransferYear(ctx, req.(*FootTeamTransferYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetFootCheckExistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFootExistenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetFootCheckExistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetFootCheckExistence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetFootCheckExistence(ctx, req.(*CheckFootExistenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootFiltrationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootFiltrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootFiltrationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootFiltrationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootFiltrationId(ctx, req.(*FootFiltrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetDataTypeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetDataTypeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetDataTypeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetDataTypeCount(ctx, req.(*DataTypeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_CheckFootData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFootDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).CheckFootData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/CheckFootData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).CheckFootData(ctx, req.(*CheckFootDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootRealTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchRealTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootRealTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootRealTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootRealTime(ctx, req.(*FootMatchRealTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootRealTimeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchRealTimeRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootRealTimeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootRealTimeV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootRealTimeV2(ctx, req.(*FootMatchRealTimeRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootOddsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootOddFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootOddsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootOddsFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootOddsFilter(ctx, req.(*FootOddFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchList(ctx, req.(*FootMatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchPlusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchPlus(ctx, req.(*FootMatchPlusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootBaseDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchBase(ctx, req.(*FootBaseDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchInProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchInProgress(ctx, req.(*FootMatchInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootDataPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootDataPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootDataPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootDataPromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootDataPromotion(ctx, req.(*FootDataPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootLineupAverageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLineupAverageDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootLineupAverageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootLineupAverageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootLineupAverageData(ctx, req.(*FootLineupAverageDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootLineupMatchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootLineupMatchDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootLineupMatchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootLineupMatchData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootLineupMatchData(ctx, req.(*FootLineupMatchDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootQuestionMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootQuestionMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootQuestionMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootQuestionMatch(ctx, req.(*FootQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootSeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootSeasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootSeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootSeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootSeasonList(ctx, req.(*WebFootSeasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_GetWebOddList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebOddListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).GetWebOddList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/GetWebOddList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).GetWebOddList(ctx, req.(*WebOddListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchModify(ctx, req.(*FootMatchModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamDetail(ctx, req.(*WebFootTeamDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamMatch(ctx, req.(*WebFootTeamMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamPlayer(ctx, req.(*WebFootTeamPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTransfer(ctx, req.(*WebFootTeamTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamTransferYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamTransferYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamTransferYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamTransferYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamTransferYear(ctx, req.(*WebFootTeamTransferYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamStatsMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamStatsMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamStatsMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamStatsMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamStatsMenu(ctx, req.(*WebFootTeamStatsMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamStats(ctx, req.(*WebFootTeamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamSeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamSeasonListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamSeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamSeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamSeasonList(ctx, req.(*WebFootTeamSeasonListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchList(ctx, req.(*WebFootMatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchMonth(ctx, req.(*WebFootMatchMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootTeamTransferInjury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootTeamTransferInjuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootTeamTransferInjury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootTeamTransferInjury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootTeamTransferInjury(ctx, req.(*WebFootTeamTransferInjuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchLastLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchLastLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchLastLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchLastLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchLastLineup(ctx, req.(*WebFootMatchLastLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootPlayerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootPlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootPlayerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootPlayerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootPlayerDetail(ctx, req.(*WebFootPlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLeagueDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLeagueDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLeagueDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLeagueDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLeagueDetail(ctx, req.(*WebFootLeagueDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebLeagueStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebLeagueStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebLeagueStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebLeagueStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebLeagueStand(ctx, req.(*WebLeagueStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLeagueStatsMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLeagueStatsMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLeagueStatsMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLeagueStatsMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLeagueStatsMenu(ctx, req.(*WebFootLeagueStatsMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLeagueTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLeagueTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLeagueTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLeagueTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLeagueTeam(ctx, req.(*WebFootLeagueTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLeagueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLeagueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLeagueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLeagueStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLeagueStats(ctx, req.(*WebFootLeagueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchDetail(ctx, req.(*WebFootMatchDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootContinentLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootContinentLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootContinentLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootContinentLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootContinentLeague(ctx, req.(*WebFootContinentLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchCount(ctx, req.(*WebFootMatchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchIncident(ctx, req.(*WebFootMatchIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootInstantMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootInstantMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootInstantMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootInstantMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootInstantMatch(ctx, req.(*WebFootInstantMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLeagueFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLeagueFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLeagueFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLeagueFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLeagueFilter(ctx, req.(*WebFootLeagueFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootOddDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebOddDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootOddDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootOddDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootOddDetail(ctx, req.(*WebOddDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebOddHandicapOU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebOddHandicapOURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebOddHandicapOU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebOddHandicapOU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebOddHandicapOU(ctx, req.(*WebOddHandicapOURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchLineup(ctx, req.(*WebFootMatchLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchTeamHandsOnRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchTeamHandsOnRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchTeamHandsOnRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchTeamHandsOnRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchTeamHandsOnRecord(ctx, req.(*WebFootMatchTeamHandsOnRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchTeamRecentRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchTeamRecentRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchTeamRecentRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchTeamRecentRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchTeamRecentRecord(ctx, req.(*WebFootMatchTeamRecentRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootMatchTeamFutureSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootMatchTeamFutureScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootMatchTeamFutureSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootMatchTeamFutureSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootMatchTeamFutureSchedule(ctx, req.(*WebFootMatchTeamFutureScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLiveLineupReplacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLiveLineupReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLiveLineupReplacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLiveLineupReplacement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLiveLineupReplacement(ctx, req.(*WebFootLiveLineupReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLiveLineupInjury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLiveLineupInjuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLiveLineupInjury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLiveLineupInjury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLiveLineupInjury(ctx, req.(*WebFootLiveLineupInjuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLineupSameFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLineupSameFormationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLineupSameFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLineupSameFormation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLineupSameFormation(ctx, req.(*WebFootLineupSameFormationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootLineupAverageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootLineupAverageDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootLineupAverageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootLineupAverageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootLineupAverageData(ctx, req.(*WebFootLineupAverageDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_WebFootReserveLineup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFootReserveLineupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).WebFootReserveLineup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/WebFootReserveLineup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).WebFootReserveLineup(ctx, req.(*WebFootReserveLineupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FutureMatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FutureMatchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FutureMatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FutureMatchCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FutureMatchCount(ctx, req.(*FutureMatchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchDetailAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchDetailAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchDetailAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchDetailAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchDetailAll(ctx, req.(*FootMatchDetailAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_MatchFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FootMatchFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).MatchFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/MatchFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).MatchFinish(ctx, req.(*FootMatchFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FavoriteMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FavoriteMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FavoriteMatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FavoriteMatchList(ctx, req.(*FavoriteMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_CheckMatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).CheckMatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/CheckMatchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).CheckMatchStatus(ctx, req.(*CheckMatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_SqliteDbTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqliteDbTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).SqliteDbTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/SqliteDbTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).SqliteDbTime(ctx, req.(*SqliteDbTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_SqliteDbData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqliteDbDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).SqliteDbData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/SqliteDbData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).SqliteDbData(ctx, req.(*SqliteDbDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootTournamentSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootTournamentSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootTournamentSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootTournamentSearch(ctx, req.(*TournamentSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootRealEventLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealEventLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootRealEventLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootRealEventLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootRealEventLive(ctx, req.(*RealEventLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootRealEventAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealEventAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootRealEventAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootRealEventAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootRealEventAll(ctx, req.(*RealEventAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_FootMatchFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).FootMatchFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/FootMatchFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).FootMatchFilter(ctx, req.(*MatchFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FootBall_IncrId2SupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrId2SupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FootBallServer).IncrId2SupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FootBall/IncrId2SupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FootBallServer).IncrId2SupId(ctx, req.(*IncrId2SupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FootBall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FootBall",
	HandlerType: (*FootBallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FootMatchAgainstDetail",
			Handler:    _FootBall_FootMatchAgainstDetail_Handler,
		},
		{
			MethodName: "GetMatchOddList",
			Handler:    _FootBall_GetMatchOddList_Handler,
		},
		{
			MethodName: "GetMatchOddListDetail",
			Handler:    _FootBall_GetMatchOddListDetail_Handler,
		},
		{
			MethodName: "GetFootSeasonList",
			Handler:    _FootBall_GetFootSeasonList_Handler,
		},
		{
			MethodName: "FootPlayerDetail",
			Handler:    _FootBall_FootPlayerDetail_Handler,
		},
		{
			MethodName: "FootMatchCommentList",
			Handler:    _FootBall_FootMatchCommentList_Handler,
		},
		{
			MethodName: "GetFootMatchFiltrate",
			Handler:    _FootBall_GetFootMatchFiltrate_Handler,
		},
		{
			MethodName: "GetFootContinentCountryTournamentData",
			Handler:    _FootBall_GetFootContinentCountryTournamentData_Handler,
		},
		{
			MethodName: "FootTeamDetail",
			Handler:    _FootBall_FootTeamDetail_Handler,
		},
		{
			MethodName: "FootStandTag",
			Handler:    _FootBall_FootStandTag_Handler,
		},
		{
			MethodName: "FootTeamMatch",
			Handler:    _FootBall_FootTeamMatch_Handler,
		},
		{
			MethodName: "FootMatchTeamLineup",
			Handler:    _FootBall_FootMatchTeamLineup_Handler,
		},
		{
			MethodName: "FootTeamStand",
			Handler:    _FootBall_FootTeamStand_Handler,
		},
		{
			MethodName: "FootTodayMatch",
			Handler:    _FootBall_FootTodayMatch_Handler,
		},
		{
			MethodName: "GetFootLeagueStand",
			Handler:    _FootBall_GetFootLeagueStand_Handler,
		},
		{
			MethodName: "FootTeamTransfer",
			Handler:    _FootBall_FootTeamTransfer_Handler,
		},
		{
			MethodName: "GetFootPlayerStand",
			Handler:    _FootBall_GetFootPlayerStand_Handler,
		},
		{
			MethodName: "FootLiveLineup",
			Handler:    _FootBall_FootLiveLineup_Handler,
		},
		{
			MethodName: "FootLiveStat",
			Handler:    _FootBall_FootLiveStat_Handler,
		},
		{
			MethodName: "FootPlayerCareer",
			Handler:    _FootBall_FootPlayerCareer_Handler,
		},
		{
			MethodName: "FootTeamTransferYear",
			Handler:    _FootBall_FootTeamTransferYear_Handler,
		},
		{
			MethodName: "GetFootCheckExistence",
			Handler:    _FootBall_GetFootCheckExistence_Handler,
		},
		{
			MethodName: "FootFiltrationId",
			Handler:    _FootBall_FootFiltrationId_Handler,
		},
		{
			MethodName: "GetDataTypeCount",
			Handler:    _FootBall_GetDataTypeCount_Handler,
		},
		{
			MethodName: "CheckFootData",
			Handler:    _FootBall_CheckFootData_Handler,
		},
		{
			MethodName: "FootRealTime",
			Handler:    _FootBall_FootRealTime_Handler,
		},
		{
			MethodName: "FootRealTimeV2",
			Handler:    _FootBall_FootRealTimeV2_Handler,
		},
		{
			MethodName: "FootOddsFilter",
			Handler:    _FootBall_FootOddsFilter_Handler,
		},
		{
			MethodName: "FootMatchList",
			Handler:    _FootBall_FootMatchList_Handler,
		},
		{
			MethodName: "FootMatchPlus",
			Handler:    _FootBall_FootMatchPlus_Handler,
		},
		{
			MethodName: "FootMatchBase",
			Handler:    _FootBall_FootMatchBase_Handler,
		},
		{
			MethodName: "FootMatchInProgress",
			Handler:    _FootBall_FootMatchInProgress_Handler,
		},
		{
			MethodName: "FootDataPromotion",
			Handler:    _FootBall_FootDataPromotion_Handler,
		},
		{
			MethodName: "FootLineupAverageData",
			Handler:    _FootBall_FootLineupAverageData_Handler,
		},
		{
			MethodName: "FootLineupMatchData",
			Handler:    _FootBall_FootLineupMatchData_Handler,
		},
		{
			MethodName: "FootQuestionMatch",
			Handler:    _FootBall_FootQuestionMatch_Handler,
		},
		{
			MethodName: "WebFootSeasonList",
			Handler:    _FootBall_WebFootSeasonList_Handler,
		},
		{
			MethodName: "GetWebOddList",
			Handler:    _FootBall_GetWebOddList_Handler,
		},
		{
			MethodName: "FootMatchModify",
			Handler:    _FootBall_FootMatchModify_Handler,
		},
		{
			MethodName: "WebFootTeamDetail",
			Handler:    _FootBall_WebFootTeamDetail_Handler,
		},
		{
			MethodName: "WebFootTeamMatch",
			Handler:    _FootBall_WebFootTeamMatch_Handler,
		},
		{
			MethodName: "WebFootTeamPlayer",
			Handler:    _FootBall_WebFootTeamPlayer_Handler,
		},
		{
			MethodName: "WebFootTransfer",
			Handler:    _FootBall_WebFootTransfer_Handler,
		},
		{
			MethodName: "WebFootTeamTransferYear",
			Handler:    _FootBall_WebFootTeamTransferYear_Handler,
		},
		{
			MethodName: "WebFootTeamStatsMenu",
			Handler:    _FootBall_WebFootTeamStatsMenu_Handler,
		},
		{
			MethodName: "WebFootTeamStats",
			Handler:    _FootBall_WebFootTeamStats_Handler,
		},
		{
			MethodName: "WebFootTeamSeasonList",
			Handler:    _FootBall_WebFootTeamSeasonList_Handler,
		},
		{
			MethodName: "WebFootMatchList",
			Handler:    _FootBall_WebFootMatchList_Handler,
		},
		{
			MethodName: "WebFootMatchMonth",
			Handler:    _FootBall_WebFootMatchMonth_Handler,
		},
		{
			MethodName: "WebFootTeamTransferInjury",
			Handler:    _FootBall_WebFootTeamTransferInjury_Handler,
		},
		{
			MethodName: "WebFootMatchLastLineup",
			Handler:    _FootBall_WebFootMatchLastLineup_Handler,
		},
		{
			MethodName: "WebFootPlayerDetail",
			Handler:    _FootBall_WebFootPlayerDetail_Handler,
		},
		{
			MethodName: "WebFootLeagueDetail",
			Handler:    _FootBall_WebFootLeagueDetail_Handler,
		},
		{
			MethodName: "WebLeagueStand",
			Handler:    _FootBall_WebLeagueStand_Handler,
		},
		{
			MethodName: "WebFootLeagueStatsMenu",
			Handler:    _FootBall_WebFootLeagueStatsMenu_Handler,
		},
		{
			MethodName: "WebFootLeagueTeam",
			Handler:    _FootBall_WebFootLeagueTeam_Handler,
		},
		{
			MethodName: "WebFootLeagueStats",
			Handler:    _FootBall_WebFootLeagueStats_Handler,
		},
		{
			MethodName: "WebFootMatchDetail",
			Handler:    _FootBall_WebFootMatchDetail_Handler,
		},
		{
			MethodName: "WebFootContinentLeague",
			Handler:    _FootBall_WebFootContinentLeague_Handler,
		},
		{
			MethodName: "WebFootMatchCount",
			Handler:    _FootBall_WebFootMatchCount_Handler,
		},
		{
			MethodName: "WebFootMatchIncident",
			Handler:    _FootBall_WebFootMatchIncident_Handler,
		},
		{
			MethodName: "WebFootInstantMatch",
			Handler:    _FootBall_WebFootInstantMatch_Handler,
		},
		{
			MethodName: "WebFootLeagueFilter",
			Handler:    _FootBall_WebFootLeagueFilter_Handler,
		},
		{
			MethodName: "WebFootOddDetail",
			Handler:    _FootBall_WebFootOddDetail_Handler,
		},
		{
			MethodName: "WebOddHandicapOU",
			Handler:    _FootBall_WebOddHandicapOU_Handler,
		},
		{
			MethodName: "WebFootMatchLineup",
			Handler:    _FootBall_WebFootMatchLineup_Handler,
		},
		{
			MethodName: "WebFootMatchTeamHandsOnRecord",
			Handler:    _FootBall_WebFootMatchTeamHandsOnRecord_Handler,
		},
		{
			MethodName: "WebFootMatchTeamRecentRecord",
			Handler:    _FootBall_WebFootMatchTeamRecentRecord_Handler,
		},
		{
			MethodName: "WebFootMatchTeamFutureSchedule",
			Handler:    _FootBall_WebFootMatchTeamFutureSchedule_Handler,
		},
		{
			MethodName: "WebFootLiveLineupReplacement",
			Handler:    _FootBall_WebFootLiveLineupReplacement_Handler,
		},
		{
			MethodName: "WebFootLiveLineupInjury",
			Handler:    _FootBall_WebFootLiveLineupInjury_Handler,
		},
		{
			MethodName: "WebFootLineupSameFormation",
			Handler:    _FootBall_WebFootLineupSameFormation_Handler,
		},
		{
			MethodName: "WebFootLineupAverageData",
			Handler:    _FootBall_WebFootLineupAverageData_Handler,
		},
		{
			MethodName: "WebFootReserveLineup",
			Handler:    _FootBall_WebFootReserveLineup_Handler,
		},
		{
			MethodName: "FutureMatchCount",
			Handler:    _FootBall_FutureMatchCount_Handler,
		},
		{
			MethodName: "FootMatchDetailAll",
			Handler:    _FootBall_FootMatchDetailAll_Handler,
		},
		{
			MethodName: "MatchFinish",
			Handler:    _FootBall_MatchFinish_Handler,
		},
		{
			MethodName: "FavoriteMatchList",
			Handler:    _FootBall_FavoriteMatchList_Handler,
		},
		{
			MethodName: "CheckMatchStatus",
			Handler:    _FootBall_CheckMatchStatus_Handler,
		},
		{
			MethodName: "SqliteDbTime",
			Handler:    _FootBall_SqliteDbTime_Handler,
		},
		{
			MethodName: "SqliteDbData",
			Handler:    _FootBall_SqliteDbData_Handler,
		},
		{
			MethodName: "FootTournamentSearch",
			Handler:    _FootBall_FootTournamentSearch_Handler,
		},
		{
			MethodName: "FootRealEventLive",
			Handler:    _FootBall_FootRealEventLive_Handler,
		},
		{
			MethodName: "FootRealEventAll",
			Handler:    _FootBall_FootRealEventAll_Handler,
		},
		{
			MethodName: "FootMatchFilter",
			Handler:    _FootBall_FootMatchFilter_Handler,
		},
		{
			MethodName: "IncrId2SupId",
			Handler:    _FootBall_IncrId2SupId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foot_server.proto",
}
