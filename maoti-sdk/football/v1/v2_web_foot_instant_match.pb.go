// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: v2_web_foot_instant_match.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//即时比赛列表
type V2WebFootInstantMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language     string  `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`                 //请求语言
	TournamentId []int64 `protobuf:"varint,2,rep,packed,name=tournamentId,proto3" json:"tournamentId,omitempty"` //联赛ID
	MatchTime    string  `protobuf:"bytes,3,opt,name=matchTime,proto3" json:"matchTime,omitempty"`               //比赛时间
	TabType      int64   `protobuf:"varint,4,opt,name=tabType,proto3" json:"tabType,omitempty"`                  //查询类型 1.热门；2.即时；3.全部；4.收藏
	TimeZone     int64   `protobuf:"varint,5,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`                //时区
	Page         int64   `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                        //页码
	PageSize     int64   `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                //页面容量
	Sort         int64   `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                        //排序：0.时间排序；1.联赛排序；默认时间排序
	MatchId      []int64 `protobuf:"varint,9,rep,packed,name=matchId,proto3" json:"matchId,omitempty"`           //比赛ID，查询收藏比赛时使用
}

func (x *V2WebFootInstantMatchRequest) Reset() {
	*x = V2WebFootInstantMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootInstantMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootInstantMatchRequest) ProtoMessage() {}

func (x *V2WebFootInstantMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootInstantMatchRequest.ProtoReflect.Descriptor instead.
func (*V2WebFootInstantMatchRequest) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{0}
}

func (x *V2WebFootInstantMatchRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *V2WebFootInstantMatchRequest) GetTournamentId() []int64 {
	if x != nil {
		return x.TournamentId
	}
	return nil
}

func (x *V2WebFootInstantMatchRequest) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *V2WebFootInstantMatchRequest) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *V2WebFootInstantMatchRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *V2WebFootInstantMatchRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *V2WebFootInstantMatchRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *V2WebFootInstantMatchRequest) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *V2WebFootInstantMatchRequest) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type V2WebFootInstantMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*V2WebFootInstantMatch `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *V2WebFootInstantMatchResponse) Reset() {
	*x = V2WebFootInstantMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootInstantMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootInstantMatchResponse) ProtoMessage() {}

func (x *V2WebFootInstantMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootInstantMatchResponse.ProtoReflect.Descriptor instead.
func (*V2WebFootInstantMatchResponse) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{1}
}

func (x *V2WebFootInstantMatchResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *V2WebFootInstantMatchResponse) GetList() []*V2WebFootInstantMatch {
	if x != nil {
		return x.List
	}
	return nil
}

type V2WebFootInstantMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                 `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`                        //联赛ID
	ContinentName  string                `protobuf:"bytes,4,opt,name=ContinentName,proto3" json:"ContinentName,omitempty"`   //联赛名称
	ContinentColor string                `protobuf:"bytes,8,opt,name=ContinentColor,proto3" json:"ContinentColor,omitempty"` //联赛颜色
	Attention      bool                  `protobuf:"varint,6,opt,name=attention,proto3" json:"attention,omitempty"`          //是否收藏
	StartTime      int64                 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`          //比赛时间戳；联赛排序时不可用
	MatchStatus    string                `protobuf:"bytes,1,opt,name=matchStatus,proto3" json:"matchStatus,omitempty"`       //比赛大状态；联赛排序时不可用
	MatchList      []*V2WebFootMatchList `protobuf:"bytes,7,rep,name=match_list,json=matchList,proto3" json:"match_list,omitempty"`
}

func (x *V2WebFootInstantMatch) Reset() {
	*x = V2WebFootInstantMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootInstantMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootInstantMatch) ProtoMessage() {}

func (x *V2WebFootInstantMatch) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootInstantMatch.ProtoReflect.Descriptor instead.
func (*V2WebFootInstantMatch) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{2}
}

func (x *V2WebFootInstantMatch) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *V2WebFootInstantMatch) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *V2WebFootInstantMatch) GetContinentColor() string {
	if x != nil {
		return x.ContinentColor
	}
	return ""
}

func (x *V2WebFootInstantMatch) GetAttention() bool {
	if x != nil {
		return x.Attention
	}
	return false
}

func (x *V2WebFootInstantMatch) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *V2WebFootInstantMatch) GetMatchStatus() string {
	if x != nil {
		return x.MatchStatus
	}
	return ""
}

func (x *V2WebFootInstantMatch) GetMatchList() []*V2WebFootMatchList {
	if x != nil {
		return x.MatchList
	}
	return nil
}

type V2WebFootMatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                          //比赛ID
	MatchTime              int64    `protobuf:"varint,2,opt,name=matchTime,proto3" json:"matchTime,omitempty"`                            //计划比赛开始时间
	StartTime              int64    `protobuf:"varint,30,opt,name=startTime,proto3" json:"startTime,omitempty"`                           //实际比赛开始时间
	TimePlayed             int64    `protobuf:"varint,31,opt,name=timePlayed,proto3" json:"timePlayed,omitempty"`                         //足球比赛已进行时间（秒）
	TimeRunning            int64    `protobuf:"varint,32,opt,name=timeRunning,proto3" json:"timeRunning,omitempty"`                       //比赛时钟是否计时中：1计时中 0暂停计时；
	TimeRemaining          int64    `protobuf:"varint,33,opt,name=timeRemaining,proto3" json:"timeRemaining,omitempty"`                   //篮球每节比赛剩余时间（秒）；
	TimeUpdate             int64    `protobuf:"varint,34,opt,name=timeUpdate,proto3" json:"timeUpdate,omitempty"`                         //比赛进行时间更新时间；
	CurrentPeriodStartTime int64    `protobuf:"varint,35,opt,name=CurrentPeriodStartTime,proto3" json:"CurrentPeriodStartTime,omitempty"` //当前状态开始时间；
	MatchStatusId          int64    `protobuf:"varint,29,opt,name=MatchStatusId,proto3" json:"MatchStatusId,omitempty"`                   //比赛小状态ID
	MatchStatus            string   `protobuf:"bytes,3,opt,name=MatchStatus,proto3" json:"MatchStatus,omitempty"`                         //比赛大状态
	MatchStatusResult      int64    `protobuf:"varint,28,opt,name=MatchStatusResult,proto3" json:"MatchStatusResult,omitempty"`           //比赛大状态ID 2：未开始  1进行中 3已结束 4取消
	Reason                 string   `protobuf:"bytes,36,opt,name=reason,proto3" json:"reason,omitempty"`                                  //比赛异常原因
	Minute                 int64    `protobuf:"varint,24,opt,name=minute,proto3" json:"minute,omitempty"`                                 //比赛进行的分钟数
	HomeTeamId             int64    `protobuf:"varint,4,opt,name=homeTeamId,proto3" json:"homeTeamId,omitempty"`                          //主队ID
	HomeTeamName           string   `protobuf:"bytes,5,opt,name=homeTeamName,proto3" json:"homeTeamName,omitempty"`                       //主队名称
	HomeTeamRank           int64    `protobuf:"varint,6,opt,name=homeTeamRank,proto3" json:"homeTeamRank,omitempty"`                      //主队排行
	HomeTeamScore          int64    `protobuf:"varint,7,opt,name=homeTeamScore,proto3" json:"homeTeamScore,omitempty"`                    //主队得分
	HomeTeamRed            int64    `protobuf:"varint,8,opt,name=homeTeamRed,proto3" json:"homeTeamRed,omitempty"`                        //主队红牌数
	HomeTeamYellow         int64    `protobuf:"varint,9,opt,name=homeTeamYellow,proto3" json:"homeTeamYellow,omitempty"`                  //主队黄牌数
	HomeTeamHalfScore      int64    `protobuf:"varint,10,opt,name=homeTeamHalfScore,proto3" json:"homeTeamHalfScore,omitempty"`           //主队半场得分
	HomeTeamCornerScore    int64    `protobuf:"varint,11,opt,name=homeTeamCornerScore,proto3" json:"homeTeamCornerScore,omitempty"`       //主队角球得分
	AwayTeamId             int64    `protobuf:"varint,12,opt,name=awayTeamId,proto3" json:"awayTeamId,omitempty"`                         //客队ID
	AwayTeamName           string   `protobuf:"bytes,13,opt,name=awayTeamName,proto3" json:"awayTeamName,omitempty"`                      //客队名称
	AwayTeamRank           int64    `protobuf:"varint,14,opt,name=awayTeamRank,proto3" json:"awayTeamRank,omitempty"`                     //客队排行
	AwayTeamScore          int64    `protobuf:"varint,15,opt,name=awayTeamScore,proto3" json:"awayTeamScore,omitempty"`                   //客队得分
	AwayTeamRed            int64    `protobuf:"varint,16,opt,name=awayTeamRed,proto3" json:"awayTeamRed,omitempty"`                       //客队红牌数
	AwayTeamYellow         int64    `protobuf:"varint,17,opt,name=awayTeamYellow,proto3" json:"awayTeamYellow,omitempty"`                 //客队黄牌数
	AwayTeamHalfScore      int64    `protobuf:"varint,18,opt,name=awayTeamHalfScore,proto3" json:"awayTeamHalfScore,omitempty"`           //客队半场得分
	AwayTeamCornerScore    int64    `protobuf:"varint,19,opt,name=awayTeamCornerScore,proto3" json:"awayTeamCornerScore,omitempty"`       //客队角球得分
	V2AsianPlate           []string `protobuf:"bytes,20,rep,name=V2AsianPlate,proto3" json:"V2AsianPlate,omitempty"`                      //亚盘
	V2EuropeanPlate        []string `protobuf:"bytes,21,rep,name=V2EuropeanPlate,proto3" json:"V2EuropeanPlate,omitempty"`                //欧盘
	V2Balls                []string `protobuf:"bytes,22,rep,name=V2Balls,proto3" json:"V2Balls,omitempty"`                                //大小球
	Attention              bool     `protobuf:"varint,23,opt,name=attention,proto3" json:"attention,omitempty"`                           //是否关注
}

func (x *V2WebFootMatchList) Reset() {
	*x = V2WebFootMatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootMatchList) ProtoMessage() {}

func (x *V2WebFootMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootMatchList.ProtoReflect.Descriptor instead.
func (*V2WebFootMatchList) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{3}
}

func (x *V2WebFootMatchList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *V2WebFootMatchList) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *V2WebFootMatchList) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *V2WebFootMatchList) GetTimePlayed() int64 {
	if x != nil {
		return x.TimePlayed
	}
	return 0
}

func (x *V2WebFootMatchList) GetTimeRunning() int64 {
	if x != nil {
		return x.TimeRunning
	}
	return 0
}

func (x *V2WebFootMatchList) GetTimeRemaining() int64 {
	if x != nil {
		return x.TimeRemaining
	}
	return 0
}

func (x *V2WebFootMatchList) GetTimeUpdate() int64 {
	if x != nil {
		return x.TimeUpdate
	}
	return 0
}

func (x *V2WebFootMatchList) GetCurrentPeriodStartTime() int64 {
	if x != nil {
		return x.CurrentPeriodStartTime
	}
	return 0
}

func (x *V2WebFootMatchList) GetMatchStatusId() int64 {
	if x != nil {
		return x.MatchStatusId
	}
	return 0
}

func (x *V2WebFootMatchList) GetMatchStatus() string {
	if x != nil {
		return x.MatchStatus
	}
	return ""
}

func (x *V2WebFootMatchList) GetMatchStatusResult() int64 {
	if x != nil {
		return x.MatchStatusResult
	}
	return 0
}

func (x *V2WebFootMatchList) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *V2WebFootMatchList) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamId() int64 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamName() string {
	if x != nil {
		return x.HomeTeamName
	}
	return ""
}

func (x *V2WebFootMatchList) GetHomeTeamRank() int64 {
	if x != nil {
		return x.HomeTeamRank
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamScore() int64 {
	if x != nil {
		return x.HomeTeamScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamRed() int64 {
	if x != nil {
		return x.HomeTeamRed
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamYellow() int64 {
	if x != nil {
		return x.HomeTeamYellow
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamHalfScore() int64 {
	if x != nil {
		return x.HomeTeamHalfScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetHomeTeamCornerScore() int64 {
	if x != nil {
		return x.HomeTeamCornerScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamId() int64 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamName() string {
	if x != nil {
		return x.AwayTeamName
	}
	return ""
}

func (x *V2WebFootMatchList) GetAwayTeamRank() int64 {
	if x != nil {
		return x.AwayTeamRank
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamScore() int64 {
	if x != nil {
		return x.AwayTeamScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamRed() int64 {
	if x != nil {
		return x.AwayTeamRed
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamYellow() int64 {
	if x != nil {
		return x.AwayTeamYellow
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamHalfScore() int64 {
	if x != nil {
		return x.AwayTeamHalfScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetAwayTeamCornerScore() int64 {
	if x != nil {
		return x.AwayTeamCornerScore
	}
	return 0
}

func (x *V2WebFootMatchList) GetV2AsianPlate() []string {
	if x != nil {
		return x.V2AsianPlate
	}
	return nil
}

func (x *V2WebFootMatchList) GetV2EuropeanPlate() []string {
	if x != nil {
		return x.V2EuropeanPlate
	}
	return nil
}

func (x *V2WebFootMatchList) GetV2Balls() []string {
	if x != nil {
		return x.V2Balls
	}
	return nil
}

func (x *V2WebFootMatchList) GetAttention() bool {
	if x != nil {
		return x.Attention
	}
	return false
}

//即时比赛联赛筛选
type V2WebFootLeagueFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  string  `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`       //请求语言
	TimeZone  int64   `protobuf:"varint,2,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`      //时区
	MatchTime string  `protobuf:"bytes,3,opt,name=matchTime,proto3" json:"matchTime,omitempty"`     //比赛时间
	TabType   int64   `protobuf:"varint,4,opt,name=tabType,proto3" json:"tabType,omitempty"`        //查询类型 1.热门；2.即时；3.全部；4.收藏
	MatchId   []int64 `protobuf:"varint,5,rep,packed,name=matchId,proto3" json:"matchId,omitempty"` //比赛ID，查询收藏比赛时使用
}

func (x *V2WebFootLeagueFilterRequest) Reset() {
	*x = V2WebFootLeagueFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootLeagueFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootLeagueFilterRequest) ProtoMessage() {}

func (x *V2WebFootLeagueFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootLeagueFilterRequest.ProtoReflect.Descriptor instead.
func (*V2WebFootLeagueFilterRequest) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{4}
}

func (x *V2WebFootLeagueFilterRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *V2WebFootLeagueFilterRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *V2WebFootLeagueFilterRequest) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *V2WebFootLeagueFilterRequest) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *V2WebFootLeagueFilterRequest) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type V2WebFootLeagueFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotList        []*V2WebFootLeagueFilter `protobuf:"bytes,1,rep,name=hotList,proto3" json:"hotList,omitempty"`               //热门联赛
	OtherList      []*V2WebFootLeagueFilter `protobuf:"bytes,2,rep,name=otherList,proto3" json:"otherList,omitempty"`           //全部联赛
	FirstLevelList []*V2WebFootLeagueFilter `protobuf:"bytes,3,rep,name=firstLevelList,proto3" json:"firstLevelList,omitempty"` //一级联赛
}

func (x *V2WebFootLeagueFilterResponse) Reset() {
	*x = V2WebFootLeagueFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootLeagueFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootLeagueFilterResponse) ProtoMessage() {}

func (x *V2WebFootLeagueFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootLeagueFilterResponse.ProtoReflect.Descriptor instead.
func (*V2WebFootLeagueFilterResponse) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{5}
}

func (x *V2WebFootLeagueFilterResponse) GetHotList() []*V2WebFootLeagueFilter {
	if x != nil {
		return x.HotList
	}
	return nil
}

func (x *V2WebFootLeagueFilterResponse) GetOtherList() []*V2WebFootLeagueFilter {
	if x != nil {
		return x.OtherList
	}
	return nil
}

func (x *V2WebFootLeagueFilterResponse) GetFirstLevelList() []*V2WebFootLeagueFilter {
	if x != nil {
		return x.FirstLevelList
	}
	return nil
}

type V2WebFootLeagueFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                        //联赛ID
	ContinentName  string `protobuf:"bytes,2,opt,name=ContinentName,proto3" json:"ContinentName,omitempty"`   //联赛名称
	LeagueInitials string `protobuf:"bytes,3,opt,name=LeagueInitials,proto3" json:"LeagueInitials,omitempty"` //联赛下名称的首字母，如果时中文，就是拼音首字母；如果首字母一样，就去第二个字母拼接，如果第二个一样，就去第三个拼接，以此类推
	Match          int64  `protobuf:"varint,4,opt,name=match,proto3" json:"match,omitempty"`                  //联赛下的比赛数量
}

func (x *V2WebFootLeagueFilter) Reset() {
	*x = V2WebFootLeagueFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_web_foot_instant_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2WebFootLeagueFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2WebFootLeagueFilter) ProtoMessage() {}

func (x *V2WebFootLeagueFilter) ProtoReflect() protoreflect.Message {
	mi := &file_v2_web_foot_instant_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2WebFootLeagueFilter.ProtoReflect.Descriptor instead.
func (*V2WebFootLeagueFilter) Descriptor() ([]byte, []int) {
	return file_v2_web_foot_instant_match_proto_rawDescGZIP(), []int{6}
}

func (x *V2WebFootLeagueFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *V2WebFootLeagueFilter) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *V2WebFootLeagueFilter) GetLeagueInitials() string {
	if x != nil {
		return x.LeagueInitials
	}
	return ""
}

func (x *V2WebFootLeagueFilter) GetMatch() int64 {
	if x != nil {
		return x.Match
	}
	return 0
}

var File_v2_web_foot_instant_match_proto protoreflect.FileDescriptor

var file_v2_web_foot_instant_match_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x32, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x90, 0x02, 0x0a, 0x1c, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1d, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x32, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x15, 0x56, 0x32, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xbc, 0x09, 0x0a, 0x12, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61,
	0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x32,
	0x41, 0x73, 0x69, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x56, 0x32, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x56, 0x32, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x32, 0x45, 0x75, 0x72, 0x6f, 0x70,
	0x65, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x32, 0x42, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x56, 0x32, 0x42, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x1d,
	0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x56, 0x32, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x56, 0x32, 0x57, 0x65, 0x62, 0x46,
	0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_web_foot_instant_match_proto_rawDescOnce sync.Once
	file_v2_web_foot_instant_match_proto_rawDescData = file_v2_web_foot_instant_match_proto_rawDesc
)

func file_v2_web_foot_instant_match_proto_rawDescGZIP() []byte {
	file_v2_web_foot_instant_match_proto_rawDescOnce.Do(func() {
		file_v2_web_foot_instant_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_web_foot_instant_match_proto_rawDescData)
	})
	return file_v2_web_foot_instant_match_proto_rawDescData
}

var file_v2_web_foot_instant_match_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_v2_web_foot_instant_match_proto_goTypes = []interface{}{
	(*V2WebFootInstantMatchRequest)(nil),  // 0: V2WebFootInstantMatchRequest
	(*V2WebFootInstantMatchResponse)(nil), // 1: V2WebFootInstantMatchResponse
	(*V2WebFootInstantMatch)(nil),         // 2: V2WebFootInstantMatch
	(*V2WebFootMatchList)(nil),            // 3: V2WebFootMatchList
	(*V2WebFootLeagueFilterRequest)(nil),  // 4: V2WebFootLeagueFilterRequest
	(*V2WebFootLeagueFilterResponse)(nil), // 5: V2WebFootLeagueFilterResponse
	(*V2WebFootLeagueFilter)(nil),         // 6: V2WebFootLeagueFilter
}
var file_v2_web_foot_instant_match_proto_depIdxs = []int32{
	2, // 0: V2WebFootInstantMatchResponse.list:type_name -> V2WebFootInstantMatch
	3, // 1: V2WebFootInstantMatch.match_list:type_name -> V2WebFootMatchList
	6, // 2: V2WebFootLeagueFilterResponse.hotList:type_name -> V2WebFootLeagueFilter
	6, // 3: V2WebFootLeagueFilterResponse.otherList:type_name -> V2WebFootLeagueFilter
	6, // 4: V2WebFootLeagueFilterResponse.firstLevelList:type_name -> V2WebFootLeagueFilter
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_v2_web_foot_instant_match_proto_init() }
func file_v2_web_foot_instant_match_proto_init() {
	if File_v2_web_foot_instant_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_web_foot_instant_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootInstantMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootInstantMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootInstantMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootMatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootLeagueFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootLeagueFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_web_foot_instant_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2WebFootLeagueFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_web_foot_instant_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v2_web_foot_instant_match_proto_goTypes,
		DependencyIndexes: file_v2_web_foot_instant_match_proto_depIdxs,
		MessageInfos:      file_v2_web_foot_instant_match_proto_msgTypes,
	}.Build()
	File_v2_web_foot_instant_match_proto = out.File
	file_v2_web_foot_instant_match_proto_rawDesc = nil
	file_v2_web_foot_instant_match_proto_goTypes = nil
	file_v2_web_foot_instant_match_proto_depIdxs = nil
}
