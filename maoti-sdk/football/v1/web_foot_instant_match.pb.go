// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: web_foot_instant_match.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//即时比赛列表
type WebFootInstantMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language     string  `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`                 //请求语言
	TournamentId []int64 `protobuf:"varint,2,rep,packed,name=tournamentId,proto3" json:"tournamentId,omitempty"` //联赛ID
	MatchTime    string  `protobuf:"bytes,3,opt,name=matchTime,proto3" json:"matchTime,omitempty"`               //比赛时间
	TimeZone     int64   `protobuf:"varint,4,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`                //时区
}

func (x *WebFootInstantMatchRequest) Reset() {
	*x = WebFootInstantMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootInstantMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootInstantMatchRequest) ProtoMessage() {}

func (x *WebFootInstantMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootInstantMatchRequest.ProtoReflect.Descriptor instead.
func (*WebFootInstantMatchRequest) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{0}
}

func (x *WebFootInstantMatchRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebFootInstantMatchRequest) GetTournamentId() []int64 {
	if x != nil {
		return x.TournamentId
	}
	return nil
}

func (x *WebFootInstantMatchRequest) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *WebFootInstantMatchRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type WebFootInstantMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WebFootInstantMatch `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WebFootInstantMatchResponse) Reset() {
	*x = WebFootInstantMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootInstantMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootInstantMatchResponse) ProtoMessage() {}

func (x *WebFootInstantMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootInstantMatchResponse.ProtoReflect.Descriptor instead.
func (*WebFootInstantMatchResponse) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{1}
}

func (x *WebFootInstantMatchResponse) GetList() []*WebFootInstantMatch {
	if x != nil {
		return x.List
	}
	return nil
}

type WebFootInstantMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64               `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`                        //联赛ID
	ContinentName  string              `protobuf:"bytes,4,opt,name=ContinentName,proto3" json:"ContinentName,omitempty"`   //联赛名称
	ContinentImage string              `protobuf:"bytes,5,opt,name=ContinentImage,proto3" json:"ContinentImage,omitempty"` //联赛图片
	Attention      bool                `protobuf:"varint,6,opt,name=attention,proto3" json:"attention,omitempty"`          //是否关注
	MatchList      []*WebFootMatchList `protobuf:"bytes,7,rep,name=match_list,json=matchList,proto3" json:"match_list,omitempty"`
}

func (x *WebFootInstantMatch) Reset() {
	*x = WebFootInstantMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootInstantMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootInstantMatch) ProtoMessage() {}

func (x *WebFootInstantMatch) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootInstantMatch.ProtoReflect.Descriptor instead.
func (*WebFootInstantMatch) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{2}
}

func (x *WebFootInstantMatch) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebFootInstantMatch) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *WebFootInstantMatch) GetContinentImage() string {
	if x != nil {
		return x.ContinentImage
	}
	return ""
}

func (x *WebFootInstantMatch) GetAttention() bool {
	if x != nil {
		return x.Attention
	}
	return false
}

func (x *WebFootInstantMatch) GetMatchList() []*WebFootMatchList {
	if x != nil {
		return x.MatchList
	}
	return nil
}

type WebFootMatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                    //比赛ID
	MatchTime           int64    `protobuf:"varint,2,opt,name=matchTime,proto3" json:"matchTime,omitempty"`                      //比赛时间
	MatchStatus         string   `protobuf:"bytes,3,opt,name=matchStatus,proto3" json:"matchStatus,omitempty"`                   //比赛状态
	Minute              string   `protobuf:"bytes,24,opt,name=minute,proto3" json:"minute,omitempty"`                            //比赛进行的分钟数
	HomeTeamId          int64    `protobuf:"varint,4,opt,name=homeTeamId,proto3" json:"homeTeamId,omitempty"`                    //主队ID
	HomeTeamName        string   `protobuf:"bytes,5,opt,name=homeTeamName,proto3" json:"homeTeamName,omitempty"`                 //主队名称
	HomeTeamRank        int64    `protobuf:"varint,6,opt,name=homeTeamRank,proto3" json:"homeTeamRank,omitempty"`                //主队排行
	HomeTeamScore       int64    `protobuf:"varint,7,opt,name=homeTeamScore,proto3" json:"homeTeamScore,omitempty"`              //主队得分
	HomeTeamRed         int64    `protobuf:"varint,8,opt,name=homeTeamRed,proto3" json:"homeTeamRed,omitempty"`                  //主队红牌数
	HomeTeamYellow      int64    `protobuf:"varint,9,opt,name=homeTeamYellow,proto3" json:"homeTeamYellow,omitempty"`            //主队黄牌数
	HomeTeamHalfScore   int64    `protobuf:"varint,10,opt,name=homeTeamHalfScore,proto3" json:"homeTeamHalfScore,omitempty"`     //主队半场得分
	HomeTeamCornerScore int64    `protobuf:"varint,11,opt,name=homeTeamCornerScore,proto3" json:"homeTeamCornerScore,omitempty"` //主队角球得分
	AwayTeamId          int64    `protobuf:"varint,12,opt,name=awayTeamId,proto3" json:"awayTeamId,omitempty"`                   //客队ID
	AwayTeamName        string   `protobuf:"bytes,13,opt,name=awayTeamName,proto3" json:"awayTeamName,omitempty"`                //客队名称
	AwayTeamRank        int64    `protobuf:"varint,14,opt,name=awayTeamRank,proto3" json:"awayTeamRank,omitempty"`               //客队排行
	AwayTeamScore       int64    `protobuf:"varint,15,opt,name=awayTeamScore,proto3" json:"awayTeamScore,omitempty"`             //客队得分
	AwayTeamRed         int64    `protobuf:"varint,16,opt,name=awayTeamRed,proto3" json:"awayTeamRed,omitempty"`                 //客队红牌数
	AwayTeamYellow      int64    `protobuf:"varint,17,opt,name=awayTeamYellow,proto3" json:"awayTeamYellow,omitempty"`           //客队黄牌数
	AwayTeamHalfScore   int64    `protobuf:"varint,18,opt,name=awayTeamHalfScore,proto3" json:"awayTeamHalfScore,omitempty"`     //客队半场得分
	AwayTeamCornerScore int64    `protobuf:"varint,19,opt,name=awayTeamCornerScore,proto3" json:"awayTeamCornerScore,omitempty"` //客队角球得分
	AsianPlate          []string `protobuf:"bytes,20,rep,name=AsianPlate,proto3" json:"AsianPlate,omitempty"`                    //亚盘
	EuropeanPlate       []string `protobuf:"bytes,21,rep,name=EuropeanPlate,proto3" json:"EuropeanPlate,omitempty"`              //欧盘
	Balls               []string `protobuf:"bytes,22,rep,name=Balls,proto3" json:"Balls,omitempty"`                              //大小球
	Attention           bool     `protobuf:"varint,23,opt,name=attention,proto3" json:"attention,omitempty"`                     //是否关注
}

func (x *WebFootMatchList) Reset() {
	*x = WebFootMatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootMatchList) ProtoMessage() {}

func (x *WebFootMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootMatchList.ProtoReflect.Descriptor instead.
func (*WebFootMatchList) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{3}
}

func (x *WebFootMatchList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebFootMatchList) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *WebFootMatchList) GetMatchStatus() string {
	if x != nil {
		return x.MatchStatus
	}
	return ""
}

func (x *WebFootMatchList) GetMinute() string {
	if x != nil {
		return x.Minute
	}
	return ""
}

func (x *WebFootMatchList) GetHomeTeamId() int64 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamName() string {
	if x != nil {
		return x.HomeTeamName
	}
	return ""
}

func (x *WebFootMatchList) GetHomeTeamRank() int64 {
	if x != nil {
		return x.HomeTeamRank
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamScore() int64 {
	if x != nil {
		return x.HomeTeamScore
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamRed() int64 {
	if x != nil {
		return x.HomeTeamRed
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamYellow() int64 {
	if x != nil {
		return x.HomeTeamYellow
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamHalfScore() int64 {
	if x != nil {
		return x.HomeTeamHalfScore
	}
	return 0
}

func (x *WebFootMatchList) GetHomeTeamCornerScore() int64 {
	if x != nil {
		return x.HomeTeamCornerScore
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamId() int64 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamName() string {
	if x != nil {
		return x.AwayTeamName
	}
	return ""
}

func (x *WebFootMatchList) GetAwayTeamRank() int64 {
	if x != nil {
		return x.AwayTeamRank
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamScore() int64 {
	if x != nil {
		return x.AwayTeamScore
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamRed() int64 {
	if x != nil {
		return x.AwayTeamRed
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamYellow() int64 {
	if x != nil {
		return x.AwayTeamYellow
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamHalfScore() int64 {
	if x != nil {
		return x.AwayTeamHalfScore
	}
	return 0
}

func (x *WebFootMatchList) GetAwayTeamCornerScore() int64 {
	if x != nil {
		return x.AwayTeamCornerScore
	}
	return 0
}

func (x *WebFootMatchList) GetAsianPlate() []string {
	if x != nil {
		return x.AsianPlate
	}
	return nil
}

func (x *WebFootMatchList) GetEuropeanPlate() []string {
	if x != nil {
		return x.EuropeanPlate
	}
	return nil
}

func (x *WebFootMatchList) GetBalls() []string {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *WebFootMatchList) GetAttention() bool {
	if x != nil {
		return x.Attention
	}
	return false
}

//即时比赛联赛筛选
type WebFootLeagueFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`  //请求语言
	TimeZone int64  `protobuf:"varint,4,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"` //时区
}

func (x *WebFootLeagueFilterRequest) Reset() {
	*x = WebFootLeagueFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootLeagueFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootLeagueFilterRequest) ProtoMessage() {}

func (x *WebFootLeagueFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootLeagueFilterRequest.ProtoReflect.Descriptor instead.
func (*WebFootLeagueFilterRequest) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{4}
}

func (x *WebFootLeagueFilterRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebFootLeagueFilterRequest) GetTimeZone() int64 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type WebFootLeagueFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotList   []*WebFootLeagueFilter `protobuf:"bytes,1,rep,name=hot_list,json=hotList,proto3" json:"hot_list,omitempty"`
	OtherList []*WebFootLeagueFilter `protobuf:"bytes,2,rep,name=other_list,json=otherList,proto3" json:"other_list,omitempty"`
}

func (x *WebFootLeagueFilterResponse) Reset() {
	*x = WebFootLeagueFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootLeagueFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootLeagueFilterResponse) ProtoMessage() {}

func (x *WebFootLeagueFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootLeagueFilterResponse.ProtoReflect.Descriptor instead.
func (*WebFootLeagueFilterResponse) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{5}
}

func (x *WebFootLeagueFilterResponse) GetHotList() []*WebFootLeagueFilter {
	if x != nil {
		return x.HotList
	}
	return nil
}

func (x *WebFootLeagueFilterResponse) GetOtherList() []*WebFootLeagueFilter {
	if x != nil {
		return x.OtherList
	}
	return nil
}

type WebFootLeagueFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`                        //联赛ID
	ContinentName  string `protobuf:"bytes,4,opt,name=ContinentName,proto3" json:"ContinentName,omitempty"`   //联赛名称
	ContinentImage string `protobuf:"bytes,5,opt,name=ContinentImage,proto3" json:"ContinentImage,omitempty"` //联赛图片
	LeagueInitials string `protobuf:"bytes,6,opt,name=LeagueInitials,proto3" json:"LeagueInitials,omitempty"` //联赛下名称的首字母，如果时中文，就是拼音首字母；如果首字母一样，就去第二个字母拼接，如果第二个一样，就去第三个拼接，以此类推
}

func (x *WebFootLeagueFilter) Reset() {
	*x = WebFootLeagueFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_foot_instant_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebFootLeagueFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFootLeagueFilter) ProtoMessage() {}

func (x *WebFootLeagueFilter) ProtoReflect() protoreflect.Message {
	mi := &file_web_foot_instant_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFootLeagueFilter.ProtoReflect.Descriptor instead.
func (*WebFootLeagueFilter) Descriptor() ([]byte, []int) {
	return file_web_foot_instant_match_proto_rawDescGZIP(), []int{6}
}

func (x *WebFootLeagueFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebFootLeagueFilter) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *WebFootLeagueFilter) GetContinentImage() string {
	if x != nil {
		return x.ContinentImage
	}
	return ""
}

func (x *WebFootLeagueFilter) GetLeagueInitials() string {
	if x != nil {
		return x.LeagueInitials
	}
	return ""
}

var File_web_foot_instant_match_proto protoreflect.FileDescriptor

var file_web_foot_instant_match_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x65, 0x62, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96,
	0x01, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xc3, 0x01, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x06, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x59,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x75, 0x72, 0x6f,
	0x70, 0x65, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x1a, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x6f,
	0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x57, 0x65,
	0x62, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_foot_instant_match_proto_rawDescOnce sync.Once
	file_web_foot_instant_match_proto_rawDescData = file_web_foot_instant_match_proto_rawDesc
)

func file_web_foot_instant_match_proto_rawDescGZIP() []byte {
	file_web_foot_instant_match_proto_rawDescOnce.Do(func() {
		file_web_foot_instant_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_foot_instant_match_proto_rawDescData)
	})
	return file_web_foot_instant_match_proto_rawDescData
}

var file_web_foot_instant_match_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_web_foot_instant_match_proto_goTypes = []interface{}{
	(*WebFootInstantMatchRequest)(nil),  // 0: WebFootInstantMatchRequest
	(*WebFootInstantMatchResponse)(nil), // 1: WebFootInstantMatchResponse
	(*WebFootInstantMatch)(nil),         // 2: WebFootInstantMatch
	(*WebFootMatchList)(nil),            // 3: WebFootMatchList
	(*WebFootLeagueFilterRequest)(nil),  // 4: WebFootLeagueFilterRequest
	(*WebFootLeagueFilterResponse)(nil), // 5: WebFootLeagueFilterResponse
	(*WebFootLeagueFilter)(nil),         // 6: WebFootLeagueFilter
}
var file_web_foot_instant_match_proto_depIdxs = []int32{
	2, // 0: WebFootInstantMatchResponse.list:type_name -> WebFootInstantMatch
	3, // 1: WebFootInstantMatch.match_list:type_name -> WebFootMatchList
	6, // 2: WebFootLeagueFilterResponse.hot_list:type_name -> WebFootLeagueFilter
	6, // 3: WebFootLeagueFilterResponse.other_list:type_name -> WebFootLeagueFilter
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_web_foot_instant_match_proto_init() }
func file_web_foot_instant_match_proto_init() {
	if File_web_foot_instant_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web_foot_instant_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootInstantMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootInstantMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootInstantMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootMatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootLeagueFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootLeagueFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_foot_instant_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebFootLeagueFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_foot_instant_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_web_foot_instant_match_proto_goTypes,
		DependencyIndexes: file_web_foot_instant_match_proto_depIdxs,
		MessageInfos:      file_web_foot_instant_match_proto_msgTypes,
	}.Build()
	File_web_foot_instant_match_proto = out.File
	file_web_foot_instant_match_proto_rawDesc = nil
	file_web_foot_instant_match_proto_goTypes = nil
	file_web_foot_instant_match_proto_depIdxs = nil
}
