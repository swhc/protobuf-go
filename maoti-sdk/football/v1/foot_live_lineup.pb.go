// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: foot_live_lineup.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//直播 - 球队阵容
type FootLiveLineupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  int64  `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`  //比赛id
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"` //请求语言  1:zh  2:en
}

func (x *FootLiveLineupRequest) Reset() {
	*x = FootLiveLineupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupRequest) ProtoMessage() {}

func (x *FootLiveLineupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupRequest.ProtoReflect.Descriptor instead.
func (*FootLiveLineupRequest) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{0}
}

func (x *FootLiveLineupRequest) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *FootLiveLineupRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

//直播 - 球队阵容响应
type FootLiveLineupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingMain      *FootLiveLineupDetail      `protobuf:"bytes,1,opt,name=starting_main,json=startingMain,proto3" json:"starting_main,omitempty"`                  //阵容首发（主队）
	StartingCust      *FootLiveLineupDetail      `protobuf:"bytes,2,opt,name=starting_cust,json=startingCust,proto3" json:"starting_cust,omitempty"`                  //阵容首发（客队）
	ForecastMain      *FootLiveLineupDetail      `protobuf:"bytes,3,opt,name=forecast_main,json=forecastMain,proto3" json:"forecast_main,omitempty"`                  //预测阵容（主队）
	ForecastCust      *FootLiveLineupDetail      `protobuf:"bytes,4,opt,name=forecast_cust,json=forecastCust,proto3" json:"forecast_cust,omitempty"`                  //预测阵容（客队）
	ScaleList         []*FootLiveLineupScale     `protobuf:"bytes,5,rep,name=scale_list,json=scaleList,proto3" json:"scale_list,omitempty"`                           //预测阵容占比
	ReplacementMain   *FootLiveLineupReplacement `protobuf:"bytes,6,opt,name=replacement_main,json=replacementMain,proto3" json:"replacement_main,omitempty"`         //本场换人（主队）
	ReplacementCust   *FootLiveLineupReplacement `protobuf:"bytes,7,opt,name=replacement_cust,json=replacementCust,proto3" json:"replacement_cust,omitempty"`         //本场换人（客队）
	ReserveLineupMain *FootLiveLineupReserve     `protobuf:"bytes,8,opt,name=reserve_lineup_main,json=reserveLineupMain,proto3" json:"reserve_lineup_main,omitempty"` //替补阵容（主队）
	ReserveLineupCust *FootLiveLineupReserve     `protobuf:"bytes,9,opt,name=reserve_lineup_cust,json=reserveLineupCust,proto3" json:"reserve_lineup_cust,omitempty"` //替补阵容（客队）
	InjuryArrestMain  *FootLiveLineupInjury      `protobuf:"bytes,10,opt,name=injury_arrest_main,json=injuryArrestMain,proto3" json:"injury_arrest_main,omitempty"`   //伤停情况（主队）
	InjuryArrestCust  *FootLiveLineupInjury      `protobuf:"bytes,11,opt,name=injury_arrest_cust,json=injuryArrestCust,proto3" json:"injury_arrest_cust,omitempty"`   //伤停情况（客队）
}

func (x *FootLiveLineupResponse) Reset() {
	*x = FootLiveLineupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupResponse) ProtoMessage() {}

func (x *FootLiveLineupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupResponse.ProtoReflect.Descriptor instead.
func (*FootLiveLineupResponse) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{1}
}

func (x *FootLiveLineupResponse) GetStartingMain() *FootLiveLineupDetail {
	if x != nil {
		return x.StartingMain
	}
	return nil
}

func (x *FootLiveLineupResponse) GetStartingCust() *FootLiveLineupDetail {
	if x != nil {
		return x.StartingCust
	}
	return nil
}

func (x *FootLiveLineupResponse) GetForecastMain() *FootLiveLineupDetail {
	if x != nil {
		return x.ForecastMain
	}
	return nil
}

func (x *FootLiveLineupResponse) GetForecastCust() *FootLiveLineupDetail {
	if x != nil {
		return x.ForecastCust
	}
	return nil
}

func (x *FootLiveLineupResponse) GetScaleList() []*FootLiveLineupScale {
	if x != nil {
		return x.ScaleList
	}
	return nil
}

func (x *FootLiveLineupResponse) GetReplacementMain() *FootLiveLineupReplacement {
	if x != nil {
		return x.ReplacementMain
	}
	return nil
}

func (x *FootLiveLineupResponse) GetReplacementCust() *FootLiveLineupReplacement {
	if x != nil {
		return x.ReplacementCust
	}
	return nil
}

func (x *FootLiveLineupResponse) GetReserveLineupMain() *FootLiveLineupReserve {
	if x != nil {
		return x.ReserveLineupMain
	}
	return nil
}

func (x *FootLiveLineupResponse) GetReserveLineupCust() *FootLiveLineupReserve {
	if x != nil {
		return x.ReserveLineupCust
	}
	return nil
}

func (x *FootLiveLineupResponse) GetInjuryArrestMain() *FootLiveLineupInjury {
	if x != nil {
		return x.InjuryArrestMain
	}
	return nil
}

func (x *FootLiveLineupResponse) GetInjuryArrestCust() *FootLiveLineupInjury {
	if x != nil {
		return x.InjuryArrestCust
	}
	return nil
}

type FootLiveLineupDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         int64                   `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                           //球队id
	TeamImage      string                  `protobuf:"bytes,2,opt,name=team_image,json=teamImage,proto3" json:"team_image,omitempty"`                   //球队队徽
	TeamName       string                  `protobuf:"bytes,3,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`                      //球队名称
	Formation      string                  `protobuf:"bytes,4,opt,name=formation,proto3" json:"formation,omitempty"`                                    //阵容
	WinRate        int64                   `protobuf:"varint,5,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`                        //胜率
	BigBallRate    int64                   `protobuf:"varint,6,opt,name=big_ball_rate,json=bigBallRate,proto3" json:"big_ball_rate,omitempty"`          //大球率
	CornerKickRate int64                   `protobuf:"varint,7,opt,name=corner_kick_rate,json=cornerKickRate,proto3" json:"corner_kick_rate,omitempty"` //大角球率
	Score          string                  `protobuf:"bytes,8,opt,name=score,proto3" json:"score,omitempty"`                                            //比分 8.5
	Member         []*FootLiveLineupMember `protobuf:"bytes,9,rep,name=member,proto3" json:"member,omitempty"`                                          //球队成员详情
}

func (x *FootLiveLineupDetail) Reset() {
	*x = FootLiveLineupDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupDetail) ProtoMessage() {}

func (x *FootLiveLineupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupDetail.ProtoReflect.Descriptor instead.
func (*FootLiveLineupDetail) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{2}
}

func (x *FootLiveLineupDetail) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *FootLiveLineupDetail) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *FootLiveLineupDetail) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *FootLiveLineupDetail) GetFormation() string {
	if x != nil {
		return x.Formation
	}
	return ""
}

func (x *FootLiveLineupDetail) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *FootLiveLineupDetail) GetBigBallRate() int64 {
	if x != nil {
		return x.BigBallRate
	}
	return 0
}

func (x *FootLiveLineupDetail) GetCornerKickRate() int64 {
	if x != nil {
		return x.CornerKickRate
	}
	return 0
}

func (x *FootLiveLineupDetail) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *FootLiveLineupDetail) GetMember() []*FootLiveLineupMember {
	if x != nil {
		return x.Member
	}
	return nil
}

//球队成员详情
type FootLiveLineupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId    int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`          //球员id
	Image       string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                                 //球员图片
	PersonName  string `protobuf:"bytes,3,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`     //球员名称
	ElevateType int64  `protobuf:"varint,4,opt,name=elevate_type,json=elevateType,proto3" json:"elevate_type,omitempty"` //提升类型 （1：在场时胜率提升，2：在场时总进球提升，3：在场时角球数提升）
	ElevateRate int64  `protobuf:"varint,5,opt,name=elevate_rate,json=elevateRate,proto3" json:"elevate_rate,omitempty"` //提升百分比
	ClothesNum  int64  `protobuf:"varint,6,opt,name=clothes_num,json=clothesNum,proto3" json:"clothes_num,omitempty"`    //球衣号码
	Position    int64  `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`                          //x轴
}

func (x *FootLiveLineupMember) Reset() {
	*x = FootLiveLineupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupMember) ProtoMessage() {}

func (x *FootLiveLineupMember) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupMember.ProtoReflect.Descriptor instead.
func (*FootLiveLineupMember) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{3}
}

func (x *FootLiveLineupMember) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FootLiveLineupMember) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *FootLiveLineupMember) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *FootLiveLineupMember) GetElevateType() int64 {
	if x != nil {
		return x.ElevateType
	}
	return 0
}

func (x *FootLiveLineupMember) GetElevateRate() int64 {
	if x != nil {
		return x.ElevateRate
	}
	return 0
}

func (x *FootLiveLineupMember) GetClothesNum() int64 {
	if x != nil {
		return x.ClothesNum
	}
	return 0
}

func (x *FootLiveLineupMember) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

//预测阵容占比
type FootLiveLineupScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                             //占比标题
	MainTotal  string `protobuf:"bytes,2,opt,name=main_total,json=mainTotal,proto3" json:"main_total,omitempty"`    //主队总计，例如：3.1/1.2|u， 通过 |u 或者 |d 辨别是升是降
	MainSingle string `protobuf:"bytes,3,opt,name=main_single,json=mainSingle,proto3" json:"main_single,omitempty"` //主队单计，例如：（2.8/1.2）， 包含括号
	CustTotal  string `protobuf:"bytes,4,opt,name=cust_total,json=custTotal,proto3" json:"cust_total,omitempty"`    //客队总计，例如：1.5/2， 通过 |u 或者 |d 辨别是升是降
	CustSingle string `protobuf:"bytes,5,opt,name=cust_single,json=custSingle,proto3" json:"cust_single,omitempty"` //客队单计，例如：(3.5/1.0)， 包含括号
}

func (x *FootLiveLineupScale) Reset() {
	*x = FootLiveLineupScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupScale) ProtoMessage() {}

func (x *FootLiveLineupScale) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupScale.ProtoReflect.Descriptor instead.
func (*FootLiveLineupScale) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{4}
}

func (x *FootLiveLineupScale) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FootLiveLineupScale) GetMainTotal() string {
	if x != nil {
		return x.MainTotal
	}
	return ""
}

func (x *FootLiveLineupScale) GetMainSingle() string {
	if x != nil {
		return x.MainSingle
	}
	return ""
}

func (x *FootLiveLineupScale) GetCustTotal() string {
	if x != nil {
		return x.CustTotal
	}
	return ""
}

func (x *FootLiveLineupScale) GetCustSingle() string {
	if x != nil {
		return x.CustSingle
	}
	return ""
}

type FootLiveLineupReplacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64                              `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`         //球队id
	TeamName  string                             `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`    //球队名称
	TeamImage string                             `protobuf:"bytes,3,opt,name=team_image,json=teamImage,proto3" json:"team_image,omitempty"` //球队队徽
	Member    []*FootLiveLineupReplacementMember `protobuf:"bytes,4,rep,name=member,proto3" json:"member,omitempty"`                        //本场换人详情
}

func (x *FootLiveLineupReplacement) Reset() {
	*x = FootLiveLineupReplacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupReplacement) ProtoMessage() {}

func (x *FootLiveLineupReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupReplacement.ProtoReflect.Descriptor instead.
func (*FootLiveLineupReplacement) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{5}
}

func (x *FootLiveLineupReplacement) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *FootLiveLineupReplacement) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *FootLiveLineupReplacement) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *FootLiveLineupReplacement) GetMember() []*FootLiveLineupReplacementMember {
	if x != nil {
		return x.Member
	}
	return nil
}

//本场换人详情
type FootLiveLineupReplacementMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalTime    int64  `protobuf:"varint,1,opt,name=interval_time,json=intervalTime,proto3" json:"interval_time,omitempty"`            //间隔时间
	LowerPersonId   int64  `protobuf:"varint,2,opt,name=lower_person_id,json=lowerPersonId,proto3" json:"lower_person_id,omitempty"`       //（下场）球员d
	LowerClothesNum int64  `protobuf:"varint,3,opt,name=lower_clothes_num,json=lowerClothesNum,proto3" json:"lower_clothes_num,omitempty"` //（下场）球衣号码
	LowerImage      string `protobuf:"bytes,4,opt,name=lower_image,json=lowerImage,proto3" json:"lower_image,omitempty"`                   //（下场）球员图片
	LowerPersonName string `protobuf:"bytes,5,opt,name=lower_person_name,json=lowerPersonName,proto3" json:"lower_person_name,omitempty"`  //（下场）球员名字
	LowerPosition   string `protobuf:"bytes,6,opt,name=lower_position,json=lowerPosition,proto3" json:"lower_position,omitempty"`          //（下场）球员位置
	LowerType       int64  `protobuf:"varint,7,opt,name=lower_type,json=lowerType,proto3" json:"lower_type,omitempty"`                     //（下场）类型
	UpperPersonId   int64  `protobuf:"varint,8,opt,name=upper_person_id,json=upperPersonId,proto3" json:"upper_person_id,omitempty"`       //（上场）球员id
	UpperClothesNum int64  `protobuf:"varint,9,opt,name=upper_clothes_num,json=upperClothesNum,proto3" json:"upper_clothes_num,omitempty"` //（上场）球衣号码
	UpperImage      string `protobuf:"bytes,10,opt,name=upper_image,json=upperImage,proto3" json:"upper_image,omitempty"`                  //（上场）球员图片
	UpperPersonName string `protobuf:"bytes,11,opt,name=upper_person_name,json=upperPersonName,proto3" json:"upper_person_name,omitempty"` // （上场）球员名称
	UpperPosition   string `protobuf:"bytes,12,opt,name=upper_position,json=upperPosition,proto3" json:"upper_position,omitempty"`         //（上场）球员位置
	UpperType       int64  `protobuf:"varint,13,opt,name=upper_type,json=upperType,proto3" json:"upper_type,omitempty"`                    //（上场）类型
}

func (x *FootLiveLineupReplacementMember) Reset() {
	*x = FootLiveLineupReplacementMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupReplacementMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupReplacementMember) ProtoMessage() {}

func (x *FootLiveLineupReplacementMember) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupReplacementMember.ProtoReflect.Descriptor instead.
func (*FootLiveLineupReplacementMember) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{6}
}

func (x *FootLiveLineupReplacementMember) GetIntervalTime() int64 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetLowerPersonId() int64 {
	if x != nil {
		return x.LowerPersonId
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetLowerClothesNum() int64 {
	if x != nil {
		return x.LowerClothesNum
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetLowerImage() string {
	if x != nil {
		return x.LowerImage
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetLowerPersonName() string {
	if x != nil {
		return x.LowerPersonName
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetLowerPosition() string {
	if x != nil {
		return x.LowerPosition
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetLowerType() int64 {
	if x != nil {
		return x.LowerType
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetUpperPersonId() int64 {
	if x != nil {
		return x.UpperPersonId
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetUpperClothesNum() int64 {
	if x != nil {
		return x.UpperClothesNum
	}
	return 0
}

func (x *FootLiveLineupReplacementMember) GetUpperImage() string {
	if x != nil {
		return x.UpperImage
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetUpperPersonName() string {
	if x != nil {
		return x.UpperPersonName
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetUpperPosition() string {
	if x != nil {
		return x.UpperPosition
	}
	return ""
}

func (x *FootLiveLineupReplacementMember) GetUpperType() int64 {
	if x != nil {
		return x.UpperType
	}
	return 0
}

type FootLiveLineupReserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64                          `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`         //球队id
	TeamName  string                         `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`    //球队名称
	TeamImage string                         `protobuf:"bytes,3,opt,name=team_image,json=teamImage,proto3" json:"team_image,omitempty"` //球队队徽
	Member    []*FootLiveLineupReserveMember `protobuf:"bytes,4,rep,name=member,proto3" json:"member,omitempty"`                        //替补阵容
}

func (x *FootLiveLineupReserve) Reset() {
	*x = FootLiveLineupReserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupReserve) ProtoMessage() {}

func (x *FootLiveLineupReserve) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupReserve.ProtoReflect.Descriptor instead.
func (*FootLiveLineupReserve) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{7}
}

func (x *FootLiveLineupReserve) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *FootLiveLineupReserve) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *FootLiveLineupReserve) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *FootLiveLineupReserve) GetMember() []*FootLiveLineupReserveMember {
	if x != nil {
		return x.Member
	}
	return nil
}

//替补阵容
type FootLiveLineupReserveMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`       //球员id
	PersonName string `protobuf:"bytes,2,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`  //球员名字
	Image      string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`                              //球员图片
	Position   string `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`                        //球员位置
	ClothesNum int64  `protobuf:"varint,5,opt,name=clothes_num,json=clothesNum,proto3" json:"clothes_num,omitempty"` //球衣号码
	Reason     string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`                            //受伤等原因
}

func (x *FootLiveLineupReserveMember) Reset() {
	*x = FootLiveLineupReserveMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupReserveMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupReserveMember) ProtoMessage() {}

func (x *FootLiveLineupReserveMember) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupReserveMember.ProtoReflect.Descriptor instead.
func (*FootLiveLineupReserveMember) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{8}
}

func (x *FootLiveLineupReserveMember) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FootLiveLineupReserveMember) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *FootLiveLineupReserveMember) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *FootLiveLineupReserveMember) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FootLiveLineupReserveMember) GetClothesNum() int64 {
	if x != nil {
		return x.ClothesNum
	}
	return 0
}

func (x *FootLiveLineupReserveMember) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//伤停情况
type FootLiveLineupInjury struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64                         `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`         //球队id
	TeamName  string                        `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`    //球队名称
	TeamImage string                        `protobuf:"bytes,3,opt,name=team_image,json=teamImage,proto3" json:"team_image,omitempty"` //球队队徽
	Member    []*FootLiveLineupInjuryMember `protobuf:"bytes,4,rep,name=member,proto3" json:"member,omitempty"`                        //伤停情况详情
}

func (x *FootLiveLineupInjury) Reset() {
	*x = FootLiveLineupInjury{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupInjury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupInjury) ProtoMessage() {}

func (x *FootLiveLineupInjury) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupInjury.ProtoReflect.Descriptor instead.
func (*FootLiveLineupInjury) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{9}
}

func (x *FootLiveLineupInjury) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *FootLiveLineupInjury) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *FootLiveLineupInjury) GetTeamImage() string {
	if x != nil {
		return x.TeamImage
	}
	return ""
}

func (x *FootLiveLineupInjury) GetMember() []*FootLiveLineupInjuryMember {
	if x != nil {
		return x.Member
	}
	return nil
}

//伤停情况详情
type FootLiveLineupInjuryMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`       //球员id
	PersonName string `protobuf:"bytes,2,opt,name=person_name,json=personName,proto3" json:"person_name,omitempty"`  //球员名字
	Image      string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`                              //球员图片
	Position   string `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`                        //球员位置
	ClothesNum int64  `protobuf:"varint,5,opt,name=clothes_num,json=clothesNum,proto3" json:"clothes_num,omitempty"` //球衣号码
	Reason     string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`                            //受伤等原因
}

func (x *FootLiveLineupInjuryMember) Reset() {
	*x = FootLiveLineupInjuryMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_live_lineup_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLiveLineupInjuryMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLiveLineupInjuryMember) ProtoMessage() {}

func (x *FootLiveLineupInjuryMember) ProtoReflect() protoreflect.Message {
	mi := &file_foot_live_lineup_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLiveLineupInjuryMember.ProtoReflect.Descriptor instead.
func (*FootLiveLineupInjuryMember) Descriptor() ([]byte, []int) {
	return file_foot_live_lineup_proto_rawDescGZIP(), []int{10}
}

func (x *FootLiveLineupInjuryMember) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FootLiveLineupInjuryMember) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *FootLiveLineupInjuryMember) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *FootLiveLineupInjuryMember) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *FootLiveLineupInjuryMember) GetClothesNum() int64 {
	if x != nil {
		return x.ClothesNum
	}
	return 0
}

func (x *FootLiveLineupInjuryMember) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_foot_live_lineup_proto protoreflect.FileDescriptor

var file_foot_live_lineup_proto_rawDesc = []byte{
	0x0a, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x16, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x3a,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x45,
	0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x46, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x43, 0x75, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f,
	0x61, 0x72, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79,
	0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x12, 0x69, 0x6e,
	0x6a, 0x75, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x10, 0x69,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x22,
	0xb7, 0x02, 0x0a, 0x14, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x69, 0x67, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x46, 0x6f,
	0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x46, 0x6f,
	0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x73,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x94, 0x04, 0x0a, 0x1f, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6c,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x46, 0x6f,
	0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a,
	0x1a, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foot_live_lineup_proto_rawDescOnce sync.Once
	file_foot_live_lineup_proto_rawDescData = file_foot_live_lineup_proto_rawDesc
)

func file_foot_live_lineup_proto_rawDescGZIP() []byte {
	file_foot_live_lineup_proto_rawDescOnce.Do(func() {
		file_foot_live_lineup_proto_rawDescData = protoimpl.X.CompressGZIP(file_foot_live_lineup_proto_rawDescData)
	})
	return file_foot_live_lineup_proto_rawDescData
}

var file_foot_live_lineup_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_foot_live_lineup_proto_goTypes = []interface{}{
	(*FootLiveLineupRequest)(nil),           // 0: FootLiveLineupRequest
	(*FootLiveLineupResponse)(nil),          // 1: FootLiveLineupResponse
	(*FootLiveLineupDetail)(nil),            // 2: FootLiveLineupDetail
	(*FootLiveLineupMember)(nil),            // 3: FootLiveLineupMember
	(*FootLiveLineupScale)(nil),             // 4: FootLiveLineupScale
	(*FootLiveLineupReplacement)(nil),       // 5: FootLiveLineupReplacement
	(*FootLiveLineupReplacementMember)(nil), // 6: FootLiveLineupReplacementMember
	(*FootLiveLineupReserve)(nil),           // 7: FootLiveLineupReserve
	(*FootLiveLineupReserveMember)(nil),     // 8: FootLiveLineupReserveMember
	(*FootLiveLineupInjury)(nil),            // 9: FootLiveLineupInjury
	(*FootLiveLineupInjuryMember)(nil),      // 10: FootLiveLineupInjuryMember
}
var file_foot_live_lineup_proto_depIdxs = []int32{
	2,  // 0: FootLiveLineupResponse.starting_main:type_name -> FootLiveLineupDetail
	2,  // 1: FootLiveLineupResponse.starting_cust:type_name -> FootLiveLineupDetail
	2,  // 2: FootLiveLineupResponse.forecast_main:type_name -> FootLiveLineupDetail
	2,  // 3: FootLiveLineupResponse.forecast_cust:type_name -> FootLiveLineupDetail
	4,  // 4: FootLiveLineupResponse.scale_list:type_name -> FootLiveLineupScale
	5,  // 5: FootLiveLineupResponse.replacement_main:type_name -> FootLiveLineupReplacement
	5,  // 6: FootLiveLineupResponse.replacement_cust:type_name -> FootLiveLineupReplacement
	7,  // 7: FootLiveLineupResponse.reserve_lineup_main:type_name -> FootLiveLineupReserve
	7,  // 8: FootLiveLineupResponse.reserve_lineup_cust:type_name -> FootLiveLineupReserve
	9,  // 9: FootLiveLineupResponse.injury_arrest_main:type_name -> FootLiveLineupInjury
	9,  // 10: FootLiveLineupResponse.injury_arrest_cust:type_name -> FootLiveLineupInjury
	3,  // 11: FootLiveLineupDetail.member:type_name -> FootLiveLineupMember
	6,  // 12: FootLiveLineupReplacement.member:type_name -> FootLiveLineupReplacementMember
	8,  // 13: FootLiveLineupReserve.member:type_name -> FootLiveLineupReserveMember
	10, // 14: FootLiveLineupInjury.member:type_name -> FootLiveLineupInjuryMember
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_foot_live_lineup_proto_init() }
func file_foot_live_lineup_proto_init() {
	if File_foot_live_lineup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_foot_live_lineup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupReplacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupReplacementMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupReserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupReserveMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupInjury); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_live_lineup_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLiveLineupInjuryMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foot_live_lineup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_foot_live_lineup_proto_goTypes,
		DependencyIndexes: file_foot_live_lineup_proto_depIdxs,
		MessageInfos:      file_foot_live_lineup_proto_msgTypes,
	}.Build()
	File_foot_live_lineup_proto = out.File
	file_foot_live_lineup_proto_rawDesc = nil
	file_foot_live_lineup_proto_goTypes = nil
	file_foot_live_lineup_proto_depIdxs = nil
}
