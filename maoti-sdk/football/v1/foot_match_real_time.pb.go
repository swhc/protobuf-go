// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: foot_match_real_time.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//比赛日历
type FootMatchRealTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabType      int64   `protobuf:"varint,6,opt,name=tabType,proto3" json:"tabType,omitempty"` //1：即时，2：全部比赛，3：关注
	Status       int64   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`   //即时的状态 0全部,1：未开始，2为开始，3为结束
	Page         int64   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int64   `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	DateTime     string  `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //全部比赛的日期  2020-09-01
	TournamentId []int64 `protobuf:"varint,1,rep,packed,name=tournamentId,proto3" json:"tournamentId,omitempty"` //赛事筛选
	EventIds     []int64 `protobuf:"varint,2,rep,packed,name=eventIds,proto3" json:"eventIds,omitempty"`         //比赛筛选
}

func (x *FootMatchRealTimeRequest) Reset() {
	*x = FootMatchRealTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeRequest) ProtoMessage() {}

func (x *FootMatchRealTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeRequest.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeRequest) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{0}
}

func (x *FootMatchRealTimeRequest) GetTabType() int64 {
	if x != nil {
		return x.TabType
	}
	return 0
}

func (x *FootMatchRealTimeRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FootMatchRealTimeRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FootMatchRealTimeRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FootMatchRealTimeRequest) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *FootMatchRealTimeRequest) GetTournamentId() []int64 {
	if x != nil {
		return x.TournamentId
	}
	return nil
}

func (x *FootMatchRealTimeRequest) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

type FootMatchRealTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64                    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  []*FootMatchRealTimeInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FootMatchRealTimeResponse) Reset() {
	*x = FootMatchRealTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeResponse) ProtoMessage() {}

func (x *FootMatchRealTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeResponse.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeResponse) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{1}
}

func (x *FootMatchRealTimeResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FootMatchRealTimeResponse) GetList() []*FootMatchRealTimeInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type FootMatchRealTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64           `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`                                            //当前记录ID 赛事iD用于收藏传递
	TournamentId             int64           `protobuf:"varint,1,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`                         //联赛名称
	TournamentName           string          `protobuf:"bytes,2,opt,name=tournamentName,proto3" json:"tournamentName,omitempty"`                      //联赛名称
	TeamMainId               int64           `protobuf:"varint,3,opt,name=teamMainId,proto3" json:"teamMainId,omitempty"`                             //主队ID
	TeamMainName             string          `protobuf:"bytes,4,opt,name=teamMainName,proto3" json:"teamMainName,omitempty"`                          //主队name
	TeamCustId               int64           `protobuf:"varint,5,opt,name=teamCustId,proto3" json:"teamCustId,omitempty"`                             //客队ID
	TeamCustName             string          `protobuf:"bytes,6,opt,name=teamCustName,proto3" json:"teamCustName,omitempty"`                          //客队name
	TeamMainScore            int64           `protobuf:"varint,7,opt,name=teamMainScore,proto3" json:"teamMainScore,omitempty"`                       //主队进球总分
	TeamCustScore            int64           `protobuf:"varint,18,opt,name=teamCustScore,proto3" json:"teamCustScore,omitempty"`                      //客队进球总分
	Result                   string          `protobuf:"bytes,19,opt,name=result,proto3" json:"result,omitempty"`                                     //结果
	StartTime                int64           `protobuf:"varint,110,opt,name=startTime,proto3" json:"startTime,omitempty"`                             //当前比赛开始时间戳
	StartDate                string          `protobuf:"bytes,111,opt,name=startDate,proto3" json:"startDate,omitempty"`                              //
	EndTime                  int64           `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`                                  //结束时间
	EventStatusResult        int64           `protobuf:"varint,13,opt,name=eventStatusResult,proto3" json:"eventStatusResult,omitempty"`              //当前比赛状态 1：未开始，2为开始，3为结束 4特殊状况临时中断比赛  5、延迟  6、取消
	PlaybackType             int64           `protobuf:"varint,14,opt,name=playbackType,proto3" json:"playbackType,omitempty"`                        //播放类型（1:直播，2：3D）
	PlayUrl                  string          `protobuf:"bytes,15,opt,name=playUrl,proto3" json:"playUrl,omitempty"`                                   //跳转地址
	LeagueImage              string          `protobuf:"bytes,16,opt,name=leagueImage,proto3" json:"leagueImage,omitempty"`                           //联赛图标
	HalfCourt                *FootHalfCourt  `protobuf:"bytes,17,opt,name=halfCourt,proto3" json:"halfCourt,omitempty"`                               //当前半场得分状况
	CornerKick               *FootCornerKick `protobuf:"bytes,11,opt,name=cornerKick,proto3" json:"cornerKick,omitempty"`                             //角球
	IsCollect                bool            `protobuf:"varint,119,opt,name=isCollect,proto3" json:"isCollect,omitempty"`                             //是否收藏
	TeamMain                 *FootTeamInfo   `protobuf:"bytes,20,opt,name=teamMain,proto3" json:"teamMain,omitempty"`                                 //主队数据信息
	TeamCust                 *FootTeamInfo   `protobuf:"bytes,21,opt,name=teamCust,proto3" json:"teamCust,omitempty"`                                 //客队数据信息
	Reason                   string          `protobuf:"bytes,22,opt,name=reason,proto3" json:"reason,omitempty"`                                     //备注说明：什么原因中断
	EventStatusId            int64           `protobuf:"varint,23,opt,name=eventStatusId,proto3" json:"eventStatusId,omitempty"`                      //当前比赛eapi的原有状态
	CurrentTime              int64           `protobuf:"varint,24,opt,name=currentTime,proto3" json:"currentTime,omitempty"`                          //服务器当前时间戳
	SecondHalfTime           int64           `protobuf:"varint,25,opt,name=secondHalfTime,proto3" json:"secondHalfTime,omitempty"`                    //下半场开始时间
	SecondHalfExtraTimes     string          `protobuf:"bytes,26,opt,name=secondHalfExtraTimes,proto3" json:"secondHalfExtraTimes,omitempty"`         //下半场加时赛开始时间
	SecondHalfTimes          string          `protobuf:"bytes,27,opt,name=secondHalfTimes,proto3" json:"secondHalfTimes,omitempty"`                   //下半场开始时间
	FirstHalfTime            int64           `protobuf:"varint,28,opt,name=firstHalfTime,proto3" json:"firstHalfTime,omitempty"`                      //真正开始时间
	FirstHalfTimes           string          `protobuf:"bytes,29,opt,name=firstHalfTimes,proto3" json:"firstHalfTimes,omitempty"`                     //上半场开始时间
	FirstHalfExtraTimes      string          `protobuf:"bytes,30,opt,name=firstHalfExtraTimes,proto3" json:"firstHalfExtraTimes,omitempty"`           //上半场加时赛开始时间
	Elapsed                  int64           `protobuf:"varint,31,opt,name=elapsed,proto3" json:"elapsed,omitempty"`                                  //事件发生时的比赛时长
	ElapsedUpTime            int64           `protobuf:"varint,32,opt,name=elapsedUpTime,proto3" json:"elapsedUpTime,omitempty"`                      //事件时长更新时间戳
	PlanNum                  int64           `protobuf:"varint,33,opt,name=planNum,proto3" json:"planNum,omitempty"`                                  //方案数量
	LeagueColor              string          `protobuf:"bytes,34,opt,name=leagueColor,proto3" json:"leagueColor,omitempty"`                           //联赛颜色
	MainExtratimeScore       string          `protobuf:"bytes,35,opt,name=mainExtratimeScore,proto3" json:"mainExtratimeScore,omitempty"`             //加时主队得分
	CustExtratimeScore       string          `protobuf:"bytes,36,opt,name=custExtratimeScore,proto3" json:"custExtratimeScore,omitempty"`             //加时客队得分
	MainPenaltyshootoutScore string          `protobuf:"bytes,37,opt,name=mainPenaltyshootoutScore,proto3" json:"mainPenaltyshootoutScore,omitempty"` //点球主队得分
	CustPenaltyshootoutScore string          `protobuf:"bytes,38,opt,name=custPenaltyshootoutScore,proto3" json:"custPenaltyshootoutScore,omitempty"` //点球客队得分
	MainFinalResult          string          `protobuf:"bytes,39,opt,name=mainFinalResult,proto3" json:"mainFinalResult,omitempty"`                   //主队最终得分
	CustFinalResult          string          `protobuf:"bytes,40,opt,name=custFinalResult,proto3" json:"custFinalResult,omitempty"`                   //客队最终得分
	Odds                     *FootOdds       `protobuf:"bytes,41,opt,name=odds,proto3" json:"odds,omitempty"`                                         //指数
	Round                    string          `protobuf:"bytes,42,opt,name=round,proto3" json:"round,omitempty"`                                       //场次 | 编号
	TournamentImage          string          `protobuf:"bytes,43,opt,name=tournamentImage,proto3" json:"tournamentImage,omitempty"`                   //  当前联赛的图片
	Color                    string          `protobuf:"bytes,44,opt,name=color,proto3" json:"color,omitempty"`                                       //  联赛颜色
}

func (x *FootMatchRealTimeInfo) Reset() {
	*x = FootMatchRealTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootMatchRealTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootMatchRealTimeInfo) ProtoMessage() {}

func (x *FootMatchRealTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootMatchRealTimeInfo.ProtoReflect.Descriptor instead.
func (*FootMatchRealTimeInfo) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{2}
}

func (x *FootMatchRealTimeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetTournamentId() int64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetTeamMainId() int64 {
	if x != nil {
		return x.TeamMainId
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetTeamMainName() string {
	if x != nil {
		return x.TeamMainName
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetTeamCustId() int64 {
	if x != nil {
		return x.TeamCustId
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetTeamCustName() string {
	if x != nil {
		return x.TeamCustName
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetTeamMainScore() int64 {
	if x != nil {
		return x.TeamMainScore
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetTeamCustScore() int64 {
	if x != nil {
		return x.TeamCustScore
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetEventStatusResult() int64 {
	if x != nil {
		return x.EventStatusResult
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetPlaybackType() int64 {
	if x != nil {
		return x.PlaybackType
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetPlayUrl() string {
	if x != nil {
		return x.PlayUrl
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetLeagueImage() string {
	if x != nil {
		return x.LeagueImage
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetHalfCourt() *FootHalfCourt {
	if x != nil {
		return x.HalfCourt
	}
	return nil
}

func (x *FootMatchRealTimeInfo) GetCornerKick() *FootCornerKick {
	if x != nil {
		return x.CornerKick
	}
	return nil
}

func (x *FootMatchRealTimeInfo) GetIsCollect() bool {
	if x != nil {
		return x.IsCollect
	}
	return false
}

func (x *FootMatchRealTimeInfo) GetTeamMain() *FootTeamInfo {
	if x != nil {
		return x.TeamMain
	}
	return nil
}

func (x *FootMatchRealTimeInfo) GetTeamCust() *FootTeamInfo {
	if x != nil {
		return x.TeamCust
	}
	return nil
}

func (x *FootMatchRealTimeInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetEventStatusId() int64 {
	if x != nil {
		return x.EventStatusId
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetSecondHalfTime() int64 {
	if x != nil {
		return x.SecondHalfTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetSecondHalfExtraTimes() string {
	if x != nil {
		return x.SecondHalfExtraTimes
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetSecondHalfTimes() string {
	if x != nil {
		return x.SecondHalfTimes
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetFirstHalfTime() int64 {
	if x != nil {
		return x.FirstHalfTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetFirstHalfTimes() string {
	if x != nil {
		return x.FirstHalfTimes
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetFirstHalfExtraTimes() string {
	if x != nil {
		return x.FirstHalfExtraTimes
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetElapsedUpTime() int64 {
	if x != nil {
		return x.ElapsedUpTime
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetPlanNum() int64 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *FootMatchRealTimeInfo) GetLeagueColor() string {
	if x != nil {
		return x.LeagueColor
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetMainExtratimeScore() string {
	if x != nil {
		return x.MainExtratimeScore
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetCustExtratimeScore() string {
	if x != nil {
		return x.CustExtratimeScore
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetMainPenaltyshootoutScore() string {
	if x != nil {
		return x.MainPenaltyshootoutScore
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetCustPenaltyshootoutScore() string {
	if x != nil {
		return x.CustPenaltyshootoutScore
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetMainFinalResult() string {
	if x != nil {
		return x.MainFinalResult
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetCustFinalResult() string {
	if x != nil {
		return x.CustFinalResult
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetOdds() *FootOdds {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *FootMatchRealTimeInfo) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetTournamentImage() string {
	if x != nil {
		return x.TournamentImage
	}
	return ""
}

func (x *FootMatchRealTimeInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type FootHalfCourt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMain int64 `protobuf:"varint,1,opt,name=teamMain,proto3" json:"teamMain,omitempty"` //主队得分
	TeamCust int64 `protobuf:"varint,2,opt,name=teamCust,proto3" json:"teamCust,omitempty"` //得分
}

func (x *FootHalfCourt) Reset() {
	*x = FootHalfCourt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootHalfCourt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootHalfCourt) ProtoMessage() {}

func (x *FootHalfCourt) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootHalfCourt.ProtoReflect.Descriptor instead.
func (*FootHalfCourt) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{3}
}

func (x *FootHalfCourt) GetTeamMain() int64 {
	if x != nil {
		return x.TeamMain
	}
	return 0
}

func (x *FootHalfCourt) GetTeamCust() int64 {
	if x != nil {
		return x.TeamCust
	}
	return 0
}

type FootCornerKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamMain int64 `protobuf:"varint,2,opt,name=teamMain,proto3" json:"teamMain,omitempty"` //主队角球数
	TeamCust int64 `protobuf:"varint,1,opt,name=teamCust,proto3" json:"teamCust,omitempty"` //角球数
}

func (x *FootCornerKick) Reset() {
	*x = FootCornerKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootCornerKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootCornerKick) ProtoMessage() {}

func (x *FootCornerKick) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootCornerKick.ProtoReflect.Descriptor instead.
func (*FootCornerKick) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{4}
}

func (x *FootCornerKick) GetTeamMain() int64 {
	if x != nil {
		return x.TeamMain
	}
	return 0
}

func (x *FootCornerKick) GetTeamCust() int64 {
	if x != nil {
		return x.TeamCust
	}
	return 0
}

type FootTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`              //主队名称
	Icon       string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`              //图标
	Rank       string `protobuf:"bytes,9,opt,name=rank,proto3" json:"rank,omitempty"`              //排名
	YellowCard int64  `protobuf:"varint,3,opt,name=yellowCard,proto3" json:"yellowCard,omitempty"` //
	RedCard    int64  `protobuf:"varint,5,opt,name=redCard,proto3" json:"redCard,omitempty"`       //
}

func (x *FootTeamInfo) Reset() {
	*x = FootTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootTeamInfo) ProtoMessage() {}

func (x *FootTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootTeamInfo.ProtoReflect.Descriptor instead.
func (*FootTeamInfo) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{5}
}

func (x *FootTeamInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FootTeamInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *FootTeamInfo) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *FootTeamInfo) GetYellowCard() int64 {
	if x != nil {
		return x.YellowCard
	}
	return 0
}

func (x *FootTeamInfo) GetRedCard() int64 {
	if x != nil {
		return x.RedCard
	}
	return 0
}

type FootOdds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiddleParam string `protobuf:"bytes,1,opt,name=middleParam,proto3" json:"middleParam,omitempty"` //欧盘|中间参数（格式：1.70 +0/0.5 2.00）【这个app需要舍弃，h5在使用】只需要显示下面两对应
	OddsUp      string `protobuf:"bytes,2,opt,name=oddsUp,proto3" json:"oddsUp,omitempty"`           //亚赔的即时指数【格式：0.5|u,+2.5,0.25|d】
	OddsDown    string `protobuf:"bytes,3,opt,name=oddsDown,proto3" json:"oddsDown,omitempty"`       //大小球的即时指数【格式：0.5|u,+2.5,0.25|d】
}

func (x *FootOdds) Reset() {
	*x = FootOdds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foot_match_real_time_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootOdds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootOdds) ProtoMessage() {}

func (x *FootOdds) ProtoReflect() protoreflect.Message {
	mi := &file_foot_match_real_time_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootOdds.ProtoReflect.Descriptor instead.
func (*FootOdds) Descriptor() ([]byte, []int) {
	return file_foot_match_real_time_proto_rawDescGZIP(), []int{6}
}

func (x *FootOdds) GetMiddleParam() string {
	if x != nil {
		return x.MiddleParam
	}
	return ""
}

func (x *FootOdds) GetOddsUp() string {
	if x != nil {
		return x.OddsUp
	}
	return ""
}

func (x *FootOdds) GetOddsDown() string {
	if x != nil {
		return x.OddsDown
	}
	return ""
}

var File_foot_match_real_time_proto protoreflect.FileDescriptor

var file_foot_match_real_time_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a,
	0x18, 0x46, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x0d, 0x0a, 0x15, 0x46, 0x6f, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74,
	0x52, 0x09, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b,
	0x52, 0x0a, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66,
	0x6f, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61,
	0x6c, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48,
	0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c,
	0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75,
	0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x68, 0x6f,
	0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x68, 0x6f,
	0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61,
	0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x43,
	0x6f, 0x75, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x0e,
	0x46, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22, 0x60, 0x0a,
	0x08, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x64, 0x64, 0x73, 0x55, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x64, 0x64,
	0x73, 0x55, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foot_match_real_time_proto_rawDescOnce sync.Once
	file_foot_match_real_time_proto_rawDescData = file_foot_match_real_time_proto_rawDesc
)

func file_foot_match_real_time_proto_rawDescGZIP() []byte {
	file_foot_match_real_time_proto_rawDescOnce.Do(func() {
		file_foot_match_real_time_proto_rawDescData = protoimpl.X.CompressGZIP(file_foot_match_real_time_proto_rawDescData)
	})
	return file_foot_match_real_time_proto_rawDescData
}

var file_foot_match_real_time_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_foot_match_real_time_proto_goTypes = []interface{}{
	(*FootMatchRealTimeRequest)(nil),  // 0: FootMatchRealTimeRequest
	(*FootMatchRealTimeResponse)(nil), // 1: FootMatchRealTimeResponse
	(*FootMatchRealTimeInfo)(nil),     // 2: FootMatchRealTimeInfo
	(*FootHalfCourt)(nil),             // 3: FootHalfCourt
	(*FootCornerKick)(nil),            // 4: FootCornerKick
	(*FootTeamInfo)(nil),              // 5: footTeamInfo
	(*FootOdds)(nil),                  // 6: FootOdds
}
var file_foot_match_real_time_proto_depIdxs = []int32{
	2, // 0: FootMatchRealTimeResponse.list:type_name -> FootMatchRealTimeInfo
	3, // 1: FootMatchRealTimeInfo.halfCourt:type_name -> FootHalfCourt
	4, // 2: FootMatchRealTimeInfo.cornerKick:type_name -> FootCornerKick
	5, // 3: FootMatchRealTimeInfo.teamMain:type_name -> footTeamInfo
	5, // 4: FootMatchRealTimeInfo.teamCust:type_name -> footTeamInfo
	6, // 5: FootMatchRealTimeInfo.odds:type_name -> FootOdds
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_foot_match_real_time_proto_init() }
func file_foot_match_real_time_proto_init() {
	if File_foot_match_real_time_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_foot_match_real_time_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootMatchRealTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootHalfCourt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootCornerKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foot_match_real_time_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootOdds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foot_match_real_time_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_foot_match_real_time_proto_goTypes,
		DependencyIndexes: file_foot_match_real_time_proto_depIdxs,
		MessageInfos:      file_foot_match_real_time_proto_msgTypes,
	}.Build()
	File_foot_match_real_time_proto = out.File
	file_foot_match_real_time_proto_rawDesc = nil
	file_foot_match_real_time_proto_goTypes = nil
	file_foot_match_real_time_proto_depIdxs = nil
}
